/* REXX - QWGEN - Generate Quickref K statements     */
/*                                                   */
/* Process PDSHELP member and generate K (index)     */
/* statements.  This can then be read into           */
/* QWIKREF2 utility to build a QuickRef userdatabase */
/* containing PDS commands, operands and messages    */
/*                                                   */
/*  Dana Mitchell  12/8/2010                         */
/*  dmitche@Shazam.net                               */
/*                                                   */
ISREDIT "Macro (parms)"

/* Update any site Defaults with desired values      */

vendor = "CBTTAPE.ORG"
product = "PDS COMMAND"
release = "REL86"
copyright = "NO"
category = "FREEWARE"
desc = "Freeware TSO Utility Commands Descriptions"
type = ""

Isredit "(last) = LINENUM .ZLAST"

/* Insert first K record at beginning of file   */

NEWLINE = "K V='"vendor"' P='"product"' R='"release"' I=PDS86 "
Isredit "LINE_BEFORE 1 = (NEWLINE)"

/* Insert copyright record     */

NEWLINE = "KCPY V='"vendor"' C="copyright
Isredit "LINE_BEFORE 1 = (NEWLINE)"

/* Insert category  records     */

NEWLINE = "KCAP V='"vendor"' P='"product"' R=* C="category
Isredit "LINE_BEFORE 1 = (NEWLINE)"

NEWLINE = "KCAD C="category" D='"desc"'"
Isredit "LINE_BEFORE 1 = (NEWLINE)"

/* Read through file looking for places to insert K records  */

do i = 1 by 1 until i = last

   Isredit "(nextl) = LINE" i


/* Process statement that starts with '='   */

  If substr(nextl,1,1) = '=' Then Do
    parse var nextl '='item'='rest

    NEWLINE = "K V='"vendor"' P='"product"' R='"release"' I="item
    Isredit "LINE_BEFORE" i "= (NEWLINE)"
    i = i+1
    Isredit "LINE" i "= ' ' "

    rest = translate(rest,' ','=')
    Do w = 1 to words(rest)

      NEWLINE = "K* "word(rest,w)
      Isredit "LINE_BEFORE" i "= (NEWLINE)"
      i = i+1
      End
    End

/* Process statement that starts with ')F'  */

  If substr(nextl,1,2) = ')F' Then Do

     Type = 'F'
     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

/* Process statement that starts with ')O'  */

  If substr(nextl,1,2) = ')O' Then Do

     Type = 'O'
     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

/* Process statement that starts with ')S'  */

  If substr(nextl,1,2) = ')S' Then Do

     Type = 'S'
     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

/* Process statement that starts with ')X'  */

  If substr(nextl,1,2) = ')X' Then Do

     Type = 'X'
     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

/* Process statement that starts with ')M'  */

  If substr(nextl,1,2) = ')M' Then Do

     Type = 'M'
     say 'found m'
     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

/* Process statement that starts with '))'  */

  If substr(nextl,1,2) = '))' Then Do
  say 'found )) type' type


    /* Generate K records for messages  */

     If Type = 'M' Then Do
       Parse var nextl '))'item rest
       NEWLINE = "K V='"vendor"' P='"product"' R='"release"' I="item
       Isredit "LINE_BEFORE" i "= (NEWLINE)"
       i = i+1
       End

     NEWLINE = OVERLAY('  ',nextl,1)
     Isredit "LINE" i "= (NEWLINE)"
     End

  Isredit "(last) = LINENUM .ZLAST"

End /* White */

Return
