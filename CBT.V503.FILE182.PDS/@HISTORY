         TITLE 'P D S  --  PDS HISTORY                       09/28/88'
***********************************************************************
***      HISTORY SUBCOMMAND                                         ***
***********************************************************************
*
         SPACE 1
HISTORY  CSECT
         USING *,R8
         LA    R1,L530             ASSUME A NON-PARTITIONED DATA SET
         TM    DSORG,DS1DSGPO      CORRECT?
         BZ    MSGNEW              YES, BRANCH
         SPACE 1
         OI    FLAGSGG,FOUTSUB     SUBCOMMAND GAINED CONTROL
         TM    FLAGSCC,RECFMU      LOAD MODULE LIBRARY?
         BO    HIST020             YES, BRANCH
         SPACE 1
* BRANCH TO ATTRIB FOR SOURCE - EXTENDED ISPF STATS  "HIST : LONG"
         OI    FLAGSGG,FOUTSOME    ASSUME OUTPUT GENERATED    DRK SEP09
         L     R8,=A(ATTRIB)       ADDRESSABILITY             DRK SEP09
         BR    R8                  BRANCH                     DRK SEP09
         SPACE 1
         MVC   INSERT#1(72),SPFSTAT2
         MVI   MTLEN,72
         TM    FLAGSHH,FHEAD       HEADER WRITTEN YET?
         BO    HIST000             YES, BRANCH
         M$MSG L230$1
         OI    FLAGSHH,FHEAD       NOW IT HAS BEEN WRITTEN
         OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED
         SPACE 1
HIST000  MVC   INSERT#1(72),BLANK128
         MVC   INSERT#1+1(8),DIRNAME
         TM    DIRFLAG,X'80'           ALIAS MEMBER?
         BNO   *+10                    NO, BRANCH
         MVC   INSERT#1+1+8(2),=C'-A'  YES, ADD A FLAG
         LA    R2,DIRUSER          LOAD START OF USER AREA (FOR SSI)
         TM    DIRFLAG,X'0F'       SPF STATISTICS PRESENT?
         BNO   HIST010             NO, BRANCH
         TM    DIRSPFCR,X'FE'      0C OF 0CYYDDDF ZEROS?      Y2K AUG97
         BNZ   HIST010             NO, BRANCH                 Y2K AUG97
         TM    DIRSPFCD,X'FE'      0C OF OTHER 0CYYDDDF ZERO? Y2K AUG97
         BNZ   HIST010             NO, BRANCH                 Y2K AUG97
         SPACE 1
         LA    R2,INSERT#1-7
         SR    R1,R1
         IC    R1,DIRSPFR          REVISION NUMBER FIRST
         CVD   R1,DOUBLE
         MVC   21(4,R2),=X'40212020'
         ED    21(4,R2),DOUBLE+6
         MVI   22(R2),C'.'
         IC    R1,DIRSPFV          VERSION NUMBER
         CVD   R1,DOUBLE
         MVC   18(4,R2),=X'40212020'
         ED    18(4,R2),DOUBLE+6
         LA    R1,DIRSPFCR+1           POINT TO YYDDDF
         LA    R15,FULLWORD+1
         BAS   R14,CONVDATE            CONVERT TO MMDDYY FORMAT
         MVC   FULLWORD(1),FULLWORD+3  CONVERT TO YYMMDD
         MVC   26(L'DATEMASK,R2),DATEMASK
         ED    26(L'DATEMASK,R2),FULLWORD
         OI    27(R2),X'F0'            UNSUPPRESS ZERO        Y2K AUG97
         LA    R1,DIRSPFCD+1           POINT TO YYDDDF
         LA    R15,FULLWORD+1
         BAS   R14,CONVDATE            CONVERT TO MMDDYY FORMAT
         MVC   FULLWORD(1),FULLWORD+3  CONVERT TO YYMMDD
         MVC   36(L'DATEMASK,R2),DATEMASK
         ED    36(L'DATEMASK,R2),FULLWORD
         OI    37(R2),X'F0'            UNSUPPRESS ZERO        Y2K AUG97
         MVC   45(6,R2),=X'4021207A2020'
         ED    45(6,R2),DIRSPFCT       TIME OF LAST CHANGE
         SR    R1,R1                                          DRK JAN98
         ICM   R1,B'0011',DIRSPFSI     CURRENT SIZE           DRK JAN98
         CVD   R1,DOUBLE
         MVC   51(6,R2),=X'402020202120'
         ED    51(6,R2),DOUBLE+5
         SPACE 1
         SR    R1,R1                                          DRK JAN98
         ICM   R1,B'0011',DIRSPFIN     INITIAL SIZE           DRK JAN98
         CVD   R1,DOUBLE
         MVC   57(6,R2),=X'402020202120'
         ED    57(6,R2),DOUBLE+5
         SR    R1,R1                                          DRK JAN98
         ICM   R1,B'0011',DIRSPFMD     MODIFIED LINES         DRK JAN98
         CVD   R1,DOUBLE
         MVC   63(6,R2),=X'402020202120'
         ED    63(6,R2),DOUBLE+5
         MVC   71(8,R2),DIRSPFID
         LA    R1,L230$1
         B     MSGNEW                  NO SSI FOR SPF-SAVED MEMBERS
         SPACE 1
HIST010  LA    R1,L230$1
         CLC   ZERO,0(R2)              ZERO?
         BE    MSGNEW                  YES, NO SSI
         CLC   =F'-1',0(R2)            FFFFFFFF?
         BE    MSGNEW                  YES, NO SSI
         SPACE 1
         MVC   INSERT#1+2+8+3(4),=C'SSI:'
         UNPK  INSERT#1+2+8+3+5(9),0(5,R2)
         TR    INSERT#1+2+8+3+5(8),TRTABLE
         MVI   INSERT#1+2+8+3+5+8,X'40'
         B     MSGNEW
         SPACE 3
HIST020  OC    #ZAPOPT(4),#ZAPOPT        ANY ZAP, USER, TRAN OR LKED?
         BNZ   HIST021                   YES, BRANCH
         OC    #ZAPOPT(4),=X'01010101'   NO, DEFAULT TO DO THEM ALL
         TM    FLAGSGG,FTRANCON          TRANSLATOR DATA OFF?
         BZ    HIST021                   NO, BRANCH
         MVI   #TRANOPT,X'02'            YES, NO TRANSLATOR DATA
         SPACE 1
HIST021  TM    DIRATTR+1,ATTRNE    RE-EDITABLE MODULE?         GP SEP18
         BO    HISTESD             NO, LET READESD HANDLE IT   GP SEP18
         TM    DS1SMSFG,DS1PDSE    PDSE DATASET?               GP SEP05
         BO    HIST024             YES, JUST DO IT             GP SEP05
HISTESD  DS    0H                                              GP SEP18
         L     R15,=A(READESD)     FORMAT THE ESD DATA
         BASR  R14,R15             ANY ESD DATA?
         B     *+8                 NO, BRANCH
         B     HIST023             YES, BRANCH   (WAS HIST024) GP SEP18
         SPACE 1
         TM    FLAGSHH,FDELAYM     DELAYED MESSAGE AVAILABLE?
         BNO   HIST022             NO, BRANCH
         TM    PMEMMIN,X'80'       MEMBER LIST?
         BO    *+12                YES, BRANCH
         TM    FLAGSAA,FMEM#MEM    MEMBER GROUP?
         BNO   HIST022             NO, BRANCH
         CLI   #MODLEN,0           ANY FILTERING?
         BH    NEWCMD              NO, BRANCH
         M$ERRST MSGBLANK
         M$ERRST DELAYMSG
         XI    FLAGSHH,FDELAYM     MESSAGE WAS WRITTEN
         SPACE 1
HIST022  LA    R1,MSGTEXT1         MESSAGE IDENTIFIER
         B     MSGNEW
         SPACE 2
*  FOR LOAD MODULES IN A PDS, SOME ESD ENTRIES PASSED ANY      GP SEP18
*  FILTERING THAT MAY HAVE BEEN APPLIED, SO SOME COMMAND       GP SEP18
*  RESPONSE IS REQUIRED, EVEN IF TO REPORT THAT THOSE SECTIONS GP SEP18
*  HAVE NO IDRS.  SO SET THE 'FOUTSOME' FLAG HERE, RATHER THAN GP SEP18
*  AFTER READIDR HAS BEEN CALLED AND EXITED VIA EITHER PATH.   GP SEP18
*  THIS WILL LET THE PDSE LOGIC PATH SET THE FLAG IF ANYTHING  GP SEP18
*  RELEVANT IS FOUND.                                          GP SEP18
HIST023  OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED   GP SEP18
HIST024  L     R15,=A(READIDR)     FORMAT THE IDR DATA
         BASR  R14,R15             IS IDR DATA AVAILABLE?
         B     NOHIST              NO, MESSAGE AND QUIT
         B     HISTTRN$            YES, CONTINUE
         SPACE 1
NOHIST   CLI   #MODLEN,0           IS FILTERING ACTIVE?        GP SEP18
         BNE   NEWCMD              YES, SKIP THIS MESSAGE      GP SEP18
         SR    R6,R6
         BAS   R4,HISTHDR
         LA    R1,L460             NO HISTORY AVAILABLE
         B     MSGNEW
         SPACE 3
HISTHDR  TM    FLAGSHH,FDELAYM     ANY DELAYED HEADER?
         BNO   HISTHDR2            NO, BRANCH
         XI    FLAGSHH,FDELAYM     MESSAGE WAS WRITTEN
         M$ERRST MSGBLANK
         M$ERRST DELAYMSG
HISTHDR2 TM    FLAGSCC,F1IDR       FIRST IDR RECORD?
         BZR   R4                  NO, RETURN
         NI    FLAGSCC,FF-F1IDR
         LTR   R1,R6               ANY SECOND HEADER?
         BZR   R4                  NO, RETURN
         M$MSG (R1)                INDIVIDUAL HISTORY TITLE
         BR    R4
         EJECT
*
*        FORMAT TRANSLATOR IDR DATA ENTRIES
*
HISTTRN$ LA    R3,#IDRPTR          SCAN IDR CHAIN
         USING IDRENTRY,R3
         OI    FLAGSCC,F1IDR
         CLI   #TRANOPT,X'02'      NO TRANSLATOR DATA?
         BE    HISTCOB$            YES, BRANCH
         SPACE 2
HISTTRN  ICM   R3,B'1111',IDRLINK  END OF IDR CHAIN?
         BZ    HISTCOB$            YES, BRANCH
         CLI   IDRTYPE,IDRTRAN     TRANSLATOR ENTRY?
         BNE   HISTTRN             NO, BRANCH
         SPACE 2
         LA    R2,#ESDPTR          START OF ESD CHAIN
         USING ESDENTRY,R2
HISTTRN1 ICM   R2,B'1111',ESDLINK  END OF ESD CHAIN?
         BZ    HISTTRN             YES, BRANCH
         CLI   ESDTYPE,CODEPC      $PRIVATE ENTRY?
         BE    HISTTRNP            YES, ALLOW THIS
         CLI   ESDTYPE,CODESD      CSECT ENTRY?
         BNE   HISTTRN1            NO, SKIP THIS
HISTTRNP CLC   ESDID,IDRESDID      REQUESTED IDR RECORD?
         BNE   HISTTRN1            NO, BRANCH
         SPACE 1
         LA    R6,L060
         BAS   R4,HISTHDR
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(8),ESDNAME
         MVC   MSGTEXT1+12(9),DATEMASK
         ED    MSGTEXT1+12(9),IDRDATE
         AIF   ('&ISODT'  NE 'YES').NOISOH1                   DRK NOV01
         SPACE 1
         MVC   DOUBLE(8),MSGTEXT1+12+1   MM/DD/YY             DRK NOV01
         ICM   R0,B'1100',DOUBLE+6       YY OF MM/DD/YY       DRK NOV01
         MVC   DOUBLE+6(2),DOUBLE+3      DD TO ../../DD       DRK NOV01
         MVC   DOUBLE+3(2),DOUBLE        MM TO ../MM/DD       DRK NOV01
         STCM  R0,B'1100',DOUBLE         YY TO YY/MM/DD       DRK NOV01
         OI    DOUBLE+3,X'F0'            LEADIN BLANK IN MM   DRK NOV01
         MVC   MSGTEXT1+12+1(8),DOUBLE   YY/MM/DD             DRK NOV01
         SPACE 1
.NOISOH1 ANOP                                                 DRK NOV01
         MVC   MSGTEXT1+24(10),IDRTDATA   TRANSLATOR 1
         UNPK  DOUBLE(5),IDRTDATA+10(3)   VVMM PACKED
         MVI   MSGTEXT1+36,C'V'
         MVC   MSGTEXT1+36+1(2),DOUBLE    VV
         MVI   MSGTEXT1+40,C'M'
         MVC   MSGTEXT1+40+1(2),DOUBLE+2  MM
         CLI   IDRLDATA,15                TWO TRANSLATORS?
         BL    HISTTRN3                   NO, BRANCH
         SPACE 1                          YES
         OI    IDRTDATA+27+2,X'0F'        FIX THE SIGN FIELD  DRK MAY99
         CLC   IDRTDATA+27+1(2),=X'000F'  XPEDITER TIMESTAMP? DRK JUN99
         BNE   HISTTRN2                   NO                  DRK MAY99
*        MVC   MSGTEXT1+48(9),TIMEMASK    YES, DISPLAY        DRK MAY99
*        ED    MSGTEXT1+48(9),IDRTDATA+25                     DRK MAY99
         B     HISTTRN3                                       DRK MAY99
TIMEMASK DC    X'4021207A20207A2020'      HH:MM:SS            DRK MAY99
         SPACE 1
HISTTRN2 DS    0H                                             DRK MAY99
         OI    IDRTDATA+27+2,X'0F'        FIX THE SIGN FIELD
         LA    R15,FULLWORD               OUTPUT LOCATION
         LA    R1,IDRTDATA+27             SECOND YYDDD
         BAS   R14,CONVDATE               CONVERT TO MMDDYY FORMAT
         MVC   MSGTEXT1+48(9),DATEMASK
         ED    MSGTEXT1+48(9),FULLWORD
         AIF   ('&ISODT'  NE 'YES').NOISOH2                   DRK NOV01
         SPACE 1
         MVC   DOUBLE(8),MSGTEXT1+48+1   MM/DD/YY             DRK NOV01
         ICM   R0,B'1100',DOUBLE+6       YY OF MM/DD/YY       DRK NOV01
         MVC   DOUBLE+6(2),DOUBLE+3      DD TO ../../DD       DRK NOV01
         MVC   DOUBLE+3(2),DOUBLE        MM TO ../MM/DD       DRK NOV01
         STCM  R0,B'1100',DOUBLE         YY TO YY/MM/DD       DRK NOV01
         OI    DOUBLE+3,X'F0'            LEADIN BLANK IN MM   DRK NOV01
         MVC   MSGTEXT1+48+1(8),DOUBLE   YY/MM/DD             DRK NOV01
         SPACE 1
.NOISOH2 ANOP                                                 DRK NOV01
         MVC   MSGTEXT1+60(10),IDRTDATA+15  TRANSLATOR 2
         UNPK  DOUBLE(5),IDRTDATA+25(3)     VVMM PACKED
         MVI   MSGTEXT1+72,C'V'
         MVC   MSGTEXT1+72+1(2),DOUBLE      VV
         MVI   MSGTEXT1+76,C'M'
         MVC   MSGTEXT1+76+1(2),DOUBLE+2    MM
         SPACE 1
HISTTRN3 M$ERRST MSGTEXT1
         B     HISTTRN1            NEXT IDR DATA RECORD THIS ESD ENTRY
         SPACE 3
*
*        FORMAT SPECIFIC ATTRIBUTES FOR COBOL CSECTS
*
HISTCOB$ LA    R3,#IDRPTR            SCAN IDR CHAIN
         USING IDRENTRY,R3
         LA    R2,#ESDPTR            START OF ESD CHAIN
         SPACE 2
HISTCOBA ICM   R3,B'1111',IDRLINK    END OF IDR CHAIN?
         BZ    HISTCOBB              YES, BRANCH
         CLI   IDRTYPE,IDRTRAN       TRANSLATOR ENTRY?
         BNE   HISTCOBA              NO, BRANCH
         CLC   IDRTDATA(6),HISTCTR1  COBOL TRANSLATOR ID?
         BE    HISTCOBC              YES, BRANCH
         CLC   IDRTDATA(6),HISTCTR2  COBOL TRANSLATOR ID?
         BE    HISTCOBC              YES, BRANCH
         CLC   IDRTDATA(6),HISTCTR3  COBOL TRANSLATOR ID?     DRK MAY99
         BE    HISTCOBC              YES, BRANCH              DRK MAY99
         CLC   IDRTDATA(6),HISTCTR4  COBOL TRANSLATOR ID?     DRK JUN04
         BE    HISTCOBC              YES, BRANCH              DRK SEP11
         CLC   IDRTDATA(6),HISTCTR5  COBOL TRANSLATOR ID?     DRK SEP11
         BE    HISTCOBC              YES, BRANCH              DRK SEP11
         CLC   IDRTDATA(6),HISTCTR6  COBOL TRANSLATOR ID?     DRK JUN13
         BE    HISTCOBC              YES, BRANCH              DRK JUN13
         CLC   IDRTDATA(6),HISTCTR7  COBOL TRANSLATOR ID?     DRK MAY16
         BE    HISTCOBC              YES, BRANCH              DRK MAY16
         B     HISTCOBA              NO, BRANCH               DRK SEP11
         SPACE 2
         USING ESDENTRY,R2
HISTCOBB ICM   R2,B'1111',ESDLINK    END OF ESD CHAIN?
         BZ    HISTZAP$              YES, BRANCH
         CLI   ESDTYPE,CODESD        CSECT ENTRY?
         BNE   HISTCOBB              NO, SKIP THIS
         CLC   ESDNAME(3),HISTLILB   COBOL ESD ENTRY NAME?
         BNE   HISTCOBB              NO, BRANCH
         SPACE 2
HISTCOBC LA    R3,#IDRPTR          SCAN IDR CHAIN
         USING IDRENTRY,R3
         OI    FLAGSCC,F1IDR
         TM    DIRATTR,ATTREXEC    EXECUTABLE?
         BNO   HISTZAP$            NO, IGNORE COBOL ATTRIBUTES
         OI    ##ADRPA#,$Q         QUIET MODE LOAD IS REQUIRED
         L     R2,RECOVER          PREVIOUS RECOVERY ADDRESS
         LA    R1,HISTCABE         RESUME ADDRESS
         ST    R1,RECOVER          IN-LINE RECOVERY
         STM   R2,R8,MSGTEXT2      SAVE REGISTERS
         MVI   RECOVER,C'L'        LOAD RECOVERY FLAG
         LOAD  EPLOC=DIRNAME,DCB=INDCB
         LR    R4,R0               ENTRY POINT ADDRESS OF MODULE
         SR    R1,R1               CLEAR THE TOP BYTE
         ICM   R1,B'0111',DIREPA   ENTRY POINT OFFSET OF MODULE
         SR    R4,R1               START OF MODULE
         ST    R2,RECOVER          RESET RECOVERY ADDRESS
         MVI   RECOVER,0           LOAD WORKED
         NI    ##ADRPA#,FF-$Q      END OF QUIET MODE LOAD
         XC    MSGTEXT2(4),MSGTEXT2
         B     HISTCOB
         SPACE 1
HISTCABE LM    R2,R8,MSGTEXT2      RESTORE REGISTERS
         ST    R2,RECOVER          RESTORE RECOVERY ADDRESS
         NI    ##ADRPA#,FF-$Q      END OF QUIET MODE LOAD
         B     HISTZAP$            LOAD DID NOT WORK
         SPACE 2
HISTCOB  ICM   R3,B'1111',IDRLINK  END OF IDR CHAIN?
         BZ    HISTCOBZ            YES, BRANCH
         CLI   IDRTYPE,IDRTRAN     TRANSLATOR ENTRY?
         BNE   HISTCOB             NO, BRANCH
         SPACE 2
         LA    R2,#ESDPTR          START OF ESD CHAIN
         USING ESDENTRY,R2
HISTCOB1 ICM   R2,B'1111',ESDLINK  END OF ESD CHAIN?
         BZ    HISTCOBZ            YES, DONE
         CLI   ESDTYPE,CODESD      CSECT ENTRY?
         BNE   HISTCOB1            NO, SKIP THIS
         SPACE 1
         SR    R5,R5
         ICM   R5,B'0111',ESDADDR         OFFSET TO THIS CSECT
         SR    R15,R15
         ICM   R15,B'0111',ESDLEN         LENGTH OF CSECT
         CH    R15,=H'450'                POSSIBLY COBOL?
         BL    HISTCOB1                   NO, BRANCH
         AR    R5,R4                      ADDRESS OF CSECT START
         LR    R0,R5
         SRL   R0,24                      SHIFT OFF LOWER BYTES
         LTR   R0,R0                      31-BIT ADDRESS?
         BZ    HISTCOB9                   NO, BRANCH
         LA    R14,HISTCOB3               31-BIT ADDRESSING
         O     R14,HISTMASK               HIGH-ORDER X'80'
         DC    X'0B0E'                    SWITCH ADDRESSING MODE
*        BSM   0,R14                      SWITCH ADDRESSING MODE
HISTCOB3 MVC   MSGTEXT2(140),0(R5)        MOVE TO 24 BIT STOR DRK AUG07
         AIF   ('&MVSLEV' LT 'MVS510').NOECOB1                 GP OCT18
         CLI   MSGTEXT2+4,1               ENTERPRISE COBOL?    GP OCT18
         BNE   HISTCOBN                   NO                   GP OCT18
         CLC   MSGTEXT2+5(3),HISTCCEE+1   ENTERPRISE COBOL?    GP OCT18
         BNE   HISTCOBN                   NO                   GP OCT18
         MVI   MSGTEXT2+4,0               YES, "COBOL FOR MVS" GP OCT18
         L     R14,12(,R5)                GET PPA1 OFFSET      GP OCT18
         ALR   R14,R5                     POINT TO PPA1        GP OCT18
         L     R14,4(,R14)                GET PPA2 OFFSET      GP OCT18
         ALR   R14,R5                     POINT TO PPA2        GP OCT18
         IC    R1,20(,R14)                LOAD PPA2 FLAGS      GP OCT18
         A     R14,12(,R14)               POINT TO TIMESTAMP   GP OCT18
         CLI   0(R14),C'2'                1ST DIGIT OF YEAR?   GP OCT18
         BNE   HISTCOBN                   NO, THAT'S ODD       GP OCT18
         MVC   MSGTEXT2+104(20),0(R14)    COPY TIMESTAMP+VRM   GP OCT18
         TMLL  R1,X'20'                   SERVICE PRESENT?     GP OCT18
         BZ    HSTSRVOK                   NO                   GP OCT18
         AH    R14,20(,R14)               YES, ADD ITS LENGTH  GP OCT18
         LA    R14,2+1(,R14)              AND INDICATOR'S + 1  GP OCT18
         NILL  R14,X'FFFE'                ALIGN TO HALFWORD    GP OCT18
HSTSRVOK MVC   MSGTEXT2+45(4),20+2+9(R14) COPY FLAG BYTES      GP OCT18
HISTCOBN EQU   *                                               GP OCT18
.NOECOB1 ANOP  ,                                               GP OCT18
         LA    R14,HISTCOB4               24-BIT ADDRESSING
         DC    X'0B0E'                    SWITCH ADDRESSING MODE
*        BSM   0,R14                      SWITCH ADDRESSING MODE
HISTCOB4 LA    R5,MSGTEXT2                POINT INTO STORAGE  DRK AUG07
HISTCOB9 LR    R1,R5
         LA    R1,0(,R1)
         AR    R15,R5                     ADDRESS OF CSECT END
         CLC   0(2,R5),=X'0700'           PADDED NOP ENTRY POINT?
         BNE   HISTCEP                    NO, BRANCH
         CLC   14(8,R5),BLANK128          PADDED ENTRY POINT?
         BNE   HISTCGOT                   NO, BRANCH
         L     R5,22(,R5)                 GET THE REAL POINTER
         B     HISTCGOT
HISTCEP  CLC   12(8,R5),BLANK128          ENTRY POINT CODING?
         BNE   HISTCGOT                   NO, BRANCH
         L     R5,20(,R5)                 GET THE REAL POINTER
HISTCGOT LA    R5,0(,R5)
         CR    R5,R1                      IN THIS CSECT?
         BL    HISTCOB1                   NO, BRANCH
         CR    R5,R15                     IN THIS CSECT?
         BH    HISTCOB1                   NO, BRANCH
         SPACE 1
HISTCGT2 MVC   INSERT#1(70),HIST2HDR      INITIALIZE THE HEADER LINE
         LA    R1,HISTCV2                 ASSUME C2 COMPILER
         CLC   13(4,R5),HISTCV2L          CORRECT?
         BE    HISTCMSG                   YES, BRANCH
         SPACE 1
         LA    R1,HISTCMV                 ASSUME COBOL MVS    DRK MAY99
         CLC   4(4,R5),HISTCCEE           CORRECT?            DRK MAY99
         BNE   HISTCGT3                   NO                  DRK DEC02
         MVC   INSERT#1+29(5),=C'TIME '   MODIFY HEADER LINE  DRK MAY99
         MVC   INSERT#1+39(5),=C'NUMPR'   MODIFY HEADER LINE  DRK AUG07
         MVC   COBDATE(6),106(R5)         SAVE COBOL MVS DATE DRK DEC02
         MVC   COBTIME(4),112(R5)         SAVE COBOL MVS TIME DRK MAY99
         MVC   COBVERS(1),119(R5)         SAVE COBOL VERSION  DRK NOV18
         MVC   COBVERS+1(1),121(R5)       SAVE COBOL RELEASE  DRK NOV18
         MVC   WORKTMP(20),104(R5)        MOVE TIMESTAMP      DRK MAY99
         NC    WORKTMP(20),=20X'F0'       TURN OFF DIGITS     DRK MAY99
         CLC   WORKTMP(20),=20X'F0'       @TIMEVRS AREA?      DRK MAY99
         BE    HISTCMSG                   YES, COBOL MVS      DRK MAY99
         SPACE 1
HISTCGT3 DS    0H
         MVC   INSERT#1(70),HISTCHDR      INITIALIZE THE HEADER LINE
         LA    R1,HISTCVS                 ASSUME VS COMPILER
         CLC   20(4,R5),HISTCVSR          CORRECT?
         BE    HISTCMSG                   YES, BRANCH
         LA    R1,HISTCV4                 ASSUME V4 COMPILER
         CLC   20(4,R5),HISTCANS          CORRECT?
         BNE   HISTCOB1                   NO, BRANCH
         SPACE 1
HISTCMSG MVI   MTLEN,70                   70 CHARACTER MESSAGE
         TM    FLAGSCC,F1IDR              A COBOL HEADER WRITTEN?
         BNO   HISTCCOM                   NO, BRANCH
         XI    FLAGSCC,F1IDR              HEADER HAS BEEN WRITTEN
         TM    FLAGSHH,FDELAYM            ANY DELAYED HEADER?
         BNO   HISTCMS2                   NO, BRANCH
         XI    FLAGSHH,FDELAYM            MESSAGE WAS WRITTEN
         M$ERRST MSGBLANK
         M$ERRST DELAYMSG
HISTCMS2 CLC   INSERT#1(20),HIST2HDR      COBOL V2?           DRK MAY99
         BE    HISTC210                   YES, BRANCH
         M$MSG L250$1
         MVC   INSERT#1(70),HISTCUND      INITIALIZE THE HEADER LINE
         M$MSG L250$1
         B     HISTCGT2                   FIND THE COMPILER TYPE AGAIN
         SPACE 1
HISTCCOM CLC   INSERT#1(20),HIST2HDR      COBOL V2?           DRK MAY99
         BE    HISTC220                   YES, BRANCH
         MVC   INSERT#1+00(8),ESDNAME     SET THE CSECT NAME
         MVC   INSERT#1+09(3),0(R1)       SET THE COMPILER NAME
         AIF   ('&MVSLEV' LT 'MVS220').MVS22H                 DRK SEP04
         LA    R14,HISTA31A                                   DRK SEP04
         O     R14,HISTMASK               HIGH-ORDER X'80'    DRK SEP04
         BSM   0,R14                      31-BIT MODE         DRK SEP04
HISTA31A DS    0H                                             DRK SEP04
.MVS22H  ANOP                                                 DRK SEP04
         L     R6,60(,R5)                 TGT POINTER
         CLC   X'1BC'(8,R6),HISTCOUT      SYSOUT?
         BE    HISTCBIT                   YES, BRANCH
         AIF   ('&MVSLEV' LT 'MVS220').MVS22I                 DRK SEP04
         LA    R14,HISTA24A                                   DRK SEP04
         BSM   0,R14                      24-BIT MODE         DRK SEP04
HISTA24A DS    0H                                             DRK SEP04
.MVS22I  ANOP                                                 DRK SEP04
         M$MSG L500
         B     HISTCOB1
         SPACE 1
HISTCBIT CLI   INSERT#1+9+1,C'4'          V4 COMPILER?
         BE    HISTCBI6                   YES, BRANCH
         MVI   INSERT#1+9+2,C'2'          ASSUME LANGUAGE LEVEL 2
         TM    X'1C5'(R6),X'80'           CORRECT?
         BO    *+8                        YES, BRANCH
         MVI   INSERT#1+9+2,C'1'          MUST BE LANGUAGE LEVEL 1
         SPACE 1
HISTCBI6 TM    X'48'(R6),X'08'            SYMDUMP?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+52(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    X'48'(R6),X'04'            FLOW?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+19(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    X'48'(R6),X'02'            STATE?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+24(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    X'49'(R6),X'10'            TEST?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+30(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    X'4A'(R6),X'80'            RESIDENT?
         BZ    HISTCRS2                   YES, BRANCH (INVERSE TEST)
         MVC   INSERT#1+41(03),BLANK128   NO, CLEAR THE DOC
         OI    #TRANOPT,X'80'             MARK NORES FOR LATER
         B     HISTCEN0
HISTCRS2 OI    #TRANOPT,X'40'             MARK RES FOR LATER
         SPACE 1
HISTCEN0 TM    X'4A'(R6),X'40'            ENDJOB?
         BO    HISTCEN2                   YES, BRANCH
         MVC   INSERT#1+45(06),BLANK128   NO, CLEAR THE DOC
         B     HISTCOBJ
HISTCEN2 OI    #TRANOPT,X'20'             MARK ENDJOB FOR LATER
         SPACE 1
HISTCOBJ MVC   INSERT#1+57(03),BLANK128   CLEAR "OBJ"
         TM    X'4A'(R6),X'20'            OBJ370?
         BNO   *+10                       NO, BRANCH
         MVC   INSERT#1+57(03),HISTC370   YES, ADD "370"
         SPACE 1
         MVC   INSERT#1+61(10),BLANK128   CLEAR "OPTIMIZE "
         TM    X'48'(R6),X'01'            COBOL OPTIMIZED?
         BNO   HISTCCPX                   NO, BRANCH
         MVC   INSERT#1+61(05),HISTCOPT   YES, ADD "COBOL"
         B     HISTCTWO
         SPACE 1
HISTCCPX CLC   X'48'(6,R5),HISTCAOP       CA-OPTIMIZER?       DRK DEC02
         BNE   *+4+6+4                    NO, BRANCH          DRK DEC02
         MVC   INSERT#1+61(06),HISTCAOP   YES, ADD "CA-OPT"   DRK DEC02
         B     HISTCPGT                                       DRK JUL04
         CLC   X'48'(5,R5),HISTCCAP       CAPEX?
         BNE   HISTCTWO                   NO, BRANCH
         MVC   INSERT#1+61(05),HISTCCAP   YES, ADD "CAPEX"
HISTCPGT L     R5,X'38'(,R5)              PGT POINTER
         SH    R5,=H'8'
         ICM   R5,B'1111',0(R5)           DTECT POSSIBLE?
         BZ    HISTCTWO                   NO, BRANCH
         AR    R5,R6                      POINT TO OPTION BYTE
         TM    0(R5),X'60'                XCOUNT OR PFLOW?
         BZ    HISTCTWO                   YES, BRANCH
         CLI   INSERT#1+63,C'-'           CA-OPT?             DRK JUL04
         BNE   *+4+6+4                    NO                  DRK JUL04
         MVC   INSERT#1+61(09),HISTCO$D   YES, ADD "OPT/DTECT"DRK JUL04
         B     HISTCTWO                                       DRK JUL04
         MVC   INSERT#1+61(09),HISTCC$D   NO, ADD "CAP/DTECT"
         SPACE 1
HISTCTWO CLC   INSERT#1(2),HISTCVS        VS COMPILER?
         BE    HISTCFIN                   NO, BRANCH
         TM    X'4A'(R6),X'08'            COUNT?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+13(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    X'4A'(R6),X'10'            TRACE?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+35(05),BLANK128   NO, CLEAR THE DOC
HISTCFIN DS    0H                                             DRK SEP04
         AIF   ('&MVSLEV' LT 'MVS220').MVS22J                 DRK SEP04
         LA    R14,HISTA24B                                   DRK SEP04
         BSM   0,R14                      24-BIT MODE         DRK SEP04
HISTA24B DS    0H                                             DRK SEP04
.MVS22J  ANOP                                                 DRK SEP04
         M$MSG L250$1
         B     HISTCOB1
         SPACE 3
HISTC210 M$MSG L260$1
         MVC   INSERT#1(70),HIST2UND      INITIALIZE THE HEADER LINE
         M$MSG L260$1
         B     HISTCGT2                   FIND THE COMPILER TYPE AGAIN
         SPACE 1
HISTC220 DS    0H                         COBOL V2
         CLC   0(3,R1),=C'CEE'            COBOL FOR MVS?      DRK MAY99
         BE    HISTMV20                   YES                 DRK MAY99
         MVC   INSERT#1+00(8),ESDNAME     SET THE CSECT NAME
         MVC   INSERT#1+09(3),0(R1)       SET THE COMPILER NAME
         TM    47(R5),X'80'               TEST?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+13(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    46(R5),X'02'               SSRANGE?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+18(06),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    45(R5),X'02'               OPT?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+25(03),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    44(R5),X'01'               FDUMP?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+29(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    47(R5),X'04'               ZWB?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+35(03),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    46(R5),X'80'               PFDSN?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+39(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    47(R5),X'40'               TRUNC?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+45(06),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         LA    R1,1                       ASSUME RES
         TM    46(R5),X'20'               RES?
         BO    *+10+4                     YES, BRANCH
         MVC   INSERT#1+51(03),BLANK128   NO, CLEAR THE DOC
         LA    R1,2                       NORES
         O     R1,MSGTEXT2                FLAG FOR LATER
         ST    R1,MSGTEXT2                SAVE FOR LATER
         SPACE 1
         TM    46(R5),X'40'               RENT?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+55(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    44(R5),X'04'               DYNAM?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+60(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         MVC   INSERT#1+66(4),HISTC31     DATA 31 ADDRESSING
         TM    44(R5),X'20'               DATA 31?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+66(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         M$MSG L260$1
         B     HISTCOB1
         SPACE 1
HISTMV20 DS    0H                         COBOL FOR MVS       DRK MAY99
         MVC   INSERT#1+00(8),ESDNAME     SET THE CSECT NAME
         MVC   INSERT#1+09(3),0(R1)       SET THE COMPILER NAME
         SPACE 1                                              DRK NOV18
         MVI   INSERT#1+09,C'E'           SET THE COMPILER NAME       "
         MVC   INSERT#1+10(2),COBVERS     SET THE COMPILER VER/REL    "
         TM    47+88(R5),X'80'            TEST?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+13(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    46+88(R5),X'02'            SSRANGE?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+18(06),COBDATE    NO, (COMPILE DATE)  DRK DEC02
*        MVC   INSERT#1+18(06),BLANK128   NO, CLEAR THE DOC   DRK DEC02
         SPACE 1
         TM    45+88(R5),X'02'            OPT?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+25(03),BLANK128   NO, CLEAR THE DOC
         SPACE 1
*        TM    44+88(R5),X'01'            FDUMP?              DRK MAY99
*        BO    *+10                       YES, BRANCH         DRK MAY99
*        MVC   INSERT#1+29(05),BLANK128   NO, CLEAR THE DOC   DRK MAY99
         MVC   INSERT#1+29(02),COBTIME    HH (COMPILE TIME)   DRK MAY99
         MVI   INSERT#1+31,C':'           :                   DRK MAY99
         MVC   INSERT#1+32(02),COBTIME+2  MM (COMPILE TIME)   DRK MAY99
         SPACE 1
         TM    47+88(R5),X'04'            ZWB?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+35(03),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         MVC   INSERT#1+39(05),HISTNPFD   ASSUME PFD          DRK AUG07
         TM    46+88(R5),X'80'            NUMPROC(PFD)?       DRK AUG07
         BO    HISTMV21                   YES, BRANCH         DRK AUG07
         SPACE 1                                              DRK AUG07
         MVC   INSERT#1+39(05),HISTNMIG   ASSUME MIG          DRK AUG07
         TM    48+88(R5),X'80'            NUMPROC(MIG)?       DRK AUG07
         BO    HISTMV21                   YES, BRANCH         DRK AUG07
         MVC   INSERT#1+39(05),HISTNNPF   NO, THEN NOPFD      DRK AUG07
         SPACE 1                                              DRK AUG07
HISTMV21 DS    0H                                             DRK AUG07
         MVC   INSERT#1+45(05),HISTTSTD   ASSUME STD          DRK AUG07
         TM    47+88(R5),X'40'            TRUNC(STD)?         DRK AUG07
         BO    HISTMV22                   YES, BRANCH         DRK AUG07
         SPACE 1                                              DRK AUG07
         MVC   INSERT#1+45(05),HISTTBIN   ASSUME BIN          DRK AUG07
         TM    48+88(R5),X'08'            TRUNC(BIN)?         DRK AUG07
         BO    HISTMV22                   YES, BRANCH         DRK AUG07
         MVC   INSERT#1+45(05),HISTTOPT   NO, THEN (OPT)      DRK AUG07
         SPACE 1                                              DRK AUG07
HISTMV22 DS    0H                                             DRK AUG07
         SPACE 1
*        LA    R1,1                       ASSUME RES          DRK MAY99
*        TM    46+88(R5),X'20'            RES?                DRK MAY99
*        BO    *+10+4                     YES, BRANCH         DRK MAY99
*        MVC   INSERT#1+51(03),BLANK128   NO, CLEAR THE DOC   DRK AUG07
*        LA    R1,2                       NORES               DRK MAY99
*        O     R1,MSGTEXT2                FLAG FOR LATER      DRK MAY99
*        ST    R1,MSGTEXT2                SAVE FOR LATER      DRK MAY99
         SPACE 1
         TM    46+88(R5),X'40'            RENT?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+55(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         TM    44+88(R5),X'04'            DYNAM?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+60(05),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         MVC   INSERT#1+66(4),HISTC31     DATA 31 ADDRESSING
         TM    44+88(R5),X'20'            DATA 31?
         BO    *+10                       YES, BRANCH
         MVC   INSERT#1+66(04),BLANK128   NO, CLEAR THE DOC
         SPACE 1
         M$MSG L260$1
         B     HISTCOB1
         SPACE 1
HISTCOBZ DELETE EPLOC=DIRNAME
         TM    MSGTEXT2+3,2+1             MIXED RES AND NORES?
         BNO   HISTZAP$                   NO, BRANCH
         M$MSG L503                       YES, ERROR MESSAGE
         B     HISTZAP$
         SPACE 2
HISTC31  DC    C'31  '
HISTNPFD DC    C'(PFD)'                                       DRK AUG07
HISTNMIG DC    C'(MIG)'                                       DRK AUG07
HISTNNPF DC    C'NOPFD'                                       DRK AUG07
HISTTSTD DC    C'(STD)'                                       DRK AUG07
HISTTBIN DC    C'(BIN)'                                       DRK AUG07
HISTTOPT DC    C'(OPT)'                                       DRK AUG07
HISTCTR1 DC    C'5740CB'   COBOL VS, COBOL V4                 DRK MAY99
HISTCTR2 DC    C'566895'   COBOL II, COBOL/370, COBOL FOR MVS DRK MAY99
HISTCTR3 DC    C'5648A2'   COBOL FOR OS/390                   DRK MAY99
HISTCTR4 DC    C'5655G5'   ENTERPRISE COBOL FOR Z/OS V3       DRK JUN04
HISTCTR5 DC    C'5655S7'   ENTERPRISE COBOL FOR Z/OS V4       DRK SEP11
HISTCTR6 DC    C'5655W3'   ENTERPRISE COBOL FOR Z/OS V5       DRK JUN13
HISTCTR7 DC    C'5655EC'   ENTERPRISE COBOL FOR Z/OS V6       DRK MAY16
HISTLILB DC    C'ILB'      COBOL SUBROUTINE NAME
HISTCHDR DC    C'CSECT    VER COUNT FLOW STATE TEST TRACE '
         DC    C'RES ENDJOB SYMD OBJ OPTIMIZE  '
HISTCUND DC    C'-----    --- ----- ---- ----- ---- ----- '
         DC    C'--- ------ ---- --- --------  '
HIST2HDR DC    C'CSECT    VER TEST SSRANG OPT FDUMP ZWB '
         DC    C'PFDSN TRUNC RES RENT DYNAM DATA  '
HIST2UND DC    C'-----    --- ---- ------ --- ----- --- '
         DC    C'----- ----- --- ---- ----- ----  '
HISTCVS  DC    C'VS '
HISTCV4  DC    C'V4 '
HISTCV2  DC    C'C2 '
HISTCMV  DC    C'CEE'                                         DRK MAY99
         DS    0F
HISTMASK DC    XL4'80000000'
HISTCANS DC    C'ANS4'
HISTCVSR DC    C'VSR1'
HISTCV2L DC    C' C2 '
HISTCCEE DC    X'00',C'CEE'                                   DRK MAY99
HISTCOUT DC    CL8'SYSOUT'
HISTC370 DC    C'370'
HISTCOPT DC    C'COBOL'
HISTCAOP DC    C'CA-OPT'                                      DRK DEC02
HISTCCAP DC    C'CAPEX'
HISTCC$D DC    C'CAP/DTECT'
HISTCO$D DC    C'OPT/DTECT'                                   DRK JUL04
DIRNOED  EQU   B'00001000'           NOT EDITABLE             DRK JAN08
*PFSTAT2 DC    CL72'SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE
SPFSTAT2 DC    CL72'MEMBER      VER.MOD  CREATED   LAST MODIFIED  SIZE X
                INIT   MOD   ID'
         EJECT
*
*        FORMAT AMASPZAP IDR DATA ENTRIES
*
HISTZAP$ LA    R3,#IDRPTR          SCAN IDR CHAIN
         USING IDRENTRY,R3
         OI    FLAGSCC,F1IDR
         MVI   MTLEN,8
         TM    #TRANOPT,X'80'+X'40'+X'20'  ENDJOB WITH RES AND NORES?
         BNO   HISTZAP                     NO, BRANCH
         M$MSG L502
         SPACE 1
HISTZAP  ICM   R3,B'1111',IDRLINK  END OF ESD CHAIN?
         BZ    HISTUSR$            YES, BRANCH
         CLI   IDRTYPE,IDRZAP      AMASPZAP ENTRY?
         BNE   HISTZAP             NO, BRANCH
         SPACE 1
         LA    R2,#ESDPTR          START OF ESD CHAIN
         USING ESDENTRY,R2
         SPACE 1
HISTZAP1 ICM   R2,B'1111',ESDLINK  END OF ESD CHAIN?
         BZ    HISTZAP3            YES, BRANCH
         SPACE 1
         CLI   ESDTYPE,CODEPC      $PRIVATE ENTRY?
         BE    HISTZAPP            YES, BRANCH
         CLI   ESDTYPE,CODESD      CSECT ENTRY?
         BNE   HISTZAP1            NO, SKIP THIS
HISTZAPP CLC   ESDID,IDRESDID      REQUESTED IDR RECORD?
         BNE   HISTZAP1            NO, BRANCH
         SPACE 1
HISTZAP2 LA    R6,L061
         BAS   R4,HISTHDR
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'ESDNAME),ESDNAME
         MVC   MSGTEXT1+8+L'ESDNAME(L'DATEMASK),DATEMASK
         ED    MSGTEXT1+8+L'ESDNAME(L'DATEMASK),IDRDATE
         AIF   ('&ISODT'  NE 'YES').NOISOH3                   DRK NOV01
         SPACE 1
         MVC   DOUBLE(8),MSGTEXT1+16+1   MM/DD/YY             DRK NOV01
         ICM   R0,B'1100',DOUBLE+6       YY OF MM/DD/YY       DRK NOV01
         MVC   DOUBLE+6(2),DOUBLE+3      DD TO ../../DD       DRK NOV01
         MVC   DOUBLE+3(2),DOUBLE        MM TO ../MM/DD       DRK NOV01
         STCM  R0,B'1100',DOUBLE         YY TO YY/MM/DD       DRK NOV01
         OI    DOUBLE+3,X'F0'            LEADIN BLANK IN MM   DRK NOV01
         MVC   MSGTEXT1+16+1(8),DOUBLE   YY/MM/DD             DRK NOV01
         SPACE 1
.NOISOH3 ANOP                                                 DRK NOV01
         MVC   MSGTEXT1+12+L'ESDNAME+L'DATEMASK(L'IDRZDATA),IDRZDATA
         M$ERRST MSGTEXT1
         B     HISTZAP             NEXT IDR DATA RECORD THIS ESD ENTRY
         SPACE 1
HISTZAP3 CLI   #MODLEN,0           ANY MODULE NAME SELECTION?
         BH    HISTZAP             YES, CANNOT DETERMINE MISSING ESD'S
         LA    R2,HISTZAP4-4       MESSAGE IF CSECT NAME UNKNOWN
         B     HISTZAP2            NEXT IDR DATA RECORD THIS ESD ENTRY
HISTZAP4 DC    C'?UNKNOWN'         UNKNOWN CSECT NAME
         EJECT
*
*        FORMAT THE USER-SUPPLIED IDR DATA RECORDS
*
         SPACE 1
HISTUSR$ LA    R3,#IDRPTR
         OI    FLAGSCC,F1IDR
         SPACE 1
HISTUSR  ICM   R3,B'1111',IDRLINK  END OF IDR CHAIN?
         BZ    HISTLKD$            YES, BRANCH
         CLI   IDRTYPE,IDRUSER     USER IDR DATA RECORD?
         BNE   HISTUSR             NO, BRANCH
         SPACE 1
         LA    R2,#ESDPTR          ADDRESS OF ESD CHAIN
         SPACE 1
HISTUSR1 ICM   R2,B'1111',ESDLINK  END OF ESD CHAIN?
         BZ    HISTUSR             YES, BRANCH
         SPACE 1
         CLI   ESDTYPE,CODEPC      $PRIVATE ENTRY?
         BE    HISTUSRP            YES, BRANCH
         CLI   ESDTYPE,CODESD      CSECT ENTRY?
         BNE   HISTUSR1            NO, BRANCH
HISTUSRP CLC   ESDID,IDRESDID      WANTED ESD RECORD?
         BNE   HISTUSR1            NO, BRANCH
         SPACE 1
         LA    R6,L062
         BAS   R4,HISTHDR
         MVC   MSGTEXT1(136),MSGBL132
         MVC   MSGTEXT1+4(L'ESDNAME),ESDNAME
         MVC   MSGTEXT1+8+L'ESDNAME(L'DATEMASK),DATEMASK
         ED    MSGTEXT1+8+L'ESDNAME(L'DATEMASK),IDRDATE
         AIF   ('&ISODT'  NE 'YES').NOISOH4                   DRK NOV01
         SPACE 1
         MVC   DOUBLE(8),MSGTEXT1+16+1   MM/DD/YY             DRK NOV01
         ICM   R0,B'1100',DOUBLE+6       YY OF MM/DD/YY       DRK NOV01
         MVC   DOUBLE+6(2),DOUBLE+3      DD TO ../../DD       DRK NOV01
         MVC   DOUBLE+3(2),DOUBLE        MM TO ../MM/DD       DRK NOV01
         STCM  R0,B'1100',DOUBLE         YY TO YY/MM/DD       DRK NOV01
         OI    DOUBLE+3,X'F0'            LEADIN BLANK IN MM   DRK NOV01
         MVC   MSGTEXT1+16+1(8),DOUBLE   YY/MM/DD             DRK NOV01
         SPACE 1
.NOISOH4 ANOP                                                 DRK NOV01
         SR    R1,R1
         ICM   R1,B'0001',IDRLDATA ZERO BYTES?
         BZ    HISTUSRS            YES, SKIP THE MOVE (LENGTH ZERO)
         SPACE 1
         MVC   MSGTEXT1+12+L'ESDNAME+L'DATEMASK(*-*),IDRDATA  <<EXEC>>
         EX    R1,*-6
         SPACE 1
HISTUSRS M$ERRST MSGTEXT1
         B     HISTUSR1
         DROP  R2,R3
         EJECT
*
*        FORMAT THE LINKAGE-EDITOR IDR DATA RECORD
*
HISTLKD$ CLI   #LKEDOPT,X'01'           "LKED" REQUESTED?
         BNE   NEWCMD                   NO, BRANCH
         SR    R1,R1
         ICM   R1,B'0001',#LKEDLEN      ANY LKED NAME CHECK?
         BZ    HISTLKDG                 NO, BRANCH
         BCTR  R1,0                     MACHINE LENGTH
         CLC   #LKEDTXT(*-*),LKEDNAME   <<EXECUTED>>
         EX    R1,*-6                   THIS LINKAGE EDITOR?
         BNE   NEWCMD                   NO, BRANCH
HISTLKDG SR    R6,R6
         BAS   R4,HISTHDR
         MVC   INSERT#1-1(9),DATEMASK
         ED    INSERT#1-1(9),LKEDDATE
         AIF   ('&ISODT'  NE 'YES').NOISOH5                   DRK NOV01
         SPACE 1
         MVC   DOUBLE(8),INSERT#1-1+1    MM/DD/YY             DRK NOV01
         ICM   R0,B'1100',DOUBLE+6       YY OF MM/DD/YY       DRK NOV01
         MVC   DOUBLE+6(2),DOUBLE+3      DD TO ../../DD       DRK NOV01
         MVC   DOUBLE+3(2),DOUBLE        MM TO ../MM/DD       DRK NOV01
         STCM  R0,B'1100',DOUBLE         YY TO YY/MM/DD       DRK NOV01
         OI    DOUBLE+3,X'F0'            LEADIN BLANK IN MM   DRK NOV01
         MVC   INSERT#1-1+1(8),DOUBLE    YY/MM/DD             DRK NOV01
         SPACE 1
.NOISOH5 ANOP                                                 DRK NOV01
         MVI   MTLEN+4,18+14            LENGTH OF THIS INSERT
         MVC   INSERT#2(10),LKEDNAME
         MVC   INSERT#2+10(2),=CL2' V'
         UNPK  INSERT#2+10+2(3),LKEDVVMM(2)
         MVC   INSERT#2+10+2+2(2),=CL2' M'
         UNPK  INSERT#2+10+2+2+2(3),LKEDVVMM+1(2)
         MVI   INSERT#2+10+2+2+2+2,C' '                       DRK JUN99
         SPACE 1
         CLC   LKEDTIME(4),=X'0000000F' ANY LINK EDIT TIME?   DRK JUL99
         BE    *+4+6+6+6                NO                    DRK MAY99
         MVC   INSERT#2+10+2+2+2+2(4),=CL4'  AT'              DRK MAY99
         MVC   INSERT#2+10+2+2+2+2+4(10),LKDMASK1             DRK MAY99
         ED    INSERT#2+10+2+2+2+2+4(10),LKEDTIME             DRK MAY99
         SPACE 1
         M$MSG L064$2                         LINKAGE EDIT MESSAGE
         MVI   MTLEN+4,8                      LENGTH OF STANDARD INSERT
         B     NEWCMD
LKDMASK1 DC    X'402120207A20207A2020'     HH:MM:SS           DRK MAY99
         TITLE 'P D S  --  PDS HISTORY IDR SCAN SUBROUTINE   09/28/88'
*
*        IDR SCAN SUBROUTINE
*
         SPACE 3
READIDR  STM   R14,R12,ESDIDRSV    SAVE REGISTERS
         LR    R8,R15              BASE FOR THIS SUBROUTINE
         USING READIDR,R8
         NI    FLAGSCC,255-FIDR    IDR DATA DOES NOT EXIST YET
         TM    DS1SMSFG,DS1PDSE    PDSE DATASET?              DRK AUG05
         AIF   ('&MVSLEV' LT 'MVS510').NOBAPI1                 GP SEP05
         BO    IDRBAPI0            YES, NEED BINDER API        GP SEP05
         AGO   .BAPIOK1                                        GP SEP05
.NOBAPI1 ANOP  ,                                               GP SEP05
         BO    SORTIDRZ            YES, LEAVE                 DRK AUG05
.BAPIOK1 ANOP  ,                                               GP SEP05
         LA    R6,IDRNORML         BRANCH ADDRESS IF NOT CONTINUED
         LA    R2,#IDRPTR          BASE FOR IDR LIST
         USING IDRENTRY,R2
         MVC   STARTTR(3),DIRTTR   FIRST TTR
         SPACE 2
IDREXCP  L     R15,=V(EXCP)
         BASR  R14,R15
         B     *+4(R15)            PROCESS RETURN CODE
         B     IDREXCP1              00 - GOOD READ
         B     LASTIDR               04 - END OF MEMBER
         B     LASTIDR               08 - END OF DATA SET
         B     NEWCMD                12 - I/O ERROR
         SPACE 1
IDREXCP1 LR    R15,R0              START OF RECORD
         TM    0(R15),X'50'        TEST SYM OR SCATTER RECORD?
         BM    IDREXCP             YES, SKIP IT
         SPACE 1
         CLI   0(R15),X'20'        CESD RECORD?
         BE    IDREXCP             YES, SKIP
         SPACE 1
         CLI   0(R15),X'80'        IDR RECORD?
         BNE   LASTIDR             NO, BRANCH
         SPACE 1
         LA    R3,3(,R15)          START OF IDR DATA
         SR    R5,R5
         IC    R5,1(,R15)          BYTE COUNT THIS RECORD
         LA    R5,0(R5,R15)        END OF BUFFER ADDRESS
         BR    R6                  BRANCH TO IDRNORML OR AS CONTINUED
         SPACE 2
IDRNORML TM    2(R15),IDRLKED      LINKAGE EDITOR IDR RECORD?
         BO    LKEDIDR             YES, BRANCH
         TM    2(R15),IDRTRAN      TRANSLATOR IDR RECORD?
         BO    TRANIDR             YES, BRANCH
         TM    2(R15),IDRZAP       AMASPZAP IDR RECORD?
         BO    ZAPIDR              YES, BRANCH
         TM    2(R15),IDRUSER      USER-SUPPLIED IDR RECORD?
         BNO   NEXTIDR             NO, NEXT RECORD
         EJECT
*  USER-SUPPLIED IDR RECORDS:
* --  -- --+ --  --  --  -- -+ --  --  --  -- + --  --  --  --  -- ---*
*   0 - 1  |  2 - 4          |  5             |  6 - 6+COUNT          *
*   ESDID  |  IDENTIFY DATE  |  COUNT (0-40)  |  IDRDATA              *
* --  -- --+ --  --  --  -- -+ --  --  --  -- + --  --  --  --  -- ---*
         SPACE 1
USERIDR  CLI   #USEROPT,0          "USERDATA"?
         BE    NEXTIDR             NO, BRANCH
         BAS   R14,GETIDR          GET A NEW IDR RECORD
         ST    R1,IDRLINK
         LR    R2,R1               ADDRESS OF NEW RECORD
         SPACE 2
         LR    R4,R5
         SR    R4,R3               MACHINE LENGTH MOVED
         CH    R4,=H'5'            CONTINUED USER HEADER?
         BNL   USER20              NO, BRANCH
         MVC   IDRUPREF(*-*),0(R3) <<EXECUTED>>
         EX    R4,*-6              MOVE IN DATA
         BAS   R6,IDRCONT          GET THE CONTINUED RECORD AND RETURN
         SPACE 1
         LA    R14,IDRUPREF+1(R4)  TARGET OF MOVE
         LA    R15,5-1(,R3)        LENGTH BYTE ADDRESS-1 IF NOT SPLIT
         SR    R15,R4              AMOUNT WE ALREADY HAVE
         SR    R1,R1
         IC    R1,0(,R15)          LENGTH BYTE
         LA    R15,6-2(,R1)        MACHINE LENGTH OF RECORD -1
         SR    R15,R4              MACHINE LENGTH TO MOVE
         MVC   0(*-*,R14),0(R3)    <<EXECUTED>>
         EX    R15,*-6             MOVE IT INTO THE RECORD
         B     USER30
         SPACE 2
USER20   SR    R15,R15
         IC    R15,5(,R3)          LENGTH OF USER DATA AREA
         LA    R15,5(,R15)         MACHINE LENGTH FOR MOVE
         MVC   IDRUPREF(*-*),0(R3) <<EXECUTED>>
         EX    R15,*-6             MOVE IT INTO THE RECORD
         SPACE 1
USER30   LA    R4,1(,R15)          ACTUAL RECORD LENGTH
         MVI   IDRTYPE,IDRUSER     USER IDR DATA IDENTIFIER
         MVC   IDRESDID,IDRUPREF   ADD THE CSECT ID
         LA    R1,IDRUPREF+2       YYDDD IDR RECORD CREATED
         LA    R15,IDRDATE
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT
         SR    R15,R15
         IC    R15,IDRUPREF+5      LENGTH OF USER DATA AREA
         BCTR  R15,0
         STC   R15,IDRLDATA
         SPACE 2
USER40   BXLE  R3,R4,USERIDR
         EJECT
         SR    R3,R5
         BCTR  R3,0                ACTUAL REMAINING LENGTH
         LTR   R4,R3               CONTINUED DATA PORTION?
         BNP   NEXTIDR             NO, BRANCH
         BAS   R6,IDRCONT          GET THE CONTINUED RECORD AND RETURN
         SPACE 1
         SR    R14,R14
         IC    R14,IDRLDATA        ORIGINAL LENGTH -1
         LA    R14,IDRDATA+1(R14)  END OF DATA
         SR    R14,R4              START POSITION FOR MOVE
         BCTR  R4,0                MACHINE LENGTH FOR MOVE
         MVC   0(*-*,R14),0(R3)    <<EXECUTED>>
         EX    R4,*-6              MOVE IN THE REMAINDER
         LA    R4,1(,R4)           ACTUAL LENGTH OF LAST PORTION
         B     USER40
         SPACE 4
*  AMASPZAP IDR RECORDS:
* --  -- -+ --  --  -- + --  --  --  --  --  --  --  --  --  --  -- --*
*  0 - 1  |  2 - 4     |  5 - 12                                      *
*  ESDID  |  ZAP DATE  |  IDRDATA OR USER IDENTIFICATION              *
* --  -- -+ --  --  -- + --  --  --  --  --  --  --  --  --  --  -- --*
         SPACE 1
ZAPIDR   CLI   #ZAPOPT,X'01'       "ZAP"?
         BNE   NEXTIDR             NO, BRANCH
         SR    R4,R4
         NI    0(R3),X'3F'
         IC    R4,0(R3)            GET COUNT OF AMASPZAP ENTRIES
         LA    R3,1(R3)
         LA    R4,1(R4)            JUMP COUNT FOR LOOP
         B     ZAPIDR1
         SPACE 2
ZAPIDR2  BAS   R14,GETIDR
         ST    R1,IDRLINK
         LR    R2,R1
         MVC   IDRESDID,0(R3)      MOVE ESDID TO IDR RECORD
         LA    R1,2(R3)            ADDRESS OF DATE OF RECORD
         LA    R15,IDRDATE
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT
         SPACE 1
         MVC   IDRZDATA,5(R3)      MOVE DATA TO IDR RECORD     GP SEP05
         MVI   IDRLDATA,8          SET LENGTH FOR COMPATIBILITY
         MVI   IDRTYPE,IDRZAP      INDICATE AMASPZAP ENTRY
         LA    R3,13(R3)           JUMP DATA ADDRESS
         SPACE 1
ZAPIDR1  BCT   R4,ZAPIDR2          IF ANOTHER ENTRY THIS RECORD
         B     NEXTIDR             READ NEXT IDR RECORD
         EJECT
*  TRANSLATOR IDR RECORDS:
* --  -- + --  -- + --  --  --  -- ---+ --  --  --  --  --  --  -- +---
*  0 - 1 |  2 - 3 |  N - N+1          |  0    (0 IS 1 TRANSLATOR)  |
*  ESDID |  ...   |  X'80'+LAST ESDID |  FLAG (1 IS 2 TRANSLATORS) |
* --  -- + --  -- + --  --  --  -- ---+ --  --  --  --  --  --  -- +---
*
*   --  --  -- --+ --  -- ---+ --  --  -- -+ --  --  --  --  --  -- --*
*    1 - 10      |  11 - 12  |  13 -15     |  16 - 30                 *
*    TRANSLATOR  |  VVMM     |  TRANS DATE |  OPTIONAL, SAME AS 1-15  *
*   --  --  -- --+ --  -- ---+ --  --  -- -+ --  --  --  --  --  -- --*
         SPACE 1
TRANIDR  CLI   #TRANOPT,0          NOTRAN?
         BE    NEXTIDR             YES, BRANCH
         LR    R4,R5
         SR    R4,R3               MACHINE LENGTH OK?
         BM    NEXTIDR             NO, DONE WITH THIS RECORD
         BAS   R14,GETIDR
         ST    R1,IDRLINK          CHAIN ON A
         LR    R2,R1                         NEW IDR RECORD
         SPACE 1
         MVI   IDRTYPE,IDRTRAN     TRANSLATOR TYPE RECORD
         LTR   R4,R4               MACHINE LENGTH OK?
         BP    TRAN20              YES, NOT SPLIT
         MVC   IDRESDID(1),0(R3)   NO, ONLY ONE ESDID BYTE
         BAS   R6,IDRCONT          GET THE CONTINUED RECORD AND RETURN
         SPACE 1
         MVC   IDRESDID+1(1),0(R3) SECOND BYTE OF ESDID
         BCTR  R3,0                BACK UP THE INPUT POINTER BY ONE
         B     TRAN30
         SPACE 2
TRAN20   MVC   IDRESDID(2),0(R3)   ESDID FIELD
         SPACE 1
TRAN30   MVC   IDRUPREF(2),IDRESDID  ORIGINAL ESDID
         NI    IDRESDID,FF-X'80'   TURN OFF THE HIGH-ORDER BIT
         TM    IDRUPREF,X'80'      LAST ESDID?
         BO    TRAN50              YES, BRANCH
         LA    R4,2                ESDID WIDTH
         BXLE  R3,R4,TRANIDR       CONTINUE FOR ALL ESDID'S
         B     NEXTIDR             GET THE NEXT RECORD
         SPACE 1
TRAN50   LA    R3,2(,R3)
         LR    R4,R5
         SR    R4,R3               FLAG BYTE INPUT?
         BNM   TRAN60              YES, BRANCH
         BAS   R6,IDRCONT          GET THE CONTINUED RECORD AND RETURN
         SPACE 1
TRAN60   LA    R1,14               ASSUME ONE TRANSLATOR
         CLI   0(R3),0             CORRECT?
         BE    *+8                 YES, BRANCH
         LA    R1,29               NO, TWO TRANSLATORS
         MVC   IDRTDATA(30),1(R3)  MOVE IN THE MAXIMUM LENGTH
         STC   R1,IDRLDATA         MACHINE LENGTH
         LA    R4,2(,R1)           ACTUAL SEGMENT LENGTH
TRAN70   BXLE  R3,R4,TRAN80
         EJECT
         LR    R4,R3
         SR    R4,R5               BYTES LEFT +1
         S     R4,=F'1'            ANY ACTUAL REMAINING BYTES?
         BNP   TRAN80              NO, BRANCH
         BAS   R6,IDRCONT          GET THE CONTINUED RECORD AND RETURN
         SPACE 1
         SR    R14,R14
         IC    R14,IDRLDATA        ORIGINAL LENGTH -1
         LA    R14,IDRTDATA+1(R14) END OF DATA
         SR    R14,R4              START POSITION FOR MOVE
         BCTR  R4,0                MACHINE LENGTH FOR MOVE
         MVC   0(*-*,R14),0(R3)    <<EXECUTED>>
         EX    R4,*-6              MOVE IN THE REMAINDER
         LA    R3,1(R3,R4)         POSITION FOR THE NEXT SEGMENT
         SPACE 2
TRAN80   LA    R1,IDRTDATA+12      ADDRESS OF CREATION YYDDD
         LA    R15,IDRDATE
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT
         LA    R1,#IDRPTR          SCAN IDR CHAIN
         SPACE 1
TRAN90   ICM   R1,B'1111',IDRLINK-IDRENTRY(R1)
         BZ    TRANIDR                        DONE, BRANCH
         CLI   IDRTYPE-IDRENTRY(R1),IDRTRAN   TRANSLATOR TYPE?
         BNE   TRAN90                         NO, BRANCH
         CLI   IDRDATE-IDRENTRY(R1),0         ANY DATE YET?
         BNE   TRAN90                         YES, BRANCH
         MVC   IDRDATE-IDRENTRY(3+6+1+30,R1),IDRDATE
         B     TRAN90
         DROP  R2
         SPACE 3
*  LINKAGE EDITOR IDR RECORDS:                             APAR OW29593
*                                                             |
*                                                             V
* --  --  --  --  -- ---+ --  -- ---+ --  --  --  --  -- +--  --  -- -*
*  0 - 9                |  10 - 11  |  12 - 14           |  15-18     *
*  LINKAGE EDITOR NAME  |  VVMM     |  LINKAGE EDIT DATE |  LKED TIME *
* --  --  --  --  -- ---+ --  -- ---+ --  --  --  --  -- +--  --  -- -*
         SPACE 1
LKEDIDR  OI    FLAGSCC,FIDR
         MVC   LKEDTIME(4),=X'0000000F' ASSUME NO TIME        DRK JUL99
         CLI   1(R15),X'15'        LKED TIME PRESENT?         DRK MAY99
         BL    *+4+6               NO                         DRK MAY99
         MVC   LKEDTIME(4),15(R3)  YES                        DRK MAY99
         LA    R1,12(R3)           ADDRESS OF DATE
         LA    R15,LKEDDATE
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT
         MVC   LKEDNAME(10),0(R3)  LINKAGE EDITOR NAME
         MVC   LKEDVVMM(2),10(R3)  VV.MM IN HEX
         SPACE 2
NEXTIDR  LA    R6,IDRNORML         NOT A CONTINUED RECORD
         SPACE 1
IDRCONT  B     IDREXCP             CONTINUED RECORD
         EJECT
LASTIDR  MVC   RLDCOUNT(1),3(R15)    SAVE THE FIRST RLD/CONTROL AMOUNT
         OC    #ZAPLEN(3),#ZAPLEN    ANY IDR FILTERING?
         BZ    LASTIDRZ              NO, BRANCH
         SPACE 2
         USING IDRENTRY,R3
         SR    R4,R4
         LA    R3,#IDRPTR            SCAN IDR CHAIN
IDRFIL10 LR    R2,R3                 PREVIOUS ENTRY
         ICM   R3,B'0111',IDRLINK+1  CURRENT ENTRY?
         BZ    LASTIDRZ              NO, BRANCH
         ICM   R4,B'0111',IDRLINK+1  NEXT ENTRY
         SPACE 2
         SR    R15,R15               COMPARE STRING LENGTH
         CLI   IDRTYPE,IDRTRAN       IDR TYPE:
         BH    IDRFIL40                USER, BRANCH
         BL    IDRFIL30                ZAP, BRANCH
         LA    R1,#TRANTXT             TRANSLATOR
         SPACE 1
         ICM   R15,B'0001',#TRANLEN  ANY TRANSLATOR FILTERING?
         BZ    IDRFIL10              NO, BRANCH
         CLI   IDRLDATA,15           ONE TRANSLATOR ONLY?
         BL    IDRFIL60              YES, BRANCH
         BCTR  R15,0                 COMPARE MACHINE LENGTH
         CLC   IDRTDATA+15(*-*),#TRANTXT  <<EXECUTED>>
         EX    R15,*-6                    THIS PL/S TRANSLATOR?
         BE    IDRFIL10                   YES, BRANCH
         IC    R15,#TRANLEN          COMPARE STRING LENGTH (AGAIN)
         B     IDRFIL60              CHECK THE FIRST TRANSLATOR TOO
         SPACE 2
IDRFIL30 IC    R15,#ZAPLEN           ZAP IDR RECORD
         LA    R1,#ZAPTXT
         B     IDRFIL60
         SPACE 2
IDRFIL40 IC    R15,#USERLEN          USER IDR RECORD
         LA    R1,#USERTXT
         SPACE 2
IDRFIL60 S     R15,=F'1'             VALID MACHINE LENGTH?
         BM    IDRFIL10              NO, BRANCH
         SPACE 1
         CLC   IDRDATA(*-*),0(R1)    <<EXECUTED>>
         EX    R15,*-6               PARTIAL NAME MATCH?
         BE    IDRFIL10              YES, BRANCH
         SPACE 1
         LR    R3,R2                 NO, UNCHAIN THE
         ST    R4,IDRLINK                           CURRENT ENTRY
         B     IDRFIL10
         EJECT
LASTIDRZ LA    R3,#IDRPTR          PERFORM AN IDR RECORD SORT
         SPACE 2
SORTIDR  ICM   R3,B'1111',IDRLINK
         BZ    SORTIDRZ
         LR    R1,R3
         SPACE 1
SORTIDR2 ICM   R1,B'1111',IDRLINK-IDRENTRY(R1)    GET THE NEXT ENTRY
         BZ    SORTIDR
         SPACE 1
         SR    R14,R14                    CURRENT             Y2K NOV99
         SR    R15,R15                    NEXT                Y2K NOV99
         CLI   IDRDATE+2,X'&WIN19XX'      < 19XX WINDOW?      Y2K NOV99
         BNL   *+4+4                      NO,  THEN 19XX      Y2K NOV99
         ICM   R14,B'0001',=X'01'         YES, THEN 20XX      Y2K NOV99
         CLI   IDRDATE-IDRENTRY+2(R1),X'&WIN19XX' < 19XX?     Y2K NOV99
         BNL   *+4+4                      NO,  THEN 19XX      Y2K NOV99
         ICM   R15,B'0001',=X'01'         YES, THEN 20XX      Y2K NOV99
*        SORT BY DATE (DESCENDING ORDER):  CYYMMDD            Y2K NOV99
         CLR   R14,R15                            C:C         Y2K NOV99
         BH    SORTIDR2                           HIGH - NO SWITCH
         BL    SORTIDR3                           LOW  - SWITCH
         ICM   R0,B'1110',IDRDATE                 MMDDYY      Y2K NOV99
         CLM   R0,B'0010',IDRDATE-IDRENTRY+2(R1)  YY:YY       Y2K NOV99
         BH    SORTIDR2                           HIGH - NO SWITCH
         BL    SORTIDR3                           LOW  - SWITCH
         CLM   R0,B'1000',IDRDATE-IDRENTRY+0(R1)  MM:MM       Y2K NOV99
         BH    SORTIDR2                           HIGH - NO SWITCH
         BL    SORTIDR3                           LOW  - SWITCH
         CLM   R0,B'0100',IDRDATE-IDRENTRY+1(R1)  DD:DD       Y2K NOV99
         BNL   SORTIDR2                           HIGH/EQUAL - BRANCH
         SPACE 1
SORTIDR3 XC    IDRSTART(LENIDR1),IDRSTART-IDRENTRY(R1)
         XC    IDRSTART-IDRENTRY(LENIDR1,R1),IDRSTART
         XC    IDRSTART(LENIDR1),IDRSTART-IDRENTRY(R1)
         B     SORTIDR2
         SPACE 1
SORTIDRZ LM    R14,R12,ESDIDRSV    RESTORE REGISTERS
         TM    FLAGSCC,FIDR        ANY IDR RECORDS?
         BZR   R14                 NO, RETURN AT +0
         B     4(,R14)             YES, RETURN AT +4
         DROP  R3
         SPACE 2
GETIDR   CLC   ##SUBCOM(8),$ATTL     ATTRIB SUBCOMMAND?
         BE    NEXTIDR               YES, IGNORE THE RECORD
         L     R0,=A(IF)             START OF IF SUBCOMMAND
         CLM   R0,B'0111',##ADRCMD+1 REALLY IF SUBCOMMAND?
         BE    GETIDRM               YES, BRANCH
         CLC   ##SUBCOM(8),$MML      MEMLIST SUBCOMMAND?
         BE    NEXTIDR               YES, IGNORE THE RECORD
         CLC   ##SUBCOM(8),$ML       ML SUBCOMMAND?
         BE    NEXTIDR               YES, IGNORE THE RECORD
GETIDRM  MVI   SUBPOOLT,21
         LA    R0,LENIDR
         ICM   R0,B'1000',SUBPOOLT   SUBPOOL 21
         GETMAIN R,LV=(0)
         XC    0(LENIDR,R1),0(R1)
         OI    FLAGSCC,FIDR          IDR DATA EXISTS
         BR    R14
*HISTL450 DC    H'450'
*HISTLX07 DC    X'0700'
         AIF   ('&MVSLEV' LT 'MVS510').NOBAPI2                 GP SEP05
IDRBAPI0 L     R15,CVTPTR(,R0)                                 GP SEP05
         CLI   CVTDCB-CVT(R15),X'9B'                           GP SEP05
         BNE   SORTIDRZ              OS IS TOO OLD FOR THIS    GP SEP05
         TM    CVTOSLV1-CVT(R15),CVTH5510  ARBITRARY TEST      GP SEP05
         BNO   SORTIDRZ              OS IS TOO OLD FOR THIS    GP SEP05
         LA    R0,1                                            GP SEP05
         SLL   R0,31                 GET A HIGH BIT            GP SEP05
         LA    R15,IDRBAPI2          SET ADDRESS               GP SEP05
         OR    R15,R0                SET AMODE=31 FOR API      GP SEP05
         BSM   0,R15                 SET 31-BIT ADDRESSING     GP SEP05
IDRBAPI2 BAS   R14,IDRBAPI4                                    GP SEP05
         LA    R15,LASTIDR                                     GP SEP05
         BSM   0,R15                 SET 24-BIT ADDRESSING     GP SEP05
         SPACE 1                                               GP SEP05
IDRBAPI4 BAKR  R14,0                 SAVE STATUS               GP SEP05
         LHI   R0,IDRAPIWL                                     GP APR18
         GETMAIN RU,LV=(0),LOC=(31,64),SP=21                   GP SEP05
         LR    R13,R1                                          GP SEP05
         LR    R0,R1                                           GP SEP05
         LHI   R1,IDRAPIWL                                     GP APR18
         SR    R15,R15                                         GP SEP05
         MVCL  R0,R14                ZERO NEW STORAGE          GP SEP05
         USING IDRAPIWK,R13                                    GP SEP05
         MVC   4(4,R13),=CL4'F1SA'   FLAG LINKAGE STACK USAGE  GP JUN10
         SPACE 1                                               GP SEP05
         MVI   IDRBLDL+1,1           NEED BLDL FORMAT,         GP SEP05
         MVI   IDRBLDL+3,76           NOT STOW FORMAT          GP SEP05
         MVC   IDRBLDL+4(8),DIRNAME   FOR DESERV GET           GP SEP05
         BLDL  INDCB,IDRBLDL                                   GP SEP05
         LTR   R15,R15               ALL AS IT SHOULD BE?      GP SEP05
         BNZ   IDRBAPIX              NO, THAT'S STRANGE        GP SEP05
         SPACE 1                                               GP SEP05
         MVC   BNDDATA(ISITMGDL),ISITMGDS                      GP SEP05
         USING ISM,BNDDATA                                     GP SEP05
         ISITMGD DCB=INDCB,DATATYPE=YES,MF=(E,BNDDATA)         GP SEP05
         TM    ISMOFLG3,ISMDTPGM     PROGRAM OBJECT LIBRARY?   GP SEP05
         BNO   IDRBAPIX              NO, SKIP BINDER API CALLS GP SEP05
         SPACE 1                                               GP SEP05
         MVC   BNDDATA(DESRVGL),DESRVGS                        GP SEP05
         DESERV FUNC=GET,            GET A DIRECTORY ENTRY     GP JAN08+
               AREAPTR=BNDCURSR,     RETURNED POINTER AREA     GP JAN08+
               BYPASS_LLA=YES,       GET LATEST FROM DISK      GP JAN08+
               CONN_ID=MODDEPTR,     SAVE FOR RELEASE          GP JAN08+
               CONN_INTENT=HOLD,     COMPULSORY                GP JAN08+
               DCB=INDCB,            SUPPLY OPEN BPAM DCB      GP JAN08+
               PDSDE=IDRBLDL+4,      POINT TO BLDL RESULTS     GP JAN08+
               RETCODE=BNDRETCD,     SUPPLY RETURN CODE AREA   GP JAN08+
               RSNCODE=BNDRSNCD,     SUPPLY REASON CODE AREA   GP JAN08+
               SUBPOOL=21,           SUPPLY SUBPOOL ID         GP JAN08+
               MF=(E,BNDDATA,COMPLETE)                         GP JAN08
         ICM   R15,15,BNDRETCD       SUCCESS?                  GP JAN08
         BNZ   IDRBAPIX              NO, NO DATA TO LOOK AT    GP JAN08
         DESERV FUNC=RELEASE,        RELEASE THE CONNECTION    GP JAN08+
               CONN_ID=MODDEPTR,       THAT WAS JUST ACQUIRED  GP JAN08+
               DCB=INDCB,            SUPPLY OPEN BPAM DCB      GP JAN08+
               MF=(E,BNDDATA,COMPLETE)                         GP JAN08
         L     R2,BNDCURSR           YES, POINT TO DESB        GP JAN08
         USING DESB,R2                                         GP JAN08
         LA    R3,DESB_DATA          POINT TO THE ACTUAL ENTRY GP JAN08
         USING SMDE,R3                                         GP JAN08
         SR    R4,R4                 CLEAR FOR INSERT          GP JAN08
         ICM   R4,3,SMDE_PMAR_OFF    GET OFFSET TO PMAR        GP JAN08
         ALR   R4,R3                 POINT TO PMAR SECTION     GP JAN08
         CLI   #MODLEN,0             IS FILTERING ACTIVE?      GP SEP18
         BNE   IDRDSRVX              YES, SKIP BIND DETAILS    GP SEP18
         USING PMAR,R4                                         GP JAN08
         CLI   PMAR_LVL,PMAR_PM2_VAL PROGRAM OBJECT LEVEL 1?   GP JAN08
         BL    IDRDSRVX              YES, DATE NOT AVAILABLE   GP JAN08
         USING PMARL,PMAR_END                                  GP JAN08
         MVC   LKEDTIME,PMARL_TIME   COPY BIND TIME            GP JAN08
         LA    R1,PMARL_DATE+1       POINT TO BIND DATE YYDDDF GP JAN08
         LA    R15,LKEDDATE          POINT TO OUTPUT FIELD     GP JAN08
         BAS   R14,CONVDATE          CONVERT TO MMDDYY FORMAT  GP JAN08
         MVC   LKEDNAME(2),=C'J='    INDICATE JOB NAME         GP JAN08
         MVC   LKEDNAME+2(8),PMARL_USER  COPY JOB NAME         GP JAN08
         MVC   LKEDVVMM(2),PMAR_LVL  PO AND BINDER VERSIONS    GP JAN08
         OI    FLAGSCC,FIDR          IDR DATA EXISTS           GP JAN08
IDRDSRVX DS    0H                    CLEAN UP DESERV STORAGE   GP JAN08
         L     R0,DESB_LEN           RETURNED BUFFER LENGTH    GP JAN08
         LR    R1,R2                 RETURNED BUFFER ADDRESS   GP JAN08
         FREEMAIN RU,LV=(0),A=(1),SP=21                        GP JAN08
         TM    IDRBLDL+27,DIRNOED    NOT EDITABLE?             GP JAN08
         BO    IDRBAPIX              YES, NE STUFF ALL DONE    GP JUN13
         DROP  R2,R3,R4              DESB, SMDE, PMAR+PMARL    GP JAN08
         SPACE 1                                               GP JAN08
         CLC   ##SUBCOM(8),$HIS      HISTORY SUBCOMMAND?       GP FEB20
         BE    IDRBAPIE              YES, COLLECT IT ALL       GP FEB20
         CLC   ##SUBCOM(3),$IFX      ALSO LET ALL OPERANDS OF  GP FEB20
         BE    IDRBAPIE                IF SUBCOMMAND WORK      GP FEB20
         CLC   LKEDNAME(2),=C'J='    GOT SOMETHING ALREADY?    GP FEB20
         BNE   IDRBAPIE              NO, SO PRESS ON           GP FEB20
         CLC   ##SUBCOM(8),$ATTL     ATTRIB SUBCOMMAND?        GP FEB20
         BNE   IDRBAPIX              NO, GOT ALL WE NEED       GP FEB20
         CLI   #LKEDOPT,X'01'        "LKED" REQUESTED?         GP FEB20
         BNE   IDRBAPIX              NO, GOT ALL WE NEED       GP FEB20
IDRBAPIE DS    0H                    ENTRY TO BINDER API USAGE GP SEP05
         LA    R0,8                                            GP APR18
         STH   R0,BNDDDNAM           SET DDNAME LENGTH         GP APR18
         MVC   BNDDDNAM+2(8),DDNAME  SET DDNAME                GP APR18
         STH   R0,BNDMEMBR           SET MEMBER LENGTH         GP APR18
         MVC   BNDMEMBR+2(8),DIRNAME SET MEMBER                GP APR18
         ICM   R0,15,IEWBIND         LOAD ISSUED?              GP APR18
         BNZ   IDRBNDLD              YES                       GP APR18
         LOAD  EPLOC=HIEWBIND        GET IEWBIND EPA           GP APR18
         ST    R0,IEWBIND            SAVE IEWBIND EPA          GP APR18
IDRBNDLD DS    0H                                              GP APR18
*        IEWBIND FUNC=STARTD,      START A BINDER DIALOG       GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DISTOKEN,                                GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         XC    DIATOKEN,DIATOKEN                               GP APR18
         ST    R0,DIATOKEN         SET UP DIALOG TOKEN         GP APR18
         MVC   MODTOKEN,DIATOKEN      AND MODULE TOKEN         GP APR18
         LR    R15,R0              COPY THE EPA                GP APR18
         CALL  (15),(STARTDH,      FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               HSTZERO,HSTZERO,HSTZERO),                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP APR18
         BH    IDRBAPIX            YES, GIVE UP                GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=CREATEW,     CREATE A WORKMOD            GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,DIALOG=DIATOKEN,INTENT=ACCESS, GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(CREATEWH,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               HSTCODEA),          INTENT (ACCESS)             GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=INCLUDE,     INCLUDE A PROGRAM OBJECT    GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,INTYPE=NAME,                   GP APR18
*              DDNAME=BNDDDNAM,MEMBER=BNDMEMBR,                GP APR18
*              ATTRIB=NO,ALIASES=NO,                           GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(INCLUDEH,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               HSTCODEN,           INTYPE (NAME) (CONCAT OK)   GP APR18+
               BNDDDNAM,           DDNAME                      GP APR18+
               BNDMEMBR,           MEMBER                      GP APR18+
               HSTZERO,HSTZERO,HSTZERO,0,                      GP APR18+
               HSTCODEN,           ATTRIB                      GP APR18+
               HSTCODEN),          ALIASES                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'4'      MAJOR FAILURE?              GP APR18
         BH    IDRENDD             YES, GIVE UP                GP APR18
         USING IEWBMAP,BNDDATA     (USE IEWBUFF IN @MAP)       GP JUN13
         USING IEWBIDL,BNDDATA                                 GP SEP05
         USING IEWBIDU,BNDDATA                                 GP SEP05
         USING IEWBIDZ,BNDDATA                                 GP SEP05
         USING IEWBIDB,BNDDATA                                 GP SEP05
         LA    R2,#IDRPTR          ORIGIN FOR IDR CHAIN        GP SEP05
         USING IDRENTRY,R2                                     GP SEP05
         SPACE 1                                               GP SEP05
         CLC   ##SUBCOM(8),$ATTL   ATTRIB SUBCOMMAND?          GP SEP05
         BE    IDRZDONE            YES, JUST WANT BIND DATA    GP SEP05
** DON'T L     R0,=A(IF)           START OF IF SUBCOMMAND FEB20GP SEP05
** NEED  CLM   R0,7,##ADRCMD+1     REALLY IF SUBCOMMAND?  FEB20GP SEP05
** THIS  BE    IDRTRNCK            YES, PROCEED           FEB20GP SEP05
         CLC   ##SUBCOM(8),$MML    MEMLIST SUBCOMMAND?         GP SEP05
         BE    IDRZDONE            YES, JUST WANT BIND DATA    GP SEP05
         CLC   ##SUBCOM(8),$ML     ML SUBCOMMAND?              GP SEP05
         BE    IDRZDONE            YES, JUST WANT BIND DATA    GP SEP05
         SPACE 1                                               GP SEP05
IDRTRNCK CLI   #TRANOPT,X'01'      NO TRANSLATOR DATA?         GP SEP18
         BNE   IDRLDONE            YES, SKIP THIS CLASS        GP SEP18
         CLC   ##SUBCOM(8),$IFX    IF SUBCOMMAND?              GP FEB20
         BE    IDRLDONE            YES, IF IGNORANT OF COBOL   GP FEB20
         SPACE 1                                               GP JUN13
* - - - - TOP OF CODE BLOCK FOR PDSE COBOL ATTRIBUTE SUPPORT - GP JUN13
*                                                              GP JUN13
*  PROGRAM OBJECT (PO) LEVEL 1 CAN IMPLEMENT ALL LOAD MODULE   GP JUN13
*  FACILITIES IN A PDSE, INCLUDING SEGMENT OVERLAY PROGRAMS.   GP JUN13
*  ORIGINALLY AND FOR NUMEROUS YEARS, COPYING A LOAD MODULE    GP JUN13
*  FROM A PDS TO A PDSE RESULTED IN A LEVEL 1 PROGRAM OBJECT   GP JUN13
*  BEING CREATED IN THE PDSE.  BY ABOUT THE TIME OF THE SECOND GP JUN13
*  DECADE OF THE 21ST CENTURY, COPYING A NON-SEGMENT-OVERLAY   GP JUN13
*  PROGRAM FROM A PDS TO A PDSE RESULTED IN THE CREATION OF A  GP JUN13
*  LEVEL 2 PROGRAM OBJECT WHICH IS THE SAME LEVEL AS THE       GP JUN13
*  LINK EDIT OF A CONVENTIONAL OBJECT DECK DIRECTLY INTO A     GP JUN13
*  PDSE HAS DONE PRETTY MUCH ALL ALONG.  THE EXACT TIME OF     GP JUN13
*  THIS CHANGE PROBABLY CORRESPONDS TO A SPECIFIC RELEASE      GP JUN13
*  OF Z/OS SUCH AS V1R10 OR V1R11 OR THEREABOUTS.              GP JUN13
*                                                              GP JUN13
*  AS OF Z/OS 2.3, COPYING A SEGMENT OVERLAY LOAD MODULE       GP APR18
*  TO A PDSE STILL YIELDED A LEVEL 1 PROGRAM OBJECT.           GP APR18
*                                                              GP JUN13
*  THE BINDER FAST DATA ACCESS BINDER API CALLS HAVE NOW       GP APR18
*  BEEN REPLACED BY FULL DIALOG API CALLS BECAUSE OF THE       GP APR18
*  GREATER CAPACITY OF THE DIALOG API TO TRANSFORM DATA        GP APR18
*  STRUCTURES OF ONE VERSION ON DASD TO STRUCTURES OF A        GP APR18
*  DIFFERENT VERSION AS REQUESTED BY THE BUFFER SPECIFIC-      GP APR18
*  ATIONS SET UP BY THE API CALLER.  HENCE, A SINGLE API       GP APR18
*  LOGIC PATH CAN NOW BE USED TO PROCESS PROGRAM OBJECTS       GP APR18
*  OF ANY LEVEL.                                               GP APR18
*                                                              GP JUN13
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP JUN13
IDRMREDO EQU   *                                               GP JUN13
         L     R1,=A(READESD)      ADDRESS CODE THAT ALREADY   GP JUN13
         USING READESD,R1            HAS USABLE STATIC DATA    GP JUN13
         LA    R5,CLS_MAP          POINT TO CLASS NAME         GP APR18
         MVC   IEWBMAP(MAPH_LENG),MAPI_INIT_VALUES             GP JUN13
         DROP  R1                  READESD                     GP JUN13
*        IEWBIND FUNC=GETD,        MODULE MAP DATA             GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_MAP,                 GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               (R5),               CLASS                       GP APR18+
               HSTZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      ANY DATA?                   GP JUN13
         BNL   IDRMDONE            NO, THIS BIT NOW DONE       GP JUN13
         LA    R6,IEWBMAP+MAPH_LENG                            GP JUN13
         USING MAP_ENTRY,R6                                    GP JUN13
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP JUN13
         BNP   IDRMDONE            NO ENTRIES WERE RETURNED    GP JUN13
IDRMLOOP EQU   *                                               GP JUN13
         TM    IDR_FLGS,$B_TXT     LOOKING FOR B_TEXT?         GP JUN13
         BO    IDRMSYM             NO, IN THE THICK OF IT      GP JUN13
         CLI   MAP_TYPE,C'C'       CLASS ENTRY?                GP JUN13
         BNE   IDRMNEXT            NO, FLUSH THIS ENTRY        GP JUN13
         CLI   MAP_NAME_CHARS+1,6  6 CHARS IN CLASS NAME?      GP JUN13
         BNE   IDRMNEXT            NO, FLUSH THIS ENTRY        GP JUN13
*  OLD COBOL WILL BE B_TEXT WHILE NEW COBOL WILL BE C_CODE.    GP OCT18
*  SCAN FIRST OF EITHER OF THESE TWO THAT ARE ENCOUNTERED,     GP OCT18
*  AND CREATE ESDLINK ELEMENTS FOR DISCOVERED SECTIONS.        GP OCT18
*  THE FIRST CLASS ENCOUNTERED WILL CONTAIN THE ENTRY POINT.   GP OCT18
         L     R14,MAP_NAME_PTR    POINT TO THE CLASS NAME     GP JUN13
         CLC   =C'B_TEXT',0(R14)   IS CLASS B_TEXT?            GP JUN13
         BE    IDRCODE             NO, FLUSH THIS ENTRY        GP OCT18
         CLC   =C'C_CODE',0(R14)   IS CLASS C_CODE?            GP OCT18
         BNE   IDRMNEXT            NO, FLUSH THIS ENTRY        GP JUN13
IDRCODE  EQU   *                   GOT LOADABLE CODE CLASS     GP JUN13
         OI    IDR_FLGS,$B_TXT     YES, ON TO NEXT PHASE       GP JUN13
         B     IDRMNEXT            GO GET FIRST SECTION        GP JUN13
IDRMSYM  EQU   *                   GOT ENTRY IN B_TEXT CLASS   GP JUN13
         CLI   MAP_TYPE,C'C'       NEXT CLASS ENTRY?           GP JUN13
         BE    IDRMDONE            YES, END OF B_TEXT CLASS    GP JUN13
         CLI   MAP_TYPE,C'E'       END OF MODULE MAP?          GP JUN13
         BE    IDRMDONE            YES, END OF DATA            GP JUN13
         CLI   MAP_TYPE,C'S'       SECTION ENTRY?              GP JUN13
         BNE   IDRMNEXT            NO, NOT INTERESTED          GP JUN13
         LH    R15,MAP_NAME_CHARS  GET CSECT NAME LENGTH       GP JUN13
         L     R14,MAP_NAME_PTR    GET CSECT NAME ADDRESS      GP JUN13
         STM   R14,R15,IDRDBL      SAVE CSECT NAME DETAILS     GP JUN13
         SR    R1,R1               CLEAR FOR INSERT            GP SEP18
         IC    R1,#MODLEN          GET FILTER LENGTH           GP SEP18
         CR    R1,R15              FILTER LONGER THAN NAME?    GP SEP18
         BH    IDRMNEXT            YES, DISCARD THIS ENTRY     GP SEP18
         LR    R15,R1              COPY LENGTH                 GP SEP18
         LA    R0,#MODTXT          POINT TO FILTER VALUE       GP SEP18
         CLCL  R14,R0              THIS NAME OF INTEREST?      GP SEP18
         BNE   IDRMNEXT            NO, DISCARD THIS ENTRY      GP SEP18
         BAS   R14,IDRGETID        CREATE ESDENTRY FOR SECTION GP JUN13
* FUTURE CLC   ##SUBCOM(8),$IFX    IF SUBCOMMAND?              GP FEB20
* USE ?? BE    IDRMNEXT            YES, NOT GENERATING OUTPUT  GP FEB20
         OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED   GP SEP18
         SPACE 1                                               GP JUN13
IDRMNEXT A     R6,MAPH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP JUN13
         BCT   R5,IDRMLOOP         PROCESS NEXT ENTRY          GP JUN13
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    IDRMREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R6                  MAP_ENTRY                   GP JUN13
IDRMDONE EQU   *                                               GP JUN13
         NI    IDR_FLGS,255-$B_TXT CLEAR B_TEXT STATUS FLAG    GP JUN13
* - - - - END OF CODE BLOCK FOR PDSE COBOL ATTRIBUTE SUPPORT - GP JUN13
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP SEP05
IDRLREDO EQU   *                                               GP SEP05
         MVC   IEWBIDL(IDLH_LENG),IDLI_INIT_VALUES             GP SEP05
*        IEWBIND FUNC=GETD,        LANGUAGE IDR DATA           GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_IDRL,                GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_IDRL,           CLASS                       GP APR18+
               HSTZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP SEP05
         BH    IDRBDONE            YES, GIVE UP                GP SEP05
         BE    IDRLDONE            NO, BUT NO DATA             GP SEP05
         LA    R6,IEWBIDL+IDLH_LENG                            GP SEP05
         USING IDL_ENTRY,R6                                    GP SEP05
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP SEP05
         BNP   IDRLDONE            NO ENTRIES WERE RETURNED    GP SEP05
IDRLLOOP EQU   *                                               GP SEP05
         LH    R15,IDL_RESIDENT_CHARS                          GP SEP05
         L     R14,IDL_RESIDENT_PTR                            GP SEP05
         STM   R14,R15,IDRDBL      SAVE SECTION NAME DETAILS   GP SEP05
         SR    R1,R1               CLEAR FOR INSERT            GP AUG18
         IC    R1,#MODLEN          GET FILTER LENGTH           GP AUG18
         CR    R1,R15              FILTER LONGER THAN NAME?    GP AUG18
         BH    IDRLNEXT            YES, DISCARD THIS ENTRY     GP AUG18
         LR    R15,R1              COPY LENGTH                 GP AUG18
         LA    R0,#MODTXT          POINT TO FILTER VALUE       GP AUG18
         CLCL  R14,R0              THIS NAME OF INTEREST?      GP AUG18
         BNE   IDRLNEXT            NO, DISCARD THIS ENTRY      GP AUG18
         BAS   R14,GETIDR          ACQUIRE NEW ELEMENT         GP SEP05
         ST    R1,IDRLINK          CHAIN IT                    GP SEP05
         LR    R2,R1                                           GP SEP05
         BAS   R14,IDRGETID        CONVERT NAME TO ESDID       GP SEP05
         MVC   IDRESDID,IDRDBL     MOVE ESDID TO IDR RECORD    GP SEP05
         PACK  IDRDBL,IDL_DATE_PROCESSED                       GP SEP05
         LA    R1,IDRDBL+5         ADDRESS OF DATE OF RECORD   GP SEP05
         LA    R15,IDRDATE                                     GP SEP05
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT    GP SEP05
         MVC   IDRTDATA(10),IDL_PID_ID    COPY PROCESSOR ID    GP SEP05
         PACK  IDRDBL(2),IDL_VERSION(3)                        GP SEP05
         PACK  IDRDBL+1(2),IDL_MOD_LEVEL(3)                    GP SEP05
         MVC   IDRTDATA+10(2),IDRDBL      VV.MM IN HEX         GP SEP05
         MVI   IDRLDATA,14         INDICATE ONE TRANSLATOR     GP SEP05
         MVI   IDRTYPE,IDRTRAN     TRANSLATOR TYPE RECORD      GP SEP05
         CLC   ##SUBCOM(8),$IFX    IF SUBCOMMAND?              GP FEB20
         BE    IDRLNEXT            YES, NOT GENERATING OUTPUT  GP FEB20
         OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED   GP SEP18
IDRLNEXT A     R6,IDLH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP SEP05
         BCT   R5,IDRLLOOP         PROCESS NEXT ENTRY          GP SEP05
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    IDRLREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R6                  IDL_ENTRY                   GP SEP05
IDRLDONE EQU   *                                               GP SEP05
         CLI   #USEROPT,0          "USERDATA"?                 GP SEP18
         BE    IDRUDONE            NO, SKIP THIS CALL          GP SEP18
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP SEP05
IDRUREDO EQU   *                                               GP SEP05
         MVC   IEWBIDU(IDUH_LENG),IDUI_INIT_VALUES             GP SEP05
*        IEWBIND FUNC=GETD,        USER IDR DATA               GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_IDRU,                GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_IDRU,           CLASS                       GP APR18+
               HSTZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP SEP05
         BH    IDRBDONE            YES, GIVE UP                GP SEP05
         BE    IDRUDONE            NO, BUT NO DATA             GP SEP05
         LA    R6,IEWBIDU+IDUH_LENG                            GP SEP05
         USING IDU_ENTRY,R6                                    GP SEP05
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP SEP05
         BNP   IDRUDONE            NO ENTRIES WERE RETURNED    GP SEP05
IDRULOOP EQU   *                                               GP SEP05
         LH    R15,IDU_RESIDENT_CHARS                          GP SEP05
         L     R14,IDU_RESIDENT_PTR                            GP SEP05
         STM   R14,R15,IDRDBL      SAVE SECTION NAME DETAILS   GP SEP05
         SR    R1,R1               CLEAR FOR INSERT            GP AUG18
         IC    R1,#MODLEN          GET FILTER LENGTH           GP AUG18
         CR    R1,R15              FILTER LONGER THAN NAME?    GP AUG18
         BH    IDRUNEXT            YES, DISCARD THIS ENTRY     GP AUG18
         LR    R15,R1              COPY LENGTH                 GP AUG18
         LA    R0,#MODTXT          POINT TO FILTER VALUE       GP AUG18
         CLCL  R14,R0              THIS NAME OF INTEREST?      GP AUG18
         BNE   IDRUNEXT            NO, DISCARD THIS ENTRY      GP AUG18
         BAS   R14,GETIDR          ACQUIRE NEW ELEMENT         GP SEP05
         ST    R1,IDRLINK          CHAIN IT                    GP SEP05
         LR    R2,R1                                           GP SEP05
         BAS   R14,IDRGETID        CONVERT NAME TO ESDID       GP SEP05
         MVC   IDRESDID,IDRDBL     MOVE ESDID TO IDR RECORD    GP SEP05
         PACK  IDRDBL,IDU_CREATE_DATE                          GP SEP05
         LA    R1,IDRDBL+5         ADDRESS OF DATE OF RECORD   GP SEP05
         LA    R15,IDRDATE                                     GP SEP05
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT    GP SEP05
         LH    R15,IDU_DATA_CHARS                              GP SEP05
         LA    R14,IDU_DATA                                    GP SEP05
         LA    R0,C' '                                         GP SEP05
         SLL   R0,24                                           GP SEP05
         OR    R15,R0                                          GP SEP05
         LA    R0,IDRDATA                                      GP SEP05
         LA    R1,L'IDRDATA                                    GP SEP05
         MVCL  R0,R14              COPY USER IDENTIFY DATA     GP SEP05
         LA    R1,IDRDATA+1                                    GP SEP05
         SR    R0,R1                                           GP SEP05
         STC   R0,IDRLDATA         SET DATA MACHINE LENGTH     GP SEP05
         MVI   IDRTYPE,IDRUSER     USER IDR DATA IDENTIFIER    GP SEP05
         CLC   ##SUBCOM(8),$IFX    IF SUBCOMMAND?              GP FEB20
         BE    IDRUNEXT            YES, NOT GENERATING OUTPUT  GP FEB20
         OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED   GP SEP18
IDRUNEXT A     R6,IDUH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP SEP05
         BCT   R5,IDRULOOP         PROCESS NEXT ENTRY          GP SEP05
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    IDRUREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R6                  IDU_ENTRY                   GP SEP05
IDRUDONE EQU   *                                               GP SEP05
         CLI   #ZAPOPT,X'01'       "ZAP"?                      GP SEP18
         BNE   IDRZDONE            NO, SKIP THIS CALL          GP SEP18
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP SEP05
IDRZREDO EQU   *                                               GP SEP05
         MVC   IEWBIDZ(IDZH_LENG),IDZI_INIT_VALUES             GP SEP05
*        IEWBIND FUNC=GETD,        ZAP IDR DATA                GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_IDRZ,                GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_IDRZ,           CLASS                       GP APR18+
               HSTZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP SEP05
         BH    IDRBDONE            YES, GIVE UP                GP APR18
         BE    IDRZDONE            NO, BUT NO DATA             GP SEP05
         LA    R6,IEWBIDZ+IDZH_LENG                            GP SEP05
         USING IDZ_ENTRY,R6                                    GP SEP05
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP SEP05
         BNP   IDRZDONE            NO ENTRIES WERE RETURNED    GP SEP05
IDRZLOOP EQU   *                                               GP SEP05
         LH    R15,IDZ_RESIDENT_CHARS                          GP SEP05
         L     R14,IDZ_RESIDENT_PTR                            GP SEP05
         STM   R14,R15,IDRDBL      SAVE SECTION NAME DETAILS   GP SEP05
         SR    R1,R1               CLEAR FOR INSERT            GP AUG18
         IC    R1,#MODLEN          GET FILTER LENGTH           GP AUG18
         CR    R1,R15              FILTER LONGER THAN NAME?    GP AUG18
         BH    IDRZNEXT            YES, DISCARD THIS ENTRY     GP AUG18
         LR    R15,R1              COPY LENGTH                 GP AUG18
         LA    R0,#MODTXT          POINT TO FILTER VALUE       GP AUG18
         CLCL  R14,R0              THIS NAME OF INTEREST?      GP AUG18
         BNE   IDRZNEXT            NO, DISCARD THIS ENTRY      GP AUG18
         BAS   R14,GETIDR          ACQUIRE NEW ELEMENT         GP SEP05
         ST    R1,IDRLINK          CHAIN IT                    GP SEP05
         LR    R2,R1                                           GP SEP05
         BAS   R14,IDRGETID        CONVERT NAME TO ESDID       GP SEP05
         MVC   IDRESDID,IDRDBL     MOVE ESDID TO IDR RECORD    GP SEP05
         PACK  IDRDBL,IDZ_DATE                                 GP SEP05
         LA    R1,IDRDBL+5         ADDRESS OF DATE OF RECORD   GP SEP05
         LA    R15,IDRDATE                                     GP SEP05
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT    GP SEP05
         MVC   IDRZDATA,IDZ_ZAP_DATA                           GP SEP05
         MVI   IDRLDATA,8          SET LENGTH                  GP SEP05
         MVI   IDRTYPE,IDRZAP      INDICATE AMASPZAP ENTRY     GP SEP05
         OI    FLAGSGG,FOUTSOME    SOME OUTPUT WAS GENERATED   GP SEP18
IDRZNEXT A     R6,IDZH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP SEP05
         BCT   R5,IDRZLOOP         PROCESS NEXT ENTRY          GP SEP05
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    IDRZREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R6                  IDZ_ENTRY                   GP SEP05
IDRZDONE EQU   *                                               GP SEP05
         CLI   #LKEDOPT,X'01'      "LKED" REQUESTED?           GP SEP18
         BNE   IDRBDONE            NO, SKIP THIS CALL          GP SEP18
         CLI   #MODLEN,0           ANY FILTER ACTIVE?          GP SEP18
         BE    IDRBCALL            NO, PROCEED                 GP SEP18
         L     R0,#ESDPTR          ANY ESD CHAIN ENTRIES?      GP SEP18
         O     R0,#IDRPTR          ANY IDR CHAIN ENTRIES?      GP SEP18
         BZ    IDRBDONE            NO, SKIP THIS CALL          GP SEP18
IDRBCALL EQU   *                                               GP SEP18
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP SEP05
         MVC   IEWBIDB(IDBH_LENG),IDBI_INIT_VALUES             GP SEP05
*        IEWBIND FUNC=GETD,        BINDER IDR DATA             GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_IDRB,                GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_IDRB,           CLASS                       GP APR18+
               HSTZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP SEP05
         BH    IDRBDONE            YES, GIVE UP                GP SEP05
         BE    IDRBDONE            NO, BUT NO DATA             GP SEP05
         LA    R6,IEWBIDB+IDBH_LENG                            GP SEP05
         USING IDB_ENTRY,R6                                    GP SEP05
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP SEP05
         BNP   IDRBDONE            NO ENTRIES WERE RETURNED    GP SEP05
         PACK  LKEDTIME(4),IDB_TIME_BOUND                      GP SEP05
         PACK  IDRDBL,IDB_DATE_BOUND                           GP SEP05
         LA    R1,IDRDBL+5         ADDRESS OF DATE             GP SEP05
         LA    R15,LKEDDATE                                    GP SEP05
         BAS   R14,CONVDATE        CONVERT TO MMDDYY FORMAT    GP SEP05
         MVC   LKEDNAME,IDB_BINDER_ID                          GP SEP05
         PACK  IDRDBL(2),IDB_VERSION(3)                        GP SEP05
         PACK  IDRDBL+1(2),IDB_RELEASE(3)                      GP SEP05
         MVC   LKEDVVMM(2),IDRDBL  VV.MM IN HEX                GP SEP05
         OI    FLAGSCC,FIDR        IDR DATA EXISTS             GP SEP05
         DROP  R6                  IDB_ENTRY                   GP SEP05
IDRBDONE EQU   *                                               GP SEP05
         DROP  R2                  IDRENTRY                    GP SEP05
*        IEWBIND FUNC=DELETEW,     DELETE THE WORKMOD          GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,PROTECT=NO,                    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(DELETEWH,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               HSTCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*  END THE DIALOG                                              GP APR18
IDRENDD  EQU   *                                               GP APR18
*        IEWBIND FUNC=ENDD,        END THE BINDER DIALOG       GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DIATOKEN,PROTECT=NO,                     GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(ENDDH,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               HSTCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
*        DELETE EPLOC=HIEWBIND     DISCARD IEWBIND             GP APR18
         SPACE 1                                               GP SEP05
IDRBAPIX LR    R1,R13                                          GP SEP05
         LHI   R0,IDRAPIWL                                     GP APR18
         FREEMAIN RU,LV=(0),A=(1),SP=21                        GP SEP05
         PR    ,                   BACK TO THE 370 WORLD       GP SEP05
         SPACE 2                                               GP SEP05
IDRGETID BAKR  R14,0                                           GP SEP05
         LM    R14,R15,IDRDBL      GET NAME ADDRESS AND LENGTH GP SEP05
         CHI   R15,4               IS THE NAME LENGTH 4?       GP APR18
         BNE   BIDRNMLD            NO, GO LOAD THE NAME        GP APR18
         CLI   0(R14),0            IS IT A FULLWORD NUMBER?    GP APR18
         BNE   BIDRNMLD            NO, GO LOAD THE NAME        GP APR18
         MVC   IDRDBL+6(2),2(R14)  YES, COPY IT (S0C4 SAFETY)  GP APR18
         UNPK  IDRDBL(5),IDRDBL+6(3)                           GP APR18
         TR    IDRDBL(4),TRTABLE   MAKE IT HEX                 GP APR18
         MVC   IDRDBL+4(4),IDRDBL                              GP APR18
         MVC   IDRDBL(4),BIDR$PRV  TIDY UP THE NAME            GP APR18
         B     BIDRNMOK                                        GP APR18
BIDRNMLD EQU   *                                               GP APR18
         LA    R0,C' '                                         GP SEP05
         SLL   R0,24                                           GP SEP05
         OR    R15,R0                                          GP SEP05
         LA    R0,IDRDBL                                       GP SEP05
         LA    R1,8                                            GP SEP05
         MVCL  R0,R14              COPY CSECT NAME             GP SEP05
BIDRNMOK EQU   *                                               GP APR18
         LA    R2,#ESDPTR          ROOT OF ESD CHAIN           GP SEP05
         SR    R3,R3               RESET ESDID                 GP SEP05
         USING ESDENTRY,R2                                     GP SEP05
IDRESDLP LA    R3,1(,R3)           INCREMENT ESDID             GP SEP05
         ICM   R0,15,ESDLINK       POINT TO THE NEXT ESD       GP SEP05
         BZ    IDRNEWID            NOT FOUND IN CHAIN          GP SEP05
         LR    R2,R0               POINT TO NEXT ESD           GP SEP05
         CLC   ESDNAME,IDRDBL      NAME MATCH?                 GP SEP05
         BNE   IDRESDLP            NO, CHECK NEXT              GP SEP05
         B     IDRESDOK            YES, FOUND IT               GP SEP05
IDRNEWID LA    R0,LENESD                                       GP SEP05
         ICM   R0,B'1000',SUBPOOLT SUBPOOL 21                  GP SEP05
         GETMAIN R,LV=(0)                                      GP SEP05
         XC    0(LENESD,R1),0(R1)                              GP SEP05
         ST    R1,ESDLINK                                      GP SEP05
         LR    R2,R1                                           GP SEP05
         MVC   ESDNAME,IDRDBL                                  GP SEP05
         STH   R3,ESDID                                        GP SEP05
* - - - - TOP OF CODE BLOCK FOR PDSE COBOL ATTRIBUTE SUPPORT - GP JUN13
         TM    IDR_FLGS,$B_TXT     HAVE B_MAP CLASS ENTRY?     GP JUN13
         BNO   IDRESDOK            NO, NO SECTION DETAILS      GP JUN13
         USING MAP_ENTRY,R6                                    GP JUN13
         ICM   R0,15,MAP_QUANTITY  GET ITS SIZE                GP JUN13
         STCM  R0,7,ESDLEN         SET ITS SIZE                GP JUN13
         ICM   R0,15,MAP_OFFSET    GET ITS OFFSET              GP JUN13
         STCM  R0,7,ESDADDR        SAVE MODULE OFFSET          GP JUN13
         DROP  R6                  MAP_ENTRY                   GP JUN13
* - - - - END OF CODE BLOCK FOR PDSE COBOL ATTRIBUTE SUPPORT - GP JUN13
IDRESDOK STH   R3,IDRDBL                                       GP SEP05
         PR    ,                                               GP SEP05
         DROP  R2                  ESDENTRY                    GP SEP05
         SPACE 2                                               GP SEP05
         DROP  R13                 IDRAPIWK                    GP SEP05
         SPACE 2                                               GP SEP05
BIDR$PRV DC    CL4'$PRV'           NUMBERED $PRIVATE PREFIX    GP APR18
HSTCODEA DC    C'A'                                            GP APR18
HSTCODEN DC    C'N'                                            GP APR18
HSTZERO  DC    F'0'                ZERO                        GP APR18
STARTDH  DC    Y(01,2)             VERSION 2 - STARTDIALOG     GP APR18
CREATEWH DC    Y(10,2)             VERSION 2 - CREATEWORKMOD   GP APR18
INCLUDEH DC    Y(40,2)             VERSION 2 - INCLUDE         GP APR18
GETDH    DC    Y(61,2)             VERSION 2 - GETDATA         GP APR18
DELETEWH DC    Y(15,2)             VERSION 2 - DELETEWORKMOD   GP APR18
ENDDH    DC    Y(05,2)             VERSION 2 - ENDDIALOG       GP APR18
HIEWBIND DC    CL8'IEWBIND '                                   GP APR18
CLS_IDRL DC    H'6',CL6'B_IDRL'                                GP SEP05
CLS_IDRU DC    H'6',CL6'B_IDRU'                                GP SEP05
CLS_IDRZ DC    H'6',CL6'B_IDRZ'                                GP SEP05
CLS_IDRB DC    H'6',CL6'B_IDRB'                                GP SEP05
         SPACE 1                                               GP SEP05
ISITMGDS ISITMGD DCB=0,DATATYPE=YES,MF=L                       GP SEP05
ISITMGDL EQU   *-ISITMGDS                                      GP SEP05
DESRVGS  DESERV FUNC=GET,MF=L                                  GP JAN08
DESRVGL  EQU   *-DESRVGS                                       GP JAN08
         SPACE 1                                               GP SEP05
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=IDRB,VERSION=2   GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=IDRZ,VERSION=2   GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=IDRU,VERSION=2   GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=IDRL,VERSION=2   GP APR18
         SPACE 2                                               GP SEP05
***  IDRAPIWK  DSECT MOVED TO @MAP  ***                        GP APR18
         DC    0D'0'               BACK TO FETCHABLE CODE      GP SEP05
         SPACE 1                                               GP SEP05
.NOBAPI2 ANOP  ,                                               GP SEP05
