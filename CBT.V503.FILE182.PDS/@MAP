         TITLE 'P D S  --  PDS MAP                           09/28/88'
***********************************************************************
***      MAP SUBCOMMAND                                             ***
***********************************************************************
*
         SPACE 1
MAP      CSECT
         USING *,R8
         LA    R1,L530          ASSUME A NON-PARTITIONED DATA SET
         TM    DSORG,DS1DSGPO   CORRECT?
         BZ    MSGNEW           YES, BRANCH
         LA    R1,L701          ASSUME NOT A LOAD LIBRARY
         TM    FLAGSCC,RECFMU   CORRECT?
         BZ    MSGNEW           YES, BRANCH
         OI    FLAGSGG,FOUTSUB  SUBCOMMAND GAINED CONTROL
         MVI   ENTRYPT,C'?'     NO ENTRY POINT YET
         SPACE 1
         L     R15,=A(READESD)  FORMAT THE ESD DATA
         BASR  R14,R15          ANY ESD DATA?
         B     *+8              NO, BRANCH
         B     MAP04            YES, BRANCH
         SPACE 1
MAPNOESD TM    FLAGSHH,FDELAYM  DELAYED MESSAGE AVAILABLE?
         BNO   MAP02            NO, BRANCH
         TM    PMEMMIN,X'80'    MEMBER LIST?
         BO    *+12             YES, BRANCH
         TM    FLAGSAA,FMEM#MEM MEMBER GROUP?
         BNO   MAP02            NO, BRANCH
         CLI   #MODLEN,0        ANY FILTERING?
         BH    NEWCMD           NO, BRANCH
         M$ERRST MSGBLANK
         M$ERRST DELAYMSG
         XI    FLAGSHH,FDELAYM  MESSAGE WAS WRITTEN
         SPACE 1
MAP02    LA    R1,MSGTEXT1               MESSAGE IDENTIFIER
         M$MSG (R1)
         B     MAPNOMSG
         SPACE 1
MAP04    LA    R4,#ESDPTR       ESD TABLE CHAIN POINTER
         OI    FLAGSGG,FOUTSOME SOME OUTPUT WAS GENERATED
         USING ESDENTRY,R4      BASE FOR TABLE
         TM    FLAGSHH,FDELAYM  ANY DELAYED MESSAGE AVAILABLE?
         BNO   MAPESD           NO, BRANCH
         M$ERRST MSGBLANK
         M$ERRST DELAYMSG
         XI    FLAGSHH,FDELAYM  MESSAGE WAS WRITTEN
         SPACE 2
MAPESD   MVC   MSGTEXT1(136),MSGBL132
         ICM   R4,B'1111',ESDLINK    END OF CHAIN?
         BZ    MAPLAST               YES, BRANCH
         SPACE 1
         CLI   #MAPOPT,X'04'         RELINK FORMAT?
         BE    MAP600                YES, BRANCH
         CLI   ESDTYPE,CODELR        EXTERNAL REFERENCE?
         BE    MAPLR                 YES, BRANCH
         CLI   ESDTYPE,CODEER        $UNRESOLVED EXTERNAL REFERENCE?
         BE    MAPER                 YES, BRANCH
         CLI   ESDTYPE,CODEWK        $UNRESOLVED WEAK EXTERNAL REF?
         BE    MAPWK                 YES, BRANCH
         CLI   ESDTYPE,C'*'          CLASS ENTRY?              GP APR18
         BE    MAPCLASS              YES, BRANCH               GP APR18
         SPACE 1
         CLC   ESDADDR(3),DIREPA     ENTRY POINT?
         BNE   *+10                  NO, BRANCH
         MVC   ENTRYPT,ESDNAME       SAVE THE ENTRY POINT NAME
         MVC   MSGTEXT1+4(8),ESDNAME
         UNPK  MSGTEXT1+14(7),ESDADDR(4)
         TR    MSGTEXT1+14(6),TRTABLE
         MVI   MSGTEXT1+20,X'40'     CLEAR GARBAGE BYTE
         UNPK  MSGTEXT1+22(7),ESDLEN(4)
         TR    MSGTEXT1+22(6),TRTABLE
         MVI   MSGTEXT1+28,X'40'     CLEAR GARBAGE BYTE
         SPACE 1
         TM    DIRATTR,ATTROVLY      OVERLAY PROGRAM?
         BZ    MAPNOVLY              NO, BRANCH
         SR    R0,R0
         IC    R0,ESDSEG#
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSGTEXT1+30(2),DOUBLE+6(2)
         B     MAPPRINT
         SPACE 1
MAPNOVLY MVC   DOUBLE(1),ESDXAFLG    COPY FLAG BYTE            GP APR18
         NI    DOUBLE,X'3F'-RSECT    GET AMODE/RMODE BITS      GP APR18
         CLI   DOUBLE,AMODE24        RMODE 24 AND AMODE 24?    GP APR18
         BNH   MAPROCHK              YES, GO CHECK READ-ONLY   GP APR18
         TM    DIRATTR2,DIR2LFMT     PROGRAM OBJECT?           GP APR18
         BZ    MAPDORMD              NO, GO SHOW RMODE         GP APR18
         TM    DIRATTR4,X'80'        NONMIGRATABLE?            GP APR18
         BO    MAPDOAMD              YES, RMODE NOT DETERMINED GP APR18
MAPDORMD EQU   *                                               GP APR18
         MVC   MSGTEXT1+30(5),=C'RMODE'
         MVC   MSGTEXT1+36(3),=C'ANY'
         TM    ESDXAFLG,RMODEANY         RMODE ANY?
         BO    MAPDOAMD                  YES, BRANCH          DRK JUL20
         MVC   MSGTEXT1+36(3),=C'64 '    RMODE 64              GP APR18
         TM    ESDXAFLG,RMODE64          RMODE 64?             GP APR18
         BO    MAPDOAMD                  YES, BRANCH          DRK JUL20
         MVC   MSGTEXT1+36(3),=C'24 '    RMODE 24
MAPDOAMD EQU   *                                               GP APR18
         MVC   MSGTEXT1+40(5),MAPLAMOD
         MVC   MSGTEXT1+46(3),=C'24 '
         TM    ESDXAFLG,AMODE31          AMODE 31?
         BNO   *+10                      NO, BRANCH
         MVC   MSGTEXT1+46(3),=C'31 '    AMODE 31
         TM    ESDXAFLG,AMODE64          AMODE 64?            DRK OCT02
         BNO   *+10                      NO, BRANCH           DRK OCT02
         MVC   MSGTEXT1+46(3),=C'64 '    AMODE 64             DRK OCT02
         TM    ESDXAFLG,AMODE24+AMODE31  AMODE ANY?
         BNO   *+10                      NO, BRANCH
         MVC   MSGTEXT1+46(3),=C'ANY'    AMODE ANY
MAPROCHK TM    ESDXAFLG,RSECT            RSECT?                GP APR18
         BNO   *+10                      NO, BRANCH            GP APR18
         MVC   MSGTEXT1+50(3),=C'R-O'    RSECT                 GP APR18
         B     MAPPRINT
         SPACE 2
MAPWK    MVC   INSERT#1(8),ESDNAME
         M$MSG L441$1
         B     MAPESD
         SPACE 2
MAPER    MVC   INSERT#1(8),ESDNAME
         M$MSG L442$1
         B     MAPESD
         SPACE 1                                               GP APR18
MAPCLASS MVC   MSGTEXT1+4(8),MAPCLSLB                          GP APR18
         MVC   MSGTEXT1+14(8),ESDNAME                          GP APR18
         UNPK  MSGTEXT1+24(7),ESDLEN(4)                        GP APR18
         TR    MSGTEXT1+24(6),TRTABLE                          GP APR18
         MVI   MSGTEXT1+30,X'40'     CLEAR GARBAGE BYTE        GP APR18
         TM    ESDXAFLG,X'40'        DEFERRED LOAD CLASS?      GP APR18
         BNO   MAPCHKRO              NO                        GP APR18
         MVC   MSGTEXT1+50(3),=C'R-O'                          GP APR18
MAPCHKRO TM    ESDXAFLG,X'40'        READ-ONLY CLASS?          GP APR18
         BNO   MAPPRINT              NO                        GP APR18
         MVC   MSGTEXT1+32(15),MAPDEFER                        GP APR18
         B     MAPPRINT                                        GP APR18
MAPCLSLB DC    CL8'*  CLASS'                                   GP APR18
MAPDEFER DC    CL16'(DEFERRED LOAD)'                           GP APR18
         SPACE 1
MAPLR    CLC   ESDADDR(3),DIREPA     ENTRY POINT?
         BNE   *+10                  NO, BRANCH
         MVC   ENTRYPT,ESDNAME       SAVE THE ENTRY POINT NAME
         MVC   MSGTEXT1+56(8),ESDNAME
         UNPK  MSGTEXT1+66(7),ESDADDR(4)
         TR    MSGTEXT1+66(6),TRTABLE
         MVI   MSGTEXT1+66+6,X'40'   CLEAR GARBAGE BYTE
         SPACE 1
MAPPRINT M$ERRST MSGTEXT1
         B     MAPESD
         SPACE 1
MAPLAST  M$ERRST MSGBLANK
MAPNOMSG UNPK  INSERT#1(7),DIREPA(4)
         TR    INSERT#1(6),TRTABLE
         MVC   INSERT#1+6(2),BLANKS
         MVI   MTLEN,8             RESTORE MTLEN FOR INSERT#1  GP JAN08
         MVC   INSERT#2(8),ENTRYPT NAME OF THE ENTRY POINT
         TR    INSERT#2(8),TRLINE     MAKE PRINTABLE
         LA    R1,L102$1              ASSUME NONE FOUND
         CLI   ENTRYPT,C'?'           ANY FOUND?
         BE    *+8                    NO, BRANCH
         LA    R1,L103$2              YES, SHOW ENTRY SYMBOL
         M$MSG (R1)
         SPACE 1
         UNPK  INSERT#1(7),DIRSTORE(4)
         TR    INSERT#1(6),TRTABLE
         MVC   INSERT#1+6(2),BLANKS
         ICM   R1,B'0111',DIRSTORE    ACTUAL MODULE LENGTH
         LA    R1,1023(,R1)           NEXT HIGHER
         SRL   R1,10                             1K VALUE
         CVD   R1,DOUBLE
         MVC   INSERT#2(8),=X'402020202120D2404040'
         ED    INSERT#2(6),DOUBLE+5
         M$MSG L104$2
         SPACE 1
         TM    DIRFLAG,X'80'      IS MODULE AN ALIAS?
         BZ    NEWCMD             NO, NO ALIAS INFORMATION
         CLI   #MAPOPT,X'01'      SHORT OR ENTRY POINT MAP?
         BH    NEWCMD             YES, DONE
         TM    FLAGSGG,FALINCON   NO ALIAS INFORMATION DEFAULT?
         BO    NEWCMD             YES, DONE
         EJECT
*        FIND THE CORRESPONDING MAIN MODULE
         MVI   STARTTR+2,X'01'    TTR=000001 (START OF DIRECTORY)
         XC    INSERT#1(8),INSERT#1  NO MAIN(S) FOUND
         SPACE 1
MAPAREAL BAS   R14,READDIR        GET NEXT DIRECTORY MEMBER
         B     MAPNREAL           LAST MEMBER PROCESSED
         SPACE 1
         TM    MEMFLAG,X'80'      THIS MODULE AN ALIAS?
         BO    MAPAREAL           YES, IGNORE
         CLC   DIRTTR,MEMTTR      TTR MATCH?
         BNE   MAPAREAL           NO, BRANCH
         SPACE 1
         MVC   INSERT#1(8),MEMNAME
         M$MSG L066$1
         B     MAPAREAL
         SPACE 2
MAPNREAL OC    INSERT#1(8),INSERT#1  ANY MAIN(S) FOUND?
         BNZ   NEWCMD                YES, QUIT
         M$MSG L860
         TM    FLAGSCC,RECFMU     LOAD MODULE?
         BNO   NEWCMD             NO, BRANCH
         MVC   INSERT#1(8),DIRREAL
         SPACE 1
         TM    DIRATTR,ATTRSCTR   SCATTER LOADED?
         BNO   *+10               NO, BRANCH
         MVC   INSERT#1(8),DIRREALS
         LA    R1,L861$1
         B     MSGNEW
         SPACE 1
* GENERATE JCL AND CONTROL CARDS TO LINKAGE EDIT A MODULE
MAP600   TM    DIRFLAG,X'80'                     ALIAS?
         BNO   MAP604                            NO, BRANCH
         MVI   STARTTR+2,X'01'                   READ THE DIRECTORY
         SPACE 1
MAP602   BAS   R14,READDIR                       GET NEXT MEMBER ENTRY
         B     MAP604                            END OF MEMBERS, BRANCH
         SPACE 1
         CLC   DIRTTR(3),MEMTTR                  THIS TTR?
         BNE   MAP602                            NO, LOOP
         TM    MEMTTR+3,X'80'                    ALIAS?
         BO    MAP602                            YES, LOOP
         L     R14,DIRPTRS                       START OF ENTRY
*        MVC   DIRNAME(DIREND-DIRNAME),0(R14)    REPLACE THIS  GP JUL15
         LA    R0,X'1F'                            TO FIX      GP JUL15
         IC    R15,11(,R14)                        S0C4-11     GP JUL15
         NR    R15,R0                            GET USER H/W  GP JUL15
         SLA   R15,1                             H/W -> BYTES  GP JUL15
         LA    R15,12(,R15)                      SOURCE LEN    GP JUL15
         LA    R0,DIRNAME                        TARGET ADDR   GP JUL15
         LA    R1,DIREND-DIRNAME                 TARGET LEN    GP JUL15
         MVCL  R0,R14                            LOAD ENTRY    GP JUL15
         SPACE 2
MAP604   DS    0H
         CLI   #MAPMCS,X'01'         IEBUPDTE SEPARATOR?      DRK MAR16
         BNE   MAP604J               NO                       DRK MAR16
         MVC   MSGTEXT1(136),MSGBL132                         DRK MAR16
         MVC   MSGTEXT1+4(12),MAPLUPDT           ./ ADD NAME= DRK MAR16
         MVC   MSGTEXT1+4+12(8),DIRNAME          MEMBER NAME  DRK MAR16
         M$ERRST MSGTEXT1                                     DRK MAR16
MAP604J  DS    0H
         MVC   MSGTEXT1+4(L'MAPLLKED),MAPLLKED   //LKED  EXEC PGM=IEWL,
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
         MVC   MSGTEXT1+4(L'MAPLPARM),MAPLPARM   //      PARM='NCAL, ..
         LA    R1,MSGTEXT1+4+L'MAPLPARM
         SPACE 1
         TM    DIRATTR,ATTRRENT                  REENTRANT?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+00               YES, ADD ,RENT
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR,ATTRREUS                  REUSABLE?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+05               YES, ADD ,REUS
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR+1,ATTRREFR                REFRESHABLE?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+10               YES, ADD ,REFR
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR,ATTROVLY                  OVERLAY?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+15               YES, ADD ,OVLY
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR,ATTRTEST                  TEST SYMBOLS?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+20               YES, ADD ,TEST
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR,ATTRSCTR                  SCATTER LOADED?
         BNO   *+14                              NO, BRANCH
         MVC   0(5,R1),MAPLATTR+25               YES, ADD ,SCTR
         LA    R1,5(,R1)
         SPACE 1
         TM    DIRATTR,ATTRLOAD                  ONLY LOADABLE?
         BNO   *+14                              NO, BRANCH
         MVC   0(3,R1),MAPLATTR+30               YES, ADD ,OL
         LA    R1,3(,R1)
         SPACE 1
         TM    DIRATTR+1,ATTRNE                  NOT EDITABLE?
         BNO   *+14                              NO, BRANCH
         MVC   0(3,R1),MAPLATTR+33               YES, ADD ,NE
         LA    R1,3(,R1)
         SPACE 1
         MVI   0(R1),C''''                       ADD FINAL QUOTE
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLSUT1),MAPLSUT1   //SYSUT1
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLSPRT),MAPLSPRT   //SYSPRINT
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLSLIB),MAPLSLIB   //SYSLIB
         MVC   MSGTEXT1+4+L'MAPLSLIB(44),DSNAME  ADD DSNAME
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLSMOD),MAPLSMOD   //SYSLMOD
         MVC   MSGTEXT1+4+L'MAPLSMOD(44),DSNAME  ADD DSNAME
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLSLIN),MAPLSLIN   //SYSLIN
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         MVC   MSGTEXT1+4(L'MAPLINCL),MAPLINCL   ADD "INCLUDE SYSLIB("
         MVC   MSGTEXT1+4+L'MAPLINCL(8),DIRNAME  ADD MEMBER NAME
         LA    R1,MSGTEXT1+4+L'MAPLINCL+8
         CLI   0(R1),X'40'
         BNE   *+8
         BCT   R1,*-8
         MVI   1(R1),C')'
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
         TM    DIRATTR,ATTROVLY                  OVERLAY MODULE?
         BO    MAP700                            YES, BRANCH
         SPACE 3
         LA    R4,#ESDPTR
         SPACE 1
MAP610   LA    R1,MSGTEXT1+4+8                   START OF CSECT NAMES
         LA    R0,MSGTEXT1+4+60                  END OF CSECT NAMES
         MVC   MSGTEXT1(136),MSGBL132
         MVC   MSGTEXT1+4+1(5),MAPLORD           ADD " ORDER"
         SPACE 1
MAP620   ICM   R4,B'1111',ESDLINK                NEXT ESD ELEMENT?
         BZ    MAP670                            NO, BRANCH
         CLI   ESDTYPE,CODESD                    CSECT?
         BE    MAP630                            YES, BRANCH
         CLI   ESDTYPE,CODELR                    EXTERNAL REFERENCE?
         BE    MAP630                            YES, BRANCH
         CLC   ESDNAME(8),MAPL$BLK               BLANK COMMON?
         BE    MAP620                            YES, BRANCH
         CLI   ESDTYPE,CODECM                    COMMON?
         BNE   MAP620                            NO, BRANCH
         B     MAP640                            NO, BRANCH
         SPACE 1
MAP630   CLC   ESDADDR(3),DIREPA                 ENTRY POINT?
         BNE   *+10                              NO, BRANCH
         MVC   ENTRYPT,ESDNAME                   YES, SAVE THE NAME
         CLI   ESDTYPE,CODELR                    EXTERNAL REFERENCE?
         BE    MAP620                            YES, BRANCH
         SPACE 1
MAP640   MVC   1(8,R1),ESDNAME                   ADD THE ESDNAME
         LA    R14,8(,R1)
         SPACE 1
         CLI   0(R14),X'40'                      BLANK?
         BNE   *+8                               NO, BRANCH
         BCT   R14,*-8
         SPACE 1
         TM    DIRATTR2,DIR2PAGA                 PAGE ALIGN?  ABL NOV86
         BNO   MAP660                            NO, BRANCH   ABL NOV86
         TM    ESDADDR+1,X'0F'                   POSSIBLE 4K MULTIPLE?
         BNZ   MAP660                            NO, BRANCH
         TM    ESDADDR+2,X'FF'                   4K MULTIPLE?
         BNZ   MAP660                            NO, BRANCH
         MVC   1(3,R14),MAPLPAG                  YES, ADD "(P)"
         LA    R14,3(,R14)
         SPACE 1
MAP660   MVI   1(R14),C','                       ADD A COMMA
         LA    R1,1(,R14)
         CR    R1,R0                             END OF CARD?
         BNH   MAP620                            NO, BRANCH
         SPACE 2
         MVI   0(R1),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         B     MAP610
         SPACE 2
MAP670   CLI   MSGTEXT1+4+9,X'40'                ANY TEXT TO OUTPUT?
         BE    MAP800                            NO, BRANCH
         MVI   0(R1),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         B     MAP800
         SPACE 2
MAP700   MVC   STARTTR(3),DIRSTART               ADDRESS OF NOTELIST
         L     R15,=V(EXCP)
         BASR  R14,R15
         LA    R1,L751                           NOTELIST NOT FOUND
         LTR   R15,R15                           ANY ERROR?
         BP    MSGNEW                            YES, BRANCH
         SPACE 1
         LR    R2,R0                             START OF RECORD
         LR    R5,R0                             START OF RECORD
         LA    R14,24(,R2)                       FIRST SEGMENT
         LA    R0,4                              INCREMENT
         LR    R1,R2
         A     R1,LS                             LAST SEGMENT
         SR    R1,R0                             FOR BXLE
         SR    R15,R15
         SPACE 1
MAP710   LA    R15,1(,R15)                       NEXT SEGMENT #
         STC   R15,3(,R14)                       STORE IN SEGTAB
         BXLE  R14,R0,MAP710                     DO ALL ENTRIES
         SPACE 2
         MVI   0(R14),X'FF'                      MARK END OF TABLE
         MVC   FULLWORD,=F'1'                    REGION = 1
         LA    R2,24(,R5)                        BEGIN SEGMENT 1
         LA    R6,8(,R5)                         BEGIN REGION 1
         SPACE 1
MAP720   SR    R1,R1
         IC    R1,0(,R6)                         # OF LAST SEGMENT
         LTR   R1,R1                             END OF STRUCTURE?
         BZ    MAP800                            YES, BRANCH
         SLL   R1,2                              SEGMENT * 4
         LA    R3,20(R1,R5)                      LAST SEGMENT
         SPACE 2
MAP724   LA    R4,#ESDPTR                        START OF ESD ELEMENTS
         SPACE 1
MAP730   LA    R1,MSGTEXT1+4+8                   START OF CSECT NAMES
         LA    R0,MSGTEXT1+4+62                  END OF CSECT NAMES
         MVC   MSGTEXT1(136),MSGBL132
         MVC   MSGTEXT1+4+1(6),MAPLINS           ADD " INSERT"
         SPACE 1
MAP732   ICM   R4,B'1111',ESDLINK                NEXT ESD ELEMENT?
         BZ    MAP742                            NO, BRANCH
         CLC   ESDSEG#(1),3(R2)                  THIS SEGMENT?
         BNE   MAP732                            NO, BRANCH
         CLI   ESDTYPE,CODESD                    CSECT?
         BE    MAP734                            YES, BRANCH
         CLI   ESDTYPE,CODELR                    EXTERNAL REFERENCE?
         BE    MAP734                            YES, BRANCH
         CLC   ESDNAME(8),MAPL$BLK               BLANK COMMON?
         BE    MAP732                            YES, BRANCH
         CLI   ESDTYPE,CODECM                    COMMON?
         BNE   MAP732                            NO, BRANCH
         B     MAP740
         SPACE 1
MAP734   CLC   ESDADDR(3),DIREPA                 ENTRY POINT?
         BNE   *+10                              NO, BRANCH
         MVC   ENTRYPT,ESDNAME                   YES, SAVE THE NAME
         CLI   ESDTYPE,CODELR                    EXTERNAL REFERENCE?
         BE    MAP732                            YES, BRANCH
         SPACE 1
MAP740   MVC   1(8,R1),ESDNAME                   ADD THE ESDNAME
         LA    R14,8(,R1)
         SPACE 1
         CLI   0(R14),X'40'                      BLANK?
         BNE   *+8                               NO, BRANCH
         BCT   R14,*-8
         SPACE 1
         MVI   1(R14),C','                       ADD A COMMA
         LA    R1,1(,R14)
         CR    R1,R0                             END OF CARD?
         BNH   MAP732                            NO, BRANCH
         SPACE 2
         MVI   0(R1),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         B     MAP730
         SPACE 1
MAP742   CLI   MSGTEXT1+4+9,X'40'                ANY TEXT TO OUTPUT?
         BE    MAP750                            NO, BRANCH
         MVI   0(R1),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
MAP750   CLI   4(R2),X'FF'                       END OF SEGTAB?
         BE    MAP800                            YES, BRANCH
         CR    R2,R3                             END OF REGION?
         BE    MAP764                            YES, BRANCH
         SPACE 1
         MVC   MSGTEXT1+4+1(7),MAPLOVER          ADD " OVERLAY"
         MVC   MSGTEXT1+4+1+7+1(6),MAPLREG+1     ADD " REGION"
         MVC   MSGTEXT1+4+1+7+1+6(1),FULLWORD+3  ADD REGION NUMBER
         OI    MSGTEXT1+4+1+7+1+6,X'F0'          MAKE PRINTABLE
         SPACE 1
         SR    R1,R1
         ICM   R1,B'0001',4(R2)                  ANY PREVIOUS SEGMENT?
         BZ    MAP760                            NO, BRANCH
         MVC   MSGTEXT1+4+1+7+1(6),MAPLOVLY      ADD " OVLY"
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSGTEXT1+4+1+7+1+4(3),DOUBLE+6(2) ADD SEGMENT NUMBER
MAP760   M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 1
MAP764   LA    R0,4
         LR    R1,R3
         BXLE  R2,R0,MAP724                      DO EACH SEGMENT
         SPACE 2
         LA    R6,2(,R6)
         CLI   0(R6),X'00'                       ANY SEGMENTS IN RGN?
         BE    MAP800                            NO, BRANCH
         L     R1,FULLWORD
         LA    R0,4
         CR    R1,R0                             FOURTH REGION DONE?
         BNL   MAP800                            YES, BRANCH
         LA    R1,1(,R1)                         NEXT REGION
         ST    R1,FULLWORD
         MVC   MSGTEXT1+4+1(7),MAPLOVER          ADD " OVERLAY"
         MVC   MSGTEXT1+4+1+7+1(6),MAPLREG+1     ADD "REGION"
         STC   R1,MSGTEXT1+4+1+7+1+6             ADD REGION NUMBER
         OI    MSGTEXT1+4+1+7+1+6,X'F0'          MAKE PRINTABLE
         MVC   MSGTEXT1+4+1+7+1+6+1(8),MAPLREG   ADD "(REGION)"
         MVC   MSGTEXT1+4+1+7+1(6),MAPLREG+1     ADD "REGION"
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         B     MAP720
         SPACE 2
MAP800   LA    R2,DIRAPF               POINT TO APF INFORMATION
         SPACE 1
         TM    DIRATTR,ATTRSCTR        SCATTER FORMAT?
         BNO   *+8                     NO, BRANCH
         LA    R2,8(,R2)               YES, ADD SCATTER SIZE BYTES
         SPACE 1
         TM    DIRFLAG,X'80'           ALIAS?
         BO    MAP802                  YES, BRANCH
***PDSMAN CHANGES: MAP JCL (APF AND SSI)                      ABL NOV86
         TM    5(R2),X'0F'             PDSMAN DATE?           ABL NOV86
         BO    MAP803                  YES, BRANCH            ABL NOV86
         TM    6(R2),X'0F'             PDSMAN DATE?           ABL NOV86
         BO    MAP803                  YES, BRANCH            ABL NOV86
         TM    4+5(R2),X'0F'           PDSMAN DATE AND SSI?   ABL NOV86
         BO    MAP803                  YES, BRANCH            ABL NOV86
         TM    4+6(R2),X'0F'           PDSMAN DATE AND SSI?   ABL NOV86
         BO    MAP803                  YES, BRANCH            ABL NOV86
         CLI   8(R2),0                 CONVERTED ALIAS ENTRY?
*        BE    *+8                     NO, BRANCH
         B     *+8                     BRANCH                 DRK JAN98
MAP802   LA    R2,11(,R2)              ADD ALIAS LENGTH
MAP803   DS    0H                                             ABL NOV86
         SPACE 1
         TM    DIRATTR2,DIRAOSLE       VS LINKAGE EDITOR?
         BNO   MAP804                  NO, BRANCH
         SPACE 1
         TM    DIRATTR2,DIR2SSI        SSI PRESENT?
         BNO   MAP820                  NO, SKIP SSI PROCESSING
         SPACE 1
MAP804   LA    R2,1(,R2)               ROUND UP TO HALFWORD
         N     R2,=F'-2'
         SPACE 1
         CLC   ZERO,0(R2)              ZERO?
         BE    MAP820                  YES, NO SSI
         CLC   =F'-1',0(R2)            FFFFFFFF?
         BE    MAP820                  YES, NO SSI
         SPACE 1
         MVC   MSGTEXT1+5(6),MAPLSET   ADD " SETSSI"
         UNPK  MSGTEXT1+5+6+2(9),0(5,R2)
         TR    MSGTEXT1+5+6+2(8),TRTABLE
         MVI   MSGTEXT1+5+6+2+8,X'40'
         LA    R2,4(,R2)               ADD SSI SIZE
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
MAP820   TM    DIRATTR2,DIRAOSLE           VS LINKAGE EDITOR?
         BZ    MAP860                      NO, CANNOT BE AUTHORIZED
         SR    R1,R1
         IC    R1,DIRATTR3                 AMODE BITS
         TM    DIRFLAG,X'80'               ALIAS?
         BNO   *+8                         NO, BRANCH
         SRL   R1,2                        YES, SHIFT AMODE BITS
         STC   R1,MODESAVE                 SAVE CURRENT AMODE
         TM    DIRATTR3,DIRRMANY           RMODE ANY?
         BNO   *+8                         NO, BRANCH
         OI    MODESAVE,DIRRMANY           YES, SET RMODE AGAIN
         SPACE 1
         TM    MODESAVE,DIRRMANY+DIRAM31+DIRAM64 UNUSUAL RMODE/AMODE?
         BZ    MAP840                      NO, BRANCH
         MVC   DOUBLE(8),BLANKS            RMODE/AMODE FILLER
         MVC   DOUBLE(3),=C'24 '           MOVE IN THE RMODE TEXT
         TM    MODESAVE,DIRRMANY           RMODE ANY?
         BZ    *+10                        NO, BRANCH
         MVC   DOUBLE(3),=C'ANY'           MOVE IN THE RMODE TEXT
         MVC   DOUBLE+4(3),=C'24 '         MOVE IN THE AMODE TEXT
         TM    MODESAVE,DIRAM31            AMODE 31?
         BZ    *+10                        NO, BRANCH
         MVC   DOUBLE+4(3),=C'31 '         MOVE IN THE AMODE TEXT
         TM    MODESAVE,DIRAM64            AMODE 64?
         BNO   *+10                        NO, BRANCH
         MVC   DOUBLE+4(3),=C'64 '         MOVE IN THE AMODE TEXT
         TM    MODESAVE,DIRAM64+DIRAM31    AMODE ANY?
         BNO   *+10                        NO, BRANCH
         MVC   DOUBLE+4(3),=C'ANY'         MOVE IN THE AMODE TEXT
         MVC   MSGTEXT1+4(L'MAPLMODE),MAPLMODE
         LA    R1,MSGTEXT1+4+L'MAPLMODE
         MVC   0(3,R1),DOUBLE              ADD 24/ANY
         CLI   2(R1),X'40'                 ANY DATA?
         BE    *+8                         NO, BRANCH
         LA    R1,1(,R1)                   YES, ADD 1
         MVC   2(L'MAPLAMO,R1),MAPLAMO     ADD "),AMODE("
         LA    R1,2+L'MAPLAMO(,R1)
         MVC   0(3,R1),DOUBLE+4            ADD 24/31/64 OR ANY
         CLI   2(R1),X'40'                 ANY DATA?
         BE    *+8                         NO, BRANCH
         LA    R1,1(,R1)                   YES, ADD 1
         MVI   2(R1),C')'                  ADD FINAL PARENTHESIS
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
MAP840   TM    DIRATTR2,DIRAPFLG       APF DATA PRESENT AND VALID?
         BNO   MAP860                  NO, BRANCH
         SPACE 1
         LA    R1,L721                 ASSUME APF LENGTH INCORRECT
         CLI   0(R2),1                 APF DATA LENGTH OK?
         BNE   MAP860                  NO, BRANCH
         SPACE 3
         LA    R1,L021                 ASSUME AUTHORIZED
         CLI   1(R2),1                 AUTHORIZED?
         BL    MAP860                  NO, BRANCH
         MVC   MSGTEXT1+4(L'MAPLAUTH),MAPLAUTH
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
MAP860   MVC   MSGTEXT1+4(L'MAPLENTR),MAPLENTR
         CLI   ENTRYPT,C'?'           ANY ENTRY POINT?
         BE    *+10                   NO, BRANCH
         MVC   MSGTEXT1+4+L'MAPLENTR-8(8),ENTRYPT
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         SPACE 2
         MVC   ENTRYPT(8),DIRNAME      DEFAULT MODULE NAME
         MVI   STARTTR+2,X'01'         TTR=000001 (START OF DIRECTORY)
         SPACE 2
MAP880   LA    R2,MSGTEXT1+4+8                   START OF CSECT NAMES
         LA    R3,MSGTEXT1+4+62                  END OF CSECT NAMES
         MVC   MSGTEXT1(136),MSGBL132
         MVC   MSGTEXT1+4+1(5),MAPLALIA          ADD " ALIAS"
         SPACE 1
MAP890   BAS   R14,READDIR        GET NEXT DIRECTORY MEMBER
         B     MAP910             LAST MEMBER PROCESSED
         SPACE 1
         CLC   DIRTTR,MEMTTR      TTR MATCH?
         BNE   MAP890             NO, BRANCH
         TM    MEMFLAG,X'80'      ALIAS ENTRY FOUND?
         BO    MAP900             YES, BRANCH
         TM    DIRFLAG,X'80'      ALIAS ORIGINALLY?
         BNO   MAP890             NO, BRANCH
         MVC   ENTRYPT(8),MEMNAME SAVE REAL MEMBER NAME
         B     MAP890
         SPACE 1
MAP900   MVC   1(8,R2),MEMNAME                   ADD THE ALIAS NAME
         LA    R14,8(,R2)
         SPACE 1
         CLI   0(R14),X'40'                      BLANK?
         BNE   *+8                               NO, BRANCH
         BCT   R14,*-8
         SPACE 1
         MVI   1(R14),C','                       ADD A COMMA
         LA    R2,1(,R14)
         CR    R2,R3                             END OF CARD?
         BNH   MAP890                            NO, BRANCH
         SPACE 2
         MVI   0(R2),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         MVC   MSGTEXT1(136),MSGBL132
         B     MAP880
         SPACE 2
MAP910   CLI   MSGTEXT1+4+9,X'40'                ANY TEXT TO OUTPUT?
         BE    MAP920                            NO, BRANCH
         MVI   0(R2),X'40'                       CLEAR THE LAST COMMA
         M$ERRST MSGTEXT1
         SPACE 1
MAP920   MVC   MSGTEXT1(136),MSGBL132
         MVC   MSGTEXT1+5(L'MAPLNAME),MAPLNAME
         MVC   MSGTEXT1+5+8(8),ENTRYPT
         LA    R1,MSGTEXT1+5+8+8
         SPACE 1
         CLI   0(R1),X'40'                       BLANK?
         BNE   *+8                               NO, BRANCH
         BCT   R1,*-8
         SPACE 1
         MVC   1(3,R1),MAPLREP
         SPACE 1
         M$ERRST MSGTEXT1
         SPACE 1
         CLI   #MAPMCS,X'01'         IEBUPDTE SEPARATOR?      DRK MAR16
         BNE   MAP930                NO                       DRK MAR16
         MVC   MSGTEXT1(136),MSGBL132                         DRK MAR16
         MVC   MSGTEXT1+4(15),MAPLUPDE  ./ ADD TERM=YES ERROR DRK MAR16
         M$ERRST MSGTEXT1                                     DRK MAR16
MAP930   DS    0H
         B     NEWCMD
MAPLUPDT DC    C'./ ADD NAME='
MAPLUPDE DC    C'./ ADD TERM=YES'  <--- FORCE END OF ./ ADD
MAPLLKED DC    C'//LKED   EXEC  PGM=IEWL,'
MAPLPARM DC    C'//       PARM=''NCAL,MAP,LIST,LET'
MAPLATTR DC    C',RENT,REUS,REFR,OVLY,TEST,SCTR,OL,NE'
*MAPLSUT1 DC   C'//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20))'
MAPLSUT1 DC    C'//SYSUT1   DD  UNIT=&TUNIT,SPACE=(1024,(200,20))'
MAPLSPRT DC    C'//SYSPRINT DD  SYSOUT=*'
MAPLSLIB DC    C'//SYSLIB   DD  DISP=SHR,DSN='
MAPLSMOD DC    C'//SYSLMOD  DD  DISP=SHR,DSN='
MAPLSLIN DC    C'//SYSLIN   DD  *'
MAPLINCL DC    C' INCLUDE SYSLIB('
MAPLAUTH DC    C' SETCODE AC(1)'
MAPLENTR DC    C' ENTRY   ????????'
MAPLMODE DC    C' MODE    RMODE('
MAPLAMO  DC    C'),AMODE('
MAPLNAME DC    C'NAME'
MAPLSET  DC    C'SETSSI'
MAPLALIA DC    C'ALIAS'
MAPLORD  DC    C'ORDER'
MAPLPAG  DC    C'(P)'
MAPLREP  DC    C'(R)'
MAPLREG  DC    C'(REGION)'
MAPLOVER DC    C'OVERLAY'
MAPLOVLY DC    C'OVLY'
MAPLINS  DC    C'INSERT'
         DROP  R4
         SPACE 3
*
*        ESD SCAN SUBROUTINE
*
         SPACE 2
READESD  STM   R14,R12,ESDIDRSV   SAVE REGISTERS FOR RETURN
         LR    R8,R15             ENTRY POINT ADDRESS
         USING READESD,R8         SUBROUTINE BASE REGISTER
         TM    DIRATTR+1,ATTRNE   REDITABLE MODULE?            GP JAN08
         BO    ESDNOED            NO, AVOID UNNECESSARY I/O    GP JAN08
         LA    R2,#ESDPTR         ROOT OF ESD CHAIN
         TM    DS1SMSFG,DS1PDSE   PDSE DATASET?               DRK AUG05
         AIF   ('&MVSLEV' LT 'MVS510').NOBAPI3                 GP SEP05
         BO    ESDBAPI0           YES, NEED BINDER API         GP SEP05
         AGO   .BAPIOK3                                        GP SEP05
.NOBAPI3 ANOP  ,                                               GP SEP05
         BO    ESDEXIT            YES, LEAVE                  DRK AUG05
.BAPIOK3 ANOP  ,                                               GP SEP05
         MVC   STARTTR(3),DIRTTR  FIRST TTR
         SPACE 1
ESDEXCP  L     R15,=V(EXCP)
         BASR  R14,R15
         B     *+4(R15)           PROCESS RETURN CODE
         B     ESDEXCP1             00 - GOOD READ
         B     ESDLAST              04 - END OF MEMBER
         B     ESDLAST              08 - END OF DATA SET
         B     NEWCMD               12 - I/O ERROR
         SPACE 1
ESDEXCP1 LR    R3,R0              START OF RECORD
         CLI   0(R3),X'40'        TEST SYM RECORD?
         BE    ESDEXCP            YES, SKIP RECORD
         CLI   0(R3),X'20'        CESD RECORD?
         BNE   ESDLAST            NO, BRANCH
         SPACE 1
         LH    R6,4(,R3)          RELATIVE # OF 1ST ESD ID
         LH    R5,6(,R3)          LENGTH OF DATA IN BUFFER
         LA    R3,8(,R3)          START OF ESD DATA
         AR    R5,R3
         LA    R4,16              LENGTH OF ONE ENTRY
         SR    R5,R4
         SPACE 2
         USING ESDNAME,R3
ESDSCAN  CLI   ESDTYPE,CODESEG    SEGTAB OR ENTAB?             GP APR18
         BE    *+8                YES, PRESERVE ENTRY TYPE     GP APR18
         NI    ESDTYPE,X'0F'
         CLI   #MAPOPT,X'03'      ENTRY POINT ONLY?
         BE    ESDSCAN2           YES, BRANCH
         CLC   ##SUBCOM(8),$ATTL  ATTRIBUTE ENTRY(NAME) OPERAND?
         BE    ESDSCAN2           YES, BRANCH
         CLC   ##SUBCOM(8),$ALI   ALIAS SEARCH REQUEST?
         BNE   ESDMAP             NO, BRANCH
ESDSCAN2 CLI   ESDTYPE,CODESD     VALID EXTERNAL SYMBOL?
         BE    ESDCHK             YES, BRANCH
         CLI   ESDTYPE,CODELR     ANOTHER VALID ENTRY
         BNE   NEXTESD            NO, GET THE NEXT ESD
         SPACE 1
ESDCHK   TM    DIRATTR,ATTROVLY   OVERLAY ATTRIBUTE?
         BNO   ESDCHK1            NO, BRANCH
         CLI   ESDSEG#,1          SYMBOL IN ROOT SEGMENT?
         BNE   NEXTESD            NO, IGNORE
ESDCHK1  CLC   ESDADDR(3),DIREPA  THIS ENTRY POINT ADDRESS?
         BNE   ESDCHK2            NO, BRANCH
         MVC   ENTRYPT,ESDNAME    YES, ENTRY POINT NAME IF NO ESD MATCH
         CLI   #MAPOPT,X'03'      ENTRY POINT MAP ONLY?
         BE    ESDUSE3            YES, BRANCH
ESDCHK2  CLC   ESDNAME,DIRNAME    THIS NAME?
         BNE   NEXTESD            NO, BRANCH
         CLI   #MAPOPT,X'03'      ENTRY POINT MAP ONLY?
         BE    NEXTESD            YES, BRANCH
         IC    R0,ESDXAFLG        GET MVS/XA ESD FLAGS
         SR    R1,R1
         ICM   R1,B'0111',ESDADDR GET SYMBOL OFFSET
         ST    R6,ESDIDRSV+4      RETURN ESDID IN REG 15
         STM   R0,R1,ESDIDRSV+4+4 RETURN ESD FLAGS, OFFSET IN REGS 0,1
         MVC   ENTRYPT,ESDNAME    USE THIS ESDNAME FOR THE ENTRY POINT
         B     ESDOUT             FOUND THE SYMBOL
         SPACE 1
ESDMAP   CLC   ##SUBCOM(8),$IFX   IF SUBCOMMAND?
         BNE   ESDMAP2            NO, BRANCH
         TM    #MODOPT,X'01'      WKEXTERN?
         BNO   ESDMAP0            NO, BRANCH
         CLI   ESDTYPE,CODEWK     FOUND?
         BE    ESDUSE2            YES, BRANCH
         B     NEXTESD            NO, BRANCH
         SPACE 1
ESDMAP0  TM    #MODOPT,X'02'      EXTERN?
         BNO   ESDMAP2            NO, BRANCH
         CLI   ESDTYPE,CODEER     FOUND?
         BE    ESDUSE2            YES, BRANCH
         B     NEXTESD            NO, BRANCH
         SPACE 1
ESDMAP2  CLI   ESDTYPE,CODESEG    THIS SEGTAB/ENTAB ENTRY?     GP APR18
         BE    ESDUSE1            YES, BRANCH
         CLI   ESDTYPE,CODESD     SD ENTRY?
         BE    ESDUSE2            YES, BRANCH
         CLI   ESDTYPE,CODECM     COMMON BLOCK CODE?
         BE    ESDUSE0            YES, BRANCH
         CLC   ##SUBCOM(8),$MAP   MAP SUBCOMMAND?
         BNE   ESDMAP4            NO, BRANCH
         CLI   ESDTYPE,CODEER     $UNRESOLVED EXTERNAL REFERENCE?
         BE    ESDUSE2            YES, BRANCH
         CLI   #MAPOPT,X'02'      SHORT MAP?
         BE    ESDMAP4            YES, BRANCH
         CLI   ESDTYPE,CODEWK     $UNRESOLVED WEAK EXTERNAL REFERENCE?
         BE    ESDUSE2            YES, BRANCH
         SPACE 1
ESDMAP4  CLI   ESDTYPE,CODELR     LR ENTRY?
         BNE   ESDMAPPC           NO, BRANCH
         CLI   #MAPOPT,X'02'      SHORT MAP?
         BL    ESDUSE2            NO, BRANCH
         CLI   #MAPOPT,X'04'      RELINK?
         BE    ESDUSE2            YES, BRANCH
         CLC   ESDADDR(3),DIREPA  THIS ENTRY POINT?
         BE    ESDUSE2            NO, BRANCH
ESDMAPPC CLI   ESDTYPE,CODEPC     PC ENTRY?
         BNE   NEXTESD            NO, BRANCH
         MVC   ESDNAME,MAPL$PRI        PRIVATE CODE
         B     ESDUSE2
         SPACE 1
ESDUSE0  CLC   ESDNAME(8),BLANKS                   BLANK COMMON?
         BNE   ESDUSE2                             NO, BRANCH
         MVC   ESDNAME(8),MAPL$BLK                 YES, USE $BLKCOM
         B     ESDUSE2
         SPACE 1
ESDUSE1  EQU   *                                               GP APR18
         MVC   ESDNAME(8),MAPL$SEG                 ASSUME SEGMENT TABLE
         OC    ESDADDR(3),ESDADDR                  CORRECT?
         BZ    ESDUSE2                             YES, BRANCH
         MVC   ESDNAME(8),MAPL$ENT                 NO, ENTRY TABLE
ESDUSE2  SR    R1,R1
         CLC   ##SUBCOM(8),$LIS                    LIST SUBCOMMAND?
         BE    ESDUSE3                             YES, BRANCH
         ICM   R1,B'0001',#MODLEN                  ANY MODULE FILTER?
         BZ    ESDUSE3                             NO, BRANCH
         BCTR  R1,0                                MACHINE LENGTH
         CLC   ESDNAME(*-*),#MODTXT                <<EXECUTED>>
         EX    R1,*-6                              THIS PARTIAL NAME?
         BNE   NEXTESD                             NO, BRANCH
ESDUSE3  BAS   R14,GETESD
         ST    R1,ESDLINK-ESDENTRY(R2)             SAVE LINK POINTER
         STH   R6,ESDID-ESDENTRY(R1)               SAVE ESD ID
         USING ESDNAME,R3                                      GP APR18
         CLI   ESDNAME+1,C'_'            CLASS ENTRY?          GP APR18
         BNE   ESDCLSOK                  NO                    GP APR18
         CLI   ESDNAME,C'B'              CLASS ENTRY?          GP APR18
         BL    ESDCLSOK                  NO                    GP APR18
         CLI   ESDNAME,C'C'              CLASS ENTRY?          GP APR18
         BH    ESDCLSOK                  NO                    GP APR18
         MVI   ESDTYPE,C'*'              YES, FLAG THIS        GP APR18
ESDCLSOK EQU   *                                               GP APR18
         MVC   ESDNAME-ESDENTRY(LENESD1,R1),0(R3)  SAVE ESD ENTRY
         LR    R2,R1                               CHAIN TO NEXT ONE
NEXTESD  EQU   *
         AIF   ('&MVSLEV' LT 'MVS510').NOBAPI5                 GP SEP05
         TM    DS1SMSFG,DS1PDSE   PDSE DATASET?                GP SEP05
         BO    BESDRTRN           YES, NEED BINDER API         GP SEP05
.NOBAPI5 ANOP  ,                                               GP SEP05
         LA    R6,1(R6)
         BXLE  R3,R4,ESDSCAN
         B     ESDEXCP            GET NEXT ESD RECORD
         DROP  R3
         SPACE 2
         USING ESDENTRY,R2
ESDLAST  SR    R0,R0              REQUEST ESD SORTING          GP APR18
ESDLAST2 EQU   *                                               GP APR18
         MVC   MSGTEXT1(3),L740
         L     R14,ESDIDRSV
         LA    R2,#ESDPTR
         OC    #ESDPTR,#ESDPTR    ANY ESD DATA AVAILABLE?
         BZ    ESDNOED            NO, BRANCH                   GP APR18
         LTR   R0,R0              NEED TO SORT THE RESULTS?    GP APR18
         BZ    ESDSORT            YES, BRANCH                  GP APR18
         B     ESDOUT             NO, SKIP SORT                GP APR18
ESDNOED  EQU   *                                               GP JAN08
         CLI   #MODLEN,0          ANY ESD FILTERING?
         BH    ESDEXIT            YES, BRANCH
         MVC   MSGTEXT1(3),L703
         B     ESDEXIT
         SPACE 1
ESDSORT  L     R2,ESDLINK
         ICM   R1,B'1111',ESDLINK END OF ESD ENTRIES?
         BZ    ESDOUT             YES, BRANCH
         SPACE 1
ESDSORT2 TM    DIRATTR,ATTROVLY             OVERLAY ATTRIBUTE?
         BNO   ESDNOSEG
         CLC   ESDSEG#,ESDSEG#-ESDENTRY(R1) CHECK ENTRY SEGMENT
         BL    ESDSORT3
         BH    ESDSWAP
         SPACE 1
ESDNOSEG CLC   ESDADDR,ESDADDR-ESDENTRY(R1)
         BL    ESDSORT3
         BH    ESDSWAP
         CLC   ESDTYPE,ESDTYPE-ESDENTRY(R1)
         BL    ESDSORT3
         BH    ESDSWAP
         CLC   ESDNAME,ESDNAME-ESDENTRY(R1)
         BNH   ESDSORT3
         SPACE 1
ESDSWAP  XC    ESDNAME(LENESD2),ESDNAME-ESDENTRY(R1)
         XC    ESDNAME-ESDENTRY(LENESD2,R1),ESDNAME
         XC    ESDNAME(LENESD2),ESDNAME-ESDENTRY(R1)
         SPACE 1
ESDSORT3 ICM   R1,B'1111',ESDLINK-ESDENTRY(R1)
         BNZ   ESDSORT2
         B     ESDSORT
         DROP  R2
         SPACE 2
GETESD   MVI   SUBPOOLT,21
         LA    R0,LENESD
         ICM   R0,B'1000',SUBPOOLT   SUBPOOL 21
         GETMAIN R,LV=(0)
         XC    0(LENESD,R1),0(R1)
         BR    R14
         SPACE 1
ESDOUT   L     R14,ESDIDRSV
         LA    R14,4(,R14)         ADJUST EXIT ADDRESS
ESDEXIT  LM    R15,R12,ESDIDRSV+4
         BR    R14                 EXIT
MAPLAMOD DC    C'AMODE'
MAPL$BLK DC    CL8'$BLKCOM'
MAPL$PRI DC    CL8'$PRIVATE'
MAPL$SEG DC    CL8'$SEGTAB'
MAPL$ENT DC    CL8'$ENTAB'
         AIF   ('&MVSLEV' LT 'MVS510').NOBAPI4                 GP SEP05
ESDBAPI0 L     R15,CVTPTR(,R0)                                 GP SEP05
         CLI   CVTDCB-CVT(R15),X'9B'                           GP SEP05
         BNE   ESDEXIT               OS IS TOO OLD FOR THIS    GP SEP05
         TM    CVTOSLV1-CVT(R15),CVTH5510  ARBITRARY TEST      GP SEP05
         BNO   ESDEXIT               OS IS TOO OLD FOR THIS    GP SEP05
         LA    R0,1                                            GP SEP05
         SLL   R0,31                 GET A HIGH BIT            GP SEP05
         LA    R15,ESDBAPI2          SET ADDRESS               GP SEP05
         OR    R15,R0                SET AMODE=31 FOR API      GP SEP05
         BSM   0,R15                 SET 31-BIT ADDRESSING     GP SEP05
ESDBAPI2 BAS   R14,ESDBAPI4                                    GP SEP05
         LA    R15,ESDLAST2          R0 SET BEFORE PR          GP APR18
         BSM   0,R15                 SET 24-BIT ADDRESSING     GP SEP05
         SPACE 1                                               GP SEP05
ESDBAPI4 BAKR  R14,0                 SAVE STATUS               GP SEP05
         LHI   R0,IDRAPIWL                                     GP APR18
         GETMAIN RU,LV=(0),LOC=(31,64),SP=21                   GP SEP05
         LR    R13,R1                                          GP SEP05
         LR    R0,R1                                           GP SEP05
         LHI   R1,IDRAPIWL                                     GP APR18
         SR    R15,R15                                         GP SEP05
         MVCL  R0,R14                ZERO NEW STORAGE          GP SEP05
         USING IDRAPIWK,R13                                    GP SEP05
         MVC   4(4,R13),=CL4'F1SA'   FLAG LINKAGE STACK USAGE  GP JUN10
         SPACE 1                                               GP SEP05
         MVI   IDRBLDL+1,1           NEED BLDL FORMAT,         GP SEP05
         MVI   IDRBLDL+3,76           NOT STOW FORMAT          GP SEP05
         MVC   IDRBLDL+4(8),DIRNAME   FOR DESERV GET           GP SEP05
         BLDL  INDCB,IDRBLDL                                   GP SEP05
         LTR   R15,R15               ALL AS IT SHOULD BE?      GP SEP05
         BNZ   ESDBAPIX              NO, THAT'S STRANGE        GP SEP05
         SPACE 1                                               GP SEP05
         MVC   BNDDATA(ISITMGDL),ISITMGDE                      GP SEP05
         USING ISM,BNDDATA                                     GP SEP05
         ISITMGD DCB=INDCB,DATATYPE=YES,MF=(E,BNDDATA)         GP SEP05
         TM    ISMOFLG3,ISMDTPGM     PROGRAM OBJECT LIBRARY?   GP SEP05
         BNO   ESDBAPIX              NO, SKIP BINDER API CALLS GP SEP05
         TM    IDRBLDL+27,DIRNOED    NOT EDITABLE?             GP JUN10
         BO    ESDBAPIX              YES, CANNOT GET A MAP     GP JUN10
         SPACE 1                                               GP JUN10
         MVC   BNDDATA(DESRVGL),DESRVGE                        GP JUN10
         DESERV FUNC=GET,            GET A DIRECTORY ENTRY     GP JUN10+
               AREAPTR=BNDCURSR,     RETURNED POINTER AREA     GP JUN10+
               BYPASS_LLA=YES,       GET LATEST FROM DISK      GP JUN10+
               CONN_ID=MODDEPTR,     SAVE FOR RELEASE          GP JUN10+
               CONN_INTENT=HOLD,     COMPULSORY                GP JUN10+
               DCB=INDCB,            SUPPLY OPEN BPAM DCB      GP JUN10+
               PDSDE=IDRBLDL+4,      POINT TO BLDL RESULTS     GP JUN10+
               RETCODE=BNDRETCD,     SUPPLY RETURN CODE AREA   GP JUN10+
               RSNCODE=BNDRSNCD,     SUPPLY REASON CODE AREA   GP JUN10+
               SUBPOOL=21,           SUPPLY SUBPOOL ID         GP JUN10+
               MF=(E,BNDDATA,COMPLETE)                         GP JUN10
         ICM   R15,15,BNDRETCD       SUCCESS?                  GP JUN10
         BNZ   ESDBAPIX              NO, NO DATA TO LOOK AT    GP JUN10
         DESERV FUNC=RELEASE,        RELEASE THE CONNECTION    GP JUN10+
               CONN_ID=MODDEPTR,       THAT WAS JUST ACQUIRED  GP JUN10+
               DCB=INDCB,            SUPPLY OPEN BPAM DCB      GP JUN10+
               MF=(E,BNDDATA,COMPLETE)                         GP JUN10
         L     R2,BNDCURSR           YES, POINT TO DESB        GP JUN10
         USING DESB,R2                                         GP JUN10
         LA    R3,DESB_DATA          POINT TO THE ACTUAL ENTRY GP JUN10
         USING SMDE,R3                                         GP JUN10
         SR    R4,R4                 CLEAR FOR INSERT          GP JUN10
         ICM   R4,3,SMDE_PMAR_OFF    GET OFFSET TO PMAR        GP JUN10
         ALR   R4,R3                 POINT TO PMAR SECTION     GP JUN10
         USING PMAR,R4                                         GP JUN10
         USING PMARL,PMAR_END                                  GP APR18
*        MVI   IDR_FLGS,0            CLEAR FLAGS (MVCL DID)    GP APR18
         TM    PMAR_ATR2,PMAR_NREP   REPROCESSABLE BY BINDER?  GP JUN10
         BO    ESDDSRVX              NO, CANNOT GET A MAP      GP JUN10
         OI    IDR_FLGS,$POREP       YES, CAN USE BINDER API   GP JUN10
         TM    PMARL_ATR1,PMARL_NMIG COULD IT LIVE IN A PDS?   GP APR18
         BZ    ESDDSRVX              YES, IT IS MIGRATABLE     GP APR18
         OI    IDR_FLGS,$PONMIG      NO, USE MAP VERSION=2     GP APR18
ESDDSRVX DS    0H                    CLEAN UP DESERV STORAGE   GP JUN10
         L     R0,DESB_LEN           RETURNED BUFFER LENGTH    GP JUN10
         LR    R1,R2                 RETURNED BUFFER ADDRESS   GP JUN10
         FREEMAIN RU,LV=(0),A=(1),SP=21                        GP JUN10
         TM    IDR_FLGS,$POREP       REPROCESSABLE MODULE?     GP APR18
         BZ    ESDBAPIX              NO, SO NO MORE TO DO      GP JUN10
         DROP  R2,R3,R4              DESB, SMDE, PMAR+PMARL    GP JUN10
         SPACE 1                                               GP SEP05
         LA    R0,8                                            GP APR18
         STH   R0,BNDDDNAM           SET DDNAME LENGTH         GP APR18
         MVC   BNDDDNAM+2(8),DDNAME  SET DDNAME                GP APR18
         STH   R0,BNDMEMBR           SET MEMBER LENGTH         GP APR18
         MVC   BNDMEMBR+2(8),DIRNAME SET MEMBER                GP APR18
         ICM   R0,15,IEWBIND         LOAD ISSUED?              GP APR18
         BNZ   MAPBNDLD              YES                       GP APR18
         LOAD  EPLOC=MIEWBIND        GET IEWBIND EPA           GP APR18
         ST    R0,IEWBIND            SAVE IEWBIND EPA          GP APR18
MAPBNDLD DS    0H                                              GP APR18
         XC    DIATOKEN,DIATOKEN                               GP APR18
         ST    R0,DIATOKEN         SET UP DIALOG TOKEN         GP APR18
         MVC   MODTOKEN,DIATOKEN      AND MODULE TOKEN         GP APR18
         TM    IDR_FLGS,$PONMIG    CHECK DESERV RESULT         GP APR18
         BO    BMAPMAP             GO HANDLE PDSE ONLY STUFF   GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=STARTD,      START A BINDER DIALOG       GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DISTOKEN,                                GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         LR    R15,R0              COPY THE EPA                GP APR18
         CALL  (15),(STARTD1,      FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MAPZERO,MAPZERO,MAPZERO),                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP APR18
         BH    ESDBAPIX            YES, GIVE UP                GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=CREATEW,     CREATE A WORKMOD            GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,DIALOG=DIATOKEN,INTENT=ACCESS, GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(CREATEW1,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               MAPCODEA),          INTENT (ACCESS)             GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=INCLUDE,     INCLUDE A PROGRAM OBJECT    GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,INTYPE=NAME,                   GP APR18
*              DDNAME=BNDDDNAM,MEMBER=BNDMEMBR,                GP APR18
*              ATTRIB=NO,ALIASES=NO,                           GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(INCLUDE1,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               MAPCODEN,           INTYPE (NAME) (CONCAT OK)   GP APR18+
               BNDDDNAM,           DDNAME                      GP APR18+
               BNDMEMBR,           MEMBER                      GP APR18+
               MAPZERO,MAPZERO,MAPZERO,0,                      GP APR18+
               MAPCODEN,           ATTRIB                      GP APR18+
               MAPCODEN),          ALIASES                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,MAPFOUR    MAJOR FAILURE?              GP APR18
         BH    BESDDONE            YES, GIVE UP                GP APR18
         USING IEWBESD,BNDDATA                                 GP SEP05
         USING IEWBBNL,BNDDATA                                 GP APR18
         USING IEWBMAP,BNDDATA                                 GP JUN10
         LA    R2,#ESDPTR          ORIGIN FOR ESD CHAIN        GP SEP05
         SPACE 1                                               GP SEP05
         XC    BNDCURSR,BNDCURSR   FIRST CALL FOR THIS CLASS   GP SEP05
         L     R3,IOBUFF1          POINT TO A BUFFER           GP SEP05
         USING ESDNAME,R3                                      GP JUN10
         XC    ESDNAME(LENESD1),ESDNAME  CLEAR SEG# ETC.       GP JUN10
         DROP  R3                  ESDNAME                     GP JUN10
         SR    R6,R6               RESET ESDID                 GP APR18
BESDREDO EQU   *                                               GP SEP05
         MVC   IEWBESD(ESDH_LENG),ESDI_INIT_VALUES             GP SEP05
*        IEWBIND FUNC=GETD,        MODULE ESD DATA             GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_ESD,                 GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETD1,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_ESD,            CLASS                       GP APR18+
               MAPZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP SEP05
         BNL   BESDDONE            YES, GIVE UP                GP APR18
         LA    R4,IEWBESD+ESDH_LENG                            GP SEP05
         USING ESD_ENTRY,R4                                    GP SEP05
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP SEP05
         BNP   BESDDONE            NO ENTRIES WERE RETURNED    GP SEP05
BESDLOOP EQU   *                                               GP SEP05
         L     R3,IOBUFF1          POINT TO A BUFFER           GP SEP05
         USING ESDNAME,R3                                      GP SEP05
         LH    R15,ESD_NAME_CHARS                              GP SEP05
         L     R14,ESD_NAME_PTR                                GP SEP05
         LA    R0,C' '                                         GP SEP05
         SLL   R0,24                                           GP SEP05
         OR    R15,R0                                          GP SEP05
         LA    R0,ESDNAME                                      GP SEP05
         LA    R1,L'ESDNAME                                    GP SEP05
         MVCL  R0,R14              COPY SYMBOL NAME            GP SEP05
         MVC   ESDSEG#,ESD_SEGMENT+1                           GP APR18
         TM    DIRATTR,ATTROVLY    OVERLAY PROGRAM?            GP APR18
         BO    BESDXAOK            YES, SKIP AMODE/RMODE STUFF GP APR18
         MVC   ESDXAFLG,ESD_AMODE  COPY ADDRESSING MODE        GP SEP05
         NI    ESDXAFLG,X'03'      GET A24/A31 FLAGS SETTLED   GP APR18
         TM    ESD_AMODE,X'04'     MINIMUM AMODE?              GP SEP05
         BNO   *+8                 NO                          GP SEP05
         MVI   ESDXAFLG,X'03'      YES, ANY IS BETTER THAN 24  GP SEP05
         TM    ESD_AMODE,X'06'     AMODE=64?                   GP APR18
         BNO   *+8                 NO                          GP APR18
         MVI   ESDXAFLG,AMODE64    YES                         GP APR18
         TM    ESD_RMODE,X'03'     RMODE=ANY?                  GP SEP05
         BNO   *+8                 NO                          GP SEP05
         OI    ESDXAFLG,RMODEANY   YES                         GP SEP05
         TM    ESD_RMODE,X'04'     RMODE=64?                   GP APR18
         BNO   *+8                 NO                          GP APR18
         OI    ESDXAFLG,RMODE64    YES                         GP APR18
         TM    ESD_STORAGE,X'10'   READ-ONLY SECTION?          GP APR18
         BNO   BESDXAOK            NO                          GP APR18
         OI    ESDXAFLG,RSECT      YES                         GP APR18
BESDXAOK EQU   *                                               GP APR18
         CLC   =C'SD',ESD_TYPE                                 GP SEP05
         BNE   BESDNTSD                                        GP SEP05
         MVI   ESDTYPE,CODESD                                  GP SEP05
         MVC   IDRDBL(1),ESD_SEGMENT+1                         GP APR18
         CLI   ESD_SCOPE,C'M'      SCOPE=MODULE                GP SEP05
         BE    BESDTYPE            SECTION DEFINITION          GP SEP05
         MVI   ESDTYPE,CODEPC      SCOPE=SECTION               GP SEP05
         B     BESDTYPE            PRIVATE CODE                GP SEP05
BESDNTSD MVI   ESDTYPE,CODELR                                  GP SEP05
         CLC   =C'LD',ESD_TYPE                                 GP SEP05
         BNE   BESDNTLD            NOT A LABEL DEFINITION      GP APR18
         TM    DIRATTR,ATTROVLY    OVERLAY PROGRAM?            GP APR18
         BZ    BESDTYPE            NO, SEGMENT IRRELEVANT      GP APR18
         MVC   ESDSEG#,IDRDBL      YES, LOAD SECTION'S SEG#    GP APR18
         B     BESDTYPE                                        GP APR18
BESDNTLD MVI   ESDTYPE,CODEER                                  GP SEP05
         CLC   =C'ER',ESD_TYPE                                 GP SEP05
         BNE   BESDNTER                                        GP SEP05
         CLI   ESD_SCOPE,C'L'      SCOPE=LIBRARY               GP SEP05
         BE    BESDTYPE            EXTERNAL REFERENCE          GP SEP05
         MVI   ESDTYPE,CODEWK      SCOPE=MODULE                GP SEP05
         B     BESDTYPE            WEAK EXTERNAL REFERENCE     GP SEP05
BESDNTER MVI   ESDTYPE,CODECM                                  GP SEP05
         CLC   =C'CM',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            COMMON SECTION              GP SEP05
         MVI   ESDTYPE,CODEPR                                  GP SEP05
         CLC   =C'PR',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            PSEUDOREGISTER              GP SEP05
         CLC   =C'PD',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            PSEUDOREGISTER DEFINITION   GP SEP05
         MVI   ESDTYPE,CODENL                                  GP SEP05
         CLC   =C'  ',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            NULL ENTRY                  GP SEP05
         MVI   ESDTYPE,CODESEG                                 GP SEP05
         CLC   =C'ST',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            SEGMENT TABLE               GP SEP05
         CLC   =C'ET',ESD_TYPE                                 GP SEP05
         BE    BESDTYPE            ENTRY TABLE                 GP SEP05
         B     BESDNEXT            UNKNOWN TYPE                GP SEP05
BESDTYPE MVC   ESDLEN,ESD_LENG+1                               GP SEP05
         MVC   ESDADDR,ESD_MODULE_OFFSET+1                     GP SEP05
         LA    R6,1(,R6)           INCREMENT ESDID             GP APR18
         B     ESDSCAN             PROCESS MOCKED UP CESD      GP SEP05
         DROP  R3                  ESDNAME                     GP SEP05
BESDRTRN TM    IDR_FLGS,$PONMIG    PROCESSING B_MAP CLASS?     GP APR18
         BNZ   BMAPNEXT            YES, GO BACK TO IT          GP JUN10
BESDNEXT A     R4,ESDH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP SEP05
         BCT   R5,BESDLOOP         PROCESS NEXT ENTRY          GP SEP05
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    BESDREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R4                  ESD_ENTRY                   GP SEP05
BESDDONE EQU   *                                               GP SEP05
*        IEWBIND FUNC=DELETEW,     DELETE THE WORKMOD          GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,PROTECT=NO,                    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(DELETEW1,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               MAPCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*  END THE DIALOG                                              GP APR18
         L     R2,DIATOKEN         SAVE IEWBIND ADDRESS        GP APR18
*        IEWBIND FUNC=ENDD,        END THE BINDER DIALOG       GP APR18
*              VERSION=1,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DIATOKEN,PROTECT=NO,                     GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(ENDD1,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MAPCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
*        DELETE EPLOC=MIEWBIND     DISCARD IEWBIND             GP APR18
         SPACE 1                                               GP SEP05
         LA    R2,#ESDPTR                                      GP SEP05
         USING ESDENTRY,R3                                     GP SEP05
ESDRESLP ICM   R3,15,0(R2)                                     GP SEP05
         BZ    ESDBAPIX            END OF CHAIN                GP SEP05
         CLI   ESDTYPE,CODEER                                  GP SEP05
         BE    ESDRESIT            UNRESOLVED                  GP SEP05
         CLI   ESDTYPE,CODEWK                                  GP SEP05
         BE    ESDRESIT            UNRESOLVED                  GP SEP05
ESDRESOK LR    R2,R3               POINT TO THIS ENTRY         GP SEP05
         B     ESDRESLP                                        GP SEP05
         DROP  R3                  ESDENTRY                    GP SEP05
         SPACE 1                                               GP SEP05
*   R3 POINTS TO A REFERENCE WHICH MAY BE UNRESOLVED           GP SEP05
ESDRESIT LA    R15,#ESDPTR                                     GP SEP05
         USING ESDENTRY,R15                                    GP SEP05
ESDCHKLP ICM   R15,15,ESDLINK                                  GP SEP05
         BZ    ESDRESOK            REALLY IS UNRESOLVED        GP SEP05
         CLI   ESDTYPE,CODEER                                  GP SEP05
         BE    ESDCHKLP            SKIP EXTERNAL REFERENCE     GP SEP05
         CLI   ESDTYPE,CODEWK                                  GP SEP05
         BE    ESDCHKLP            SKIP WEAK EXTERNAL          GP SEP05
         CLI   ESDTYPE,CODENL                                  GP SEP05
         BE    ESDCHKLP            SKIP NULL                   GP SEP05
         CLI   ESDTYPE,CODEPC                                  GP SEP05
         BE    ESDCHKLP            SKIP $PRIVATE               GP SEP05
         CLC   ESDNAME,ESDNAME-ESDENTRY(R3)                    GP SEP05
         BNE   ESDCHKLP            NAME DOES NOT MATCH         GP SEP05
         DROP  R15                 ESDENTRY                    GP SEP05
         SPACE 1                                               GP SEP05
*   HAVE NOW FOUND AN ENTRY WITH A MATCHING NAME SO THE WEAK   GP SEP05
*   OR STRONG EXTERNAL REFERENCE IS NOT REALLY UNRESOLVED.     GP SEP05
         MVC   0(4,R2),0(R3)       DISCARD MATCHED LINK        GP SEP05
         B     ESDRESLP            GO LOOK FOR OTHERS          GP SEP05
         SPACE 1                                               GP APR18
BMAPMAP  EQU   *                                               GP APR18
*        IEWBIND FUNC=STARTD,      START A BINDER DIALOG       GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DISTOKEN,                                GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         LR    R15,R0              COPY THE EPA                GP APR18
         CALL  (15),(STARTD2,      FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MAPZERO,MAPZERO,MAPZERO),                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP APR18
         BH    ESDBAPIX            YES, GIVE UP                GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=CREATEW,     CREATE A WORKMOD            GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,DIALOG=DIATOKEN,INTENT=ACCESS, GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(CREATEW2,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               MAPCODEA),          INTENT (ACCESS)             GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*        IEWBIND FUNC=INCLUDE,     INCLUDE A PROGRAM OBJECT    GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,INTYPE=NAME,                   GP APR18
*              DDNAME=BNDDDNAM,MEMBER=BNDMEMBR,                GP APR18
*              ATTRIB=NO,ALIASES=NO,                           GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(INCLUDE2,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               MAPCODEN,           INTYPE (NAME) (CONCAT OK)   GP APR18+
               BNDDDNAM,           DDNAME                      GP APR18+
               BNDMEMBR,           MEMBER                      GP APR18+
               MAPZERO,MAPZERO,MAPZERO,0,                      GP APR18+
               MAPCODEN,           ATTRIB                      GP APR18+
               MAPCODEN),          ALIASES                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,MAPFOUR    MAJOR FAILURE?              GP APR18
         BH    BMAPDONE            YES, GIVE UP                GP APR18
         SPACE 1                                               GP APR18
         XC    IDRBLDL,IDRBLDL     CLEAR WORK AREA             GP APR18
         MVC   BNDCURSR,MAPZERO    RESET CURSOR FOR FIRST CALL GP APR18
         LA    R2,MAPCLS@          POINT TO CLASS CHAIN ORIGIN GP APR18
         USING MPCLS,R2                                        GP APR18
BBNLREDO EQU   *                                               GP APR18
         MVC   IEWBBNL(BNLH_LENG),BNLI_INIT_VALUES             GP APR18
*        IEWBIND FUNC=GETN,        MODULE CLASS NAME DATA      GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,TCOUNT=MAPCLST#,NTYPE=CLASS,   GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETN2,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT,           COUNT                       GP APR18+
               MAPCLST#,           TCOUNT                      GP APR18+
               MAPCODEC),          NTYPE                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP JUN10
         BNL   BMAPDONE            YES, GIVE UP                GP APR18
         LA    R4,IEWBBNL+BNLH_LENG                            GP APR18
         USING BNL_ENTRY,R4                                    GP APR18
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP APR18
         BNP   BBNLDONE            NO ENTRIES WERE RETURNED    GP APR18
BBNLLOOP EQU   *                                               GP APR18
         LA    R0,MPCLSLEN         GET CHAIN ELEMENT SIZE      GP APR18
         GETMAIN RU,LV=(0),LOC=(31,64),SP=21                   GP APR18
         XC    0(MPCLSLEN,R1),0(R1)                            GP APR18
         ST    R1,MPCLSNXT         ENCHAIN NEW ELEMENT         GP APR18
         L     R0,MPCLSOFF         GET PREVIOUS OFFSET         GP APR18
         A     R0,MPCLSSIZ         ADD ROUNDED SIZE            GP APR18
         LR    R2,R1               POINT TO NEW ELEMENT        GP APR18
         ST    R0,MPCLSOFF         SAVE NEW OFFSET             GP APR18
         SR    R1,R1               CLEAR FOR INSERT            GP APR18
         IC    R1,BNL_PAD1         GET LOAD FLAGS              GP APR18
         STC   R1,MPCLSPAD         SAVE IT                     GP APR18
         NILL  R1,X'000F'          EXTRACT ALIGNMENT           GP APR18
         LA    R14,1                                           GP APR18
         SLA   R14,0(R1)           GET ALIGNMENT               GP APR18
         L     R0,BNL_CLS_LENGTH   GET CLASS SEGMENT LENGTH    GP APR18
         AR    R0,R14              ADD ALIGNMENT SIZE          GP APR18
         BCTR  R0,0                SUBTRACT 1                  GP APR18
         LNR   R14,R14                                         GP APR18
         NR    R0,R14              GET ROUNDED ALIGNED SIZE    GP APR18
         ST    R0,MPCLSSIZ         SAVE THIS SIZE              GP APR18
         L     R14,BNL_NAME_PTR    POINT TO THE CLASS NAME     GP APR18
         LH    R15,BNL_NAME_CHARS  GET THE CLASS NAME LENGTH   GP APR18
         LA    R0,MPCLSNM          POINT TO TARGET             GP APR18
         LA    R1,L'MPCLSNM        GET TARGET LENGTH LIMIT     GP APR18
         STH   R15,MPCLSNML        SAVE THE CLASS NAME LENGTH  GP APR18
         OILH  R15,C' '*256        SET PAD TO BLANK            GP APR18
         MVCL  R0,R14              LOAD THE CLASS NAME         GP APR18
         SPACE 1                                               GP APR18
BBNLNEXT A     R4,BNLI_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP APR18
         BCT   R5,BBNLLOOP         PROCESS NEXT ENTRY          GP APR18
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    BBNLREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R4,R2               BNL_ENTRY, MPCLS            GP APR18
BBNLDONE EQU   *                                               GP APR18
         SPACE 1                                               GP JUN10
         LA    R2,#ESDPTR          ORIGIN FOR ESD CHAIN        GP APR18
         MVC   BNDCURSR,MAPZERO    FIRST CALL FOR THIS CLASS   GP APR18
BMAPREDO EQU   *                                               GP JUN10
         MVC   IEWBMAP(MAPH_LENG),MAPI_INIT_VALUES             GP JUN13
*        IEWBIND FUNC=GETD,        MODULE MAP DATA             GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,CLASS=CLS_MAP,                 GP APR18
*              AREA=BNDDATA,CURSOR=BNDCURSR,COUNT=BNDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETD2,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               CLS_MAP,            CLASS                       GP APR18+
               MAPZERO,                                        GP APR18+
               BNDDATA,            AREA                        GP APR18+
               BNDCURSR,           CURSOR                      GP APR18+
               BNDCOUNT),          COUNT                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,=F'8'      MAJOR FAILURE?              GP JUN10
         BNL   BMAPDONE            YES, GIVE UP                GP APR18
         LA    R4,IEWBMAP+MAPH_LENG                            GP JUN10
         USING MAP_ENTRY,R4                                    GP JUN10
         ICM   R5,15,BNDCOUNT      GET RETURNED RECORD COUNT   GP JUN10
         BNP   BMAPDONE            NO ENTRIES WERE RETURNED    GP JUN10
BMAPLOOP EQU   *                                               GP JUN10
         CLI   MAP_TYPE,C'C'       CLASS ENTRY?                GP JUN10
         BNE   BMAPSYM             NO, PROCESS SYMBOL          GP APR18
         NI    IDR_FLGS,255-$B_TXT YES, RESET SELECTION FLAG   GP APR18
         TM    MAP_FLAGS,X'40'     SHOW THIS CLASS?            GP APR18
         BO    BMAPNEXT            NO, FLUSH THIS CLASS        GP APR18
         OI    IDR_FLGS,$B_TXT     YES, FLAG AS SUCH           GP APR18
BMAPSYM  TM    IDR_FLGS,$B_TXT     SHOWING THIS CLASS?         GP APR18
         BZ    BMAPNEXT            NO, FLUSH THIS ENTRY        GP APR18
         L     R3,IOBUFF1          POINT TO A BUFFER           GP JUN10
         USING ESDNAME,R3                                      GP JUN10
         NI    ESDXAFLG,RSECT      RESET ADDRESS MODE BITS     GP APR18
         CLI   MAP_TYPE,C'C'       CLASS ENTRY?                GP JUN10
         BE    BMAPNAME            YES, GET THE CLASS NAME     GP APR18
         CLI   MAP_TYPE,C'E'       END OF MODULE MAP?          GP JUN10
         BE    BMAPDONE            YES, END OF DATA            GP JUN10
         CLI   MAP_TYPE,C'S'       SECTION ENTRY?              GP JUN10
         BE    BMAPNAME            YES, GET ITS NAME           GP JUN10
         CLI   MAP_TYPE,C'L'       LABEL ENTRY?                GP JUN10
         BE    BMAPNAME            YES, GET ITS NAME           GP JUN10
         CLI   MAP_TYPE,C'O'       OVERLAY SEGMENT ENTRY?      GP JUN10
         BNE   BMAPNEXT            NO, DISCARD ENTRY           GP JUN10
         IC    R15,ESDSEG#         YES, GET SEGMENT NUMBER     GP JUN10
         LA    R15,1(,R15)         INCREMENT IT                GP JUN10
         STC   R15,ESDSEG#         SAVE UPDATED NUMBER         GP JUN10
         B     BMAPNEXT            ENTRY PROCESSED             GP JUN10
BMAPNAME LH    R15,MAP_NAME_CHARS                              GP JUN10
         L     R14,MAP_NAME_PTR                                GP JUN10
         CHI   R15,4               IS THE NAME LENGTH 4?       GP APR18
         BNE   BMAPNMLD            NO, GO LOAD THE NAME        GP APR18
         CLI   0(R14),0            IS IT A FULLWORD NUMBER?    GP APR18
         BNE   BMAPNMLD            NO, GO LOAD THE NAME        GP APR18
         MVC   ESDNAME+6(2),2(R14) YES, COPY IT (S0C4 SAFETY)  GP APR18
         UNPK  ESDNAME(5),ESDNAME+6(3)                         GP APR18
         TR    ESDNAME(4),TRTABLE  MAKE IT HEX                 GP APR18
         MVC   ESDNAME+4(4),ESDNAME                            GP APR18
         MVC   ESDNAME(4),BMAP$PRV TIDY UP THE NAME            GP APR18
         B     BMAPNMOK                                        GP APR18
BMAP$PRV DC    CL4'$PRV'           NUMBERED $PRIVATE PREFIX    GP APR18
BMAPNMLD EQU   *                   LOAD VARIABLE-LENGTH NAME   GP APR18
         LA    R0,C' '                                         GP JUN10
         SLL   R0,24                                           GP JUN10
         OR    R15,R0                                          GP JUN10
         LA    R0,ESDNAME                                      GP JUN10
         LA    R1,L'ESDNAME                                    GP JUN10
         MVCL  R0,R14              COPY SYMBOL NAME            GP JUN10
BMAPNMOK EQU   *                   SYMBOL NAME NOW LOADED      GP APR18
         ICM   R0,15,MAP_QUANTITY  GET ITS SIZE                GP JUN10
         STCM  R0,7,ESDLEN         SET ITS SIZE                GP JUN10
         ICM   R0,15,MAP_OFFSET    GET ITS OFFSET              GP JUN10
         CLI   MAP_TYPE,C'S'       SECTION ENTRY?              GP JUN10
         BE    BMAPSECT            YES                         GP JUN10
         CLI   MAP_TYPE,C'C'       CLASS ENTRY?                GP APR18
         BE    BMAPCLAS            YES, TREAT AS A SECTION     GP APR18
         CLI   MAP_TYPE,C'L'       LABEL ENTRY?                GP JUN10
         BNE   BMAPNEXT            NO, NOT INTERESTED          GP JUN10
         CLC   IDRDBL,ESDNAME      LABEL FOR SECTION?          GP JUN10
         BE    BMAPNEXT            YES, ALREADY HAVE SECTION   GP JUN10
         MVI   ESDTYPE,CODELR      NO, SET SYMBOL TYPE         GP JUN10
         A     R0,ESDSOFST         ADD SECTION OFFSET          GP JUN10
         STCM  R0,7,ESDADDR        SAVE MODULE OFFSET          GP JUN10
         B     BMAPSCAN            GO FINISH ESD ENTRY         GP APR18
BMAPCLAS LA    R9,MAPCLS@          POINT TO CHAIN ORIGIN       GP APR18
         USING MPCLS,R9                                        GP APR18
BMPCLSLP SR    R0,R0               A BIT LESS BAD IF NO MATCH  GP APR18
         MVI   ESDXAFLG,0          RESET FLAGS FOR NEW CLASS   GP APR18
         ICM   R9,15,MPCLSNXT      POINT TO NEXT CHAIN ELEMENT GP APR18
         BZ    BMAPSECT            END OF CHAIN REACHED        GP APR18
         LH    R15,MAP_NAME_CHARS  GET CURRENT CLASS NAME SIZE GP JUN10
         L     R14,MAP_NAME_PTR    POINT TO CLASS ENTRY'S NAME GP JUN10
         LA    R0,MPCLSNM          POINT TO NAME IN ELEMENT    GP JUN10
         LA    R1,L'MPCLSNM        GET NAME FIELD'S LENGTH     GP JUN10
         OILH  R15,C' '*256        SET PAD TO BLANK            GP APR18
         CLCL  R0,R14              FOUND MATCHING ELEMENT?     GP APR18
         BNE   BMPCLSLP            NO, SEARCH ALONG CHAIN      GP APR18
         L     R0,MPCLSOFF         YES, GET CLASS OFFSET       GP APR18
         ST    R0,ESDCOFST         SAVE CLASS OFFSET IN MODULE GP APR18
         SR    R0,R0               RESET OFFSET WITHIN CLASS   GP APR18
         TM    MAP_FLAGS,X'10'     DEFERRED LOAD CLASS?        GP APR18
         BZ    BCLSROCK            NO                          GP APR18
         OI    ESDXAFLG,X'40'      YES, FLAG THIS              GP APR18
BCLSROCK TM    MPCLSPAD,X'80'      READ-ONLY CLASS?            GP APR18
         BNO   BMAPSECT            NO                          GP APR18
         OI    ESDXAFLG,RSECT      YES                         GP APR18
BMAPSECT MVI   ESDTYPE,CODESD      SET SYMBOL TYPE             GP JUN10
         MVC   IDRDBL,ESDNAME      SAVE CURRENT SECTION NAME   GP JUN10
         A     R0,ESDCOFST         CLASS OFST -> MODULE OFST   GP JUN10
         ST    R0,ESDSOFST         SAVE OFFSET OF SECTION      GP JUN10
         STCM  R0,7,ESDADDR        SAVE MODULE OFFSET          GP APR18
         CLI   MAP_TYPE,C'S'       SECTION ENTRY?              GP APR18
         BNE   BMAPSCAN            NO, PROBABLY A CLASS ENTRY  GP APR18
         SPACE 1                                               GP APR18
         LH    R15,MAP_NAME_CHARS  GET SECTION NAME LENGTH     GP APR18
         L     R14,MAP_NAME_PTR    POINT TO SECTION NAME       GP APR18
         STH   R15,BSECTNM         SAVE THE NAME LENGTH        GP APR18
         LA    R0,BSECTNM+2        POINT TO NAME TEXT TARGET   GP APR18
         LA    R1,256              GET TARGET AREA LENGTH      GP APR18
         MVCL  R0,R14              GET SECTION NAME AS VARCHAR GP APR18
         USING V2_IEWBESD,BND1ESD                              GP SEP05
         MVC   V2_IEWBESD(V2_ESDH_LENG),V2_ESDI_INIT_VALUES    GP APR18
         MVC   ESDCURSR,MAPZERO    RESET CALL CURSOR           GP APR18
*        IEWBIND FUNC=GETE,        MODULE ESD DATA             GP APR18
*              VERSION=2,RETCODE=ESDRETCD,RSNCODE=ESDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,SECTION=BSECTNM,               GP APR18
*              RECTYPE=ESDRTYPE,CLASS=MPCLSNML,                GP APR18
*              AREA=BND1ESD,CURSOR=ESDCURSR,COUNT=ESDCOUNT,    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(GETE2,        FUNCTION CODE               GP APR18+
               ESDRETCD,           RETURN CODE                 GP APR18+
               ESDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           MODULE TOKEN                GP APR18+
               BSECTNM,            SECTION                     GP APR18+
               ESDRTYPE,           RECTYPE                     GP APR18+
               MAPNEG1,            OFFSET                      GP APR18+
               MAPZERO,            SYMBOL                      GP APR18+
               BND1ESD,            AREA                        GP APR18+
               ESDCURSR,           CURSOR                      GP APR18+
               ESDCOUNT,           COUNT                       GP APR18+
               MPCLSNML),          CLASS                       GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         CLC   BNDRETCD,MAPFOUR    MAJOR FAILURE?              GP APR18
         BH    BMAPSCAN            YES, GIVE UP ON THIS BIT    GP APR18
         ICM   R0,15,ESDCOUNT      WERE ANY ENTRIES FOUND      GP APR18
         BNP   BMAPSCAN            NO, GIVE UP ON THIS BIT     GP APR18
         LA    R1,V2_IEWBESD+V2_ESDH_LENG                      GP APR18
         USING V2_ESD_ENTRY,R1                                 GP APR18
         CLI   V2_ESD_AMODE,X'06'  KNOWN VALUE?                GP APR18
         BH    BMAPSCAN            NO, IGNORE IT               GP APR18
         MVC   24(1,R13),V2_ESD_AMODE  YES, COPY IT            GP APR18
         TR    24(1,R13),BEAMTB    CONVERT TO FLAG BITS        GP APR18
         OC    ESDXAFLG,24(R13)    SET THOSE FLAGS             GP APR18
         DROP  R1                  V2_ESD_ENTRY                GP APR18
         DROP  R9                  MPCLS                       GP APR18
BMAPSCAN LA    R6,1(,R6)           INCREMENT ESDID             GP APR18
         B     ESDSCAN             PROCESS MOCKED UP CESD      GP JUN10
         DROP  R3                  ESDNAME                     GP APR18
         SPACE 1                                               GP JUN10
BMAPNEXT A     R4,MAPH_ENTRY_LENG  POINT TO NEXT RETURNED ENTRYGP JUN10
         BCT   R5,BMAPLOOP         PROCESS NEXT ENTRY          GP JUN10
         ICM   R0,15,BNDRETCD      MORE DATA TO FETCH?         GP APR18
         BZ    BMAPREDO            YES, GO REQUEST MORE        GP APR18
         DROP  R4                  MAP_ENTRY                   GP JUN13
BMAPDONE EQU   *                                               GP SEP05
*        IEWBIND FUNC=DELETEW,     DELETE THE WORKMOD          GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              WORKMOD=MODTOKEN,PROTECT=NO,                    GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(DELETEW2,     FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               MODTOKEN,           DIALOG TOKEN                GP APR18+
               MAPCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
         SPACE 1                                               GP APR18
*  END THE DIALOG                                              GP APR18
         L     R2,DIATOKEN         SAVE IEWBIND ADDRESS        GP APR18
*        IEWBIND FUNC=ENDD,        END THE BINDER DIALOG       GP APR18
*              VERSION=2,RETCODE=BNDRETCD,RSNCODE=BNDRSNCD,    GP APR18
*              DIALOG=DIATOKEN,PROTECT=NO,                     GP APR18
*              MF=(E,BNDPARMS,COMPLETE)                        GP APR18
         L     R15,DIATOKEN        GET IEWBIND ENTRY POINT     GP APR18
         CALL  (15),(ENDD2,        FUNCTION CODE               GP APR18+
               BNDRETCD,           RETURN CODE                 GP APR18+
               BNDRSNCD,           REASON CODE                 GP APR18+
               DIATOKEN,           DIALOG TOKEN                GP APR18+
               MAPCODEN),          PROTECT                     GP APR18+
               VL,MF=(E,BNDPARMS)                              GP APR18
*        DELETE EPLOC=MIEWBIND     DISCARD IEWBIND             GP APR18
         SPACE 1                                               GP APR18
         USING MPCLS,R1                                        GP APR18
ESDFREMP ICM   R1,15,MAPCLS@       POINT TO FIRST ELEMENT      GP APR18
         BZ    ESDBAPIX            CHAIN NOW FREED             GP APR18
         MVC   MAPCLS@,MPCLSNXT    DECHAIN FIRST ELEMENT       GP APR18
         LA    R0,MPCLSLEN         FREE THE ELEMENT            GP APR18
         FREEMAIN RU,LV=(0),A=(1),SP=21                        GP APR18
         B     ESDFREMP            CONTINUE FREEING CHAIN      GP APR18
         SPACE 1                                               GP SEP05
ESDBAPIX LR    R1,R13                                          GP SEP05
         LHI   R0,IDRAPIWL                                     GP APR18
         SR    R3,R3               CLEAR FOR INSERT            GP APR18
         IC    R3,IDR_FLGS         LOAD FLAG BYTE              GP APR18
         NILL  R3,$PONMIG          ZERO IF B_ESD, NOT IF B_MAP GP APR18
         FREEMAIN RU,LV=(0),A=(1),SP=21                        GP SEP05
         LR    R0,R3               PASS FLAG BACK TO ESDLAST2  GP APR18
         PR    ,                   BACK TO THE 370 WORLD       GP SEP05
         SPACE 2                                               GP SEP05
         DROP  R13                 IDRAPIWK                    GP SEP05
         SPACE 2                                               GP SEP05
MAPCODEA DC    C'A'                                            GP APR18
MAPCODEC DC    C'C'                                            GP APR18
MAPCODEN DC    C'N'                                            GP APR18
MAPZERO  DC    F'0'                ZERO                        GP APR18
MAPFOUR  DC    F'4'                FOUR                        GP APR18
MAPNEG1  DC    F'-1'               NEGATIVE ONE                GP APR18
STARTD1  DC    Y(01,1)             VERSION 1 - STARTDIALOG     GP APR18
CREATEW1 DC    Y(10,1)             VERSION 1 - CREATEWORKMOD   GP APR18
INCLUDE1 DC    Y(40,1)             VERSION 1 - INCLUDE         GP APR18
GETD1    DC    Y(61,1)             VERSION 1 - GETDATA         GP APR18
DELETEW1 DC    Y(15,1)             VERSION 1 - DELETEWORKMOD   GP APR18
ENDD1    DC    Y(05,1)             VERSION 1 - ENDDIALOG       GP APR18
STARTD2  DC    Y(01,2)             VERSION 2 - STARTDIALOG     GP APR18
CREATEW2 DC    Y(10,2)             VERSION 2 - CREATEWORKMOD   GP APR18
INCLUDE2 DC    Y(40,2)             VERSION 2 - INCLUDE         GP APR18
GETN2    DC    Y(60,2)             VERSION 2 - GETNAMES        GP APR18
GETD2    DC    Y(61,2)             VERSION 2 - GETDATA         GP APR18
GETE2    DC    Y(62,2)             VERSION 2 - GETESD          GP APR18
DELETEW2 DC    Y(15,2)             VERSION 2 - DELETEWORKMOD   GP APR18
ENDD2    DC    Y(05,2)             VERSION 2 - ENDDIALOG       GP APR18
MIEWBIND DC    CL8'IEWBIND '                                   GP APR18
CLS_ESD  DC    H'5',CL6'B_ESD '                                GP SEP05
CLS_MAP  DC    H'5',CL6'B_MAP '                                GP JUN10
B_TEXT   DC    CL6'B_TEXT'                                     GP JUN10
ESDRTYPE DC    Y(7),CL7'(SD,CM)'   GETE RECORD TYPES           GP APR18
BEAMTB   DC    X'00010203030010'   ESD_AMODE -> ESDXAFLG TABLE GP APR18
         SPACE 1                                               GP SEP05
ISITMGDE ISITMGD DCB=0,DATATYPE=YES,MF=L                       GP SEP05
DESRVGE  DESERV FUNC=GET,MF=L                                  GP JUN10
         SPACE 1                                               GP SEP05
         IEWBUFF FUNC=MAPBUF,BYTES=01280,TYPE=ESD,VERSION=2,   GP APR18+
               PREFIX=V2                                       GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=ESD,VERSION=1    GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=NAME,VERSION=2   GP APR18
         IEWBUFF FUNC=MAPBUF,BYTES=30720,TYPE=MAP,VERSION=2    GP APR18
         SPACE 2                                               GP APR18
IDRAPIWK DSECT ,                                               GP SEP05
         DS    0D                                              GP SEP05
         DS    18F                 REGISTER SAVE AREA          GP SEP05
IDRDBL   DS    D                                               GP SEP05
IDRBLDL  DS    XL80                BLDL RESULTS AREA           GP SEP05
         ORG   IDRBLDL             REUSE SOME STORAGE          GP APR18
MAPCLS@  DS    A                   CLASS NAME CHAIN ORIGIN     GP APR18
         DS    F                   PRETEND TO BE MPCLSOFF      GP APR18
         DS    F                   PRETEND TO BE MPCLSSIZ      GP APR18
MAPCLST# DS    F                   TOTAL CLASS COUNT           GP APR18
ESDSOFST DS    F                   CURRENT SECTION OFFSET      GP APR18
ESDCOFST DS    F                   CURRENT CLASS OFFSET        GP APR18
ESDCURSR DS    A                   GETE CURSOR                 GP APR18
ESDCOUNT DS    A                   GETE ENTRY COUNT            GP APR18
ESDGOTE# DS    F                   GETE RECORD COUNT           GP APR18
ESDRETCD DS    F                   GETE RETURN CODE            GP APR18
ESDRSNCD DS    F                   GETE REASON CODE            GP APR18
         ORG   ,                                               GP APR18
DIATOKEN DS    D                   DIALOG TOKEN                GP APR18
MODTOKEN DS    D                   MODULE TOKEN                GP SEP05
BNDRETCD DS    F                   RETURN CODE                 GP SEP05
BNDRSNCD DS    F                   REASON CODE                 GP SEP05
MODDCBPT DS    A                   POINTER TO THE OPEN DCB     GP SEP05
MODDEPTR DS    A                   POINTER TO BLDL DATA        GP SEP05
BNDCURSR DS    A                   CURSOR                      GP SEP05
BNDCOUNT DS    A                   ENTRY COUNT                 GP SEP05
         SPACE 1                                               GP SEP05
BNDPARMS DS    14F                 CALL PARAMETER LIST AREA    GP APR18
BNDDDNAM DS    XL2,CL8             DDNAME FOR INCLUDE          GP JUN13
BNDMEMBR DS    XL2,CL8             MEMBER FOR INCLUDE          GP JUN13
IDR_FLGS DS    X                   LOCAL FLAG BYTE             GP JUN13
$B_TXT   EQU   X'80'               DOING B_MAP B_TEXT SECTIONS GP JUN13
$POREP   EQU   X'40'               BINDER CAN REPROCESS OBJECT GP APR18
$PONMIG  EQU   X'20'               OBJECT MUST BE IN A PDSE    GP APR18
         SPACE 1                                               GP SEP05
BSECTNM  DS    H,CL256             SECTION NAME FOR GETE       GP APR18
         SPACE 1                                               GP SEP05
BND1ESD  DS    0D,XL1280           RETURNED API DATA AREA      GP APR18
         SPACE 1                                               GP SEP05
BNDDATA  DS    0D,XL30720          RETURNED API DATA AREA      GP APR18
IDRAPIWL EQU   *-IDRAPIWK                                      GP SEP05
         SPACE 1                                               GP SEP05
         IGWCISM DSECT=YES         ISITMGD PLIST               GP SEP05
         SPACE 2                                               GP APR18
MPCLS    DSECT ,                   BINDER CLASS CHAIN ELEMENT  GP APR18
MPCLSNXT DS    A                   CHAIN FORWARD POINTER       GP APR18
MPCLSOFF DS    F                   CLASS OFFSET IN MODULE      GP APR18
MPCLSSIZ DS    F                   ROUNDED CLASS SEGMENT SIZE  GP APR18
MPCLSNML DS    H                   CLASS NAME LENGTH           GP APR18
MPCLSNM  DS    CL16                CLASS NAME                  GP APR18
MPCLSPAD DS    X                   FLAG BYTE                   GP APR18
         DS    0D                  END OF ELEMENT STRUCTURE    GP APR18
MPCLSLEN EQU   *-MPCLS             SIZE OF ELEMENT             GP APR18
         SPACE 2                                               GP SEP05
MAP      CSECT ,                                               GP SEP05
         DC    0D'0'               BACK TO FETCHABLE CODE      GP SEP05
         DROP  R8                  READESD                     GP APR18
         SPACE 1                                               GP SEP05
.NOBAPI4 ANOP  ,                                               GP SEP05
