/* --------------------  rexx procedure  -------------------- *
 | Name:      JC                                              |
 |                                                            |
 | Function:  Job Card ISPF Edit Macro                        |
 |                                                            |
 | Syntax:    JC jobclass                                     |
 |                                                            |
 |            jobclass is optional                            |
 |                                                            |
 | Author:    John Kalinich                                   |
 |                                                            |
 | Custom:    Recommend updating job class, message class,    |
 |            room, building, and address defaults in         |
 |            JCPANEL below                                   |
 |                                                            |
 | History:  (most recent on top)                             |
 |            09/16/16 - Converted from Clist by Lionel Dyck  |
 |            02/04/19 - Use LoadISPF/DropISPF code from LBD  |
 |                                                            |
 * ---------------------------------------------------------- */
 Address ISREdit
 'Macro (jcclass)'
/* -------------------------------------------------------------- *
 | Job Card ISPF Edit Macro                                       |
 |                                                                |
 | If invoked with a JOB Class parameter (e.g., "JC B"), then     |
 | the panel will not be displayed and the JOB card will be built |
 | with the profile variables that have been saved.               |
 * -------------------------------------------------------------- */

 parse value '' with null jcproc jcother1 jcother2 jcother3 ,
                     jcpre jcsu jcacc jcname         jctime ,
                     jcnotify jcmc jcrm jcjxeq jcjprt jctitle ,
                     jcdept jcbldg jcaddr1 jcaddr2 jcaddr3 jcaddr4

/* ------------------------------------------------- *
 | Go to ISPF environment and display the ISPF Panel |
 * ------------------------------------------------- */

 load_info = loadispf()

 Address ISPExec
 if jcclass /= null then do
    'control nondispl enter'
    'display panel(jcpanel)'
    if rc > 0 then signal done
    end
 else do
    'display panel(jcpanel)'
    if rc > 0 then signal done
    end

/* ----------------------------------- *
 | Return to the ISPF Edit environment |
 * ----------------------------------- */
 Address ISREdit

/* ------------------------------------------------------- *
 | Test JCProc (JCLLIB) dataset name to see if it is fully |
 | qualified and if not then prepend either the users      |
 | prefix or userid.                                       |
 * ------------------------------------------------------- */
 if jcproc /= null then do
    if left(jcproc,1) = "'" then
       jcproc = substr(jcproc,2,length(jcproc)-2)
     else do
          if sysvar('syspref') /= null then hlq = sysvar('syspref')
                                       else hlq = sysvar('sysuid')
          jcproc = hlq'.'jcproc
      end
  end

/* ------------------------------ *
 | Check for the JCOTHERx options |
 * ------------------------------ */
 if jcother1 /= null then jcother1 = jcother1','
 if jcother2 /= null then jcother2 = jcother2','
 if jcother3 /= null then jcother3 = jcother3','

 job1  = "//"jcpre""jcsu" JOB ("jcacc"),'"jcname"',"
 jobo1 = "//             "jcother1
 jobo2 = "//             "jcother2
 jobo3 = "//             "jcother3
 job2  = "//             CLASS="jcclass","
 job3  = "//             TIME=("jctime"),"
 job4  = "//             NOTIFY="jcnotify","
 job5  = "//             MSGCLASS="jcmc
 job6  = "/*JOBPARM R="jcrm",T=9999,L=9999"
 job7  = "/*ROUTE XEQ   "jcjxeq
 job8  = "/*ROUTE PRINT "jcjprt
 job9  = "//JCL      JCLLIB  ORDER="jcproc
 job10 = "//JOB      OUTPUT  NAME='"jcname"',"
 job11 = "//             TITLE='"jctitle"',"
 job12 = "//             DEPT='"jcdept"',"
 job13 = "//             BUILDING='"jcbldg"',"
 job14 = "//             ADDRESS=('"jcaddr1"',"
 job15 = "//             '"jcaddr2"',"
 job16 = "//             '"jcaddr3"',"
 job17 = "//             '"jcaddr4"'),"
 job18 = "//             JESDS=ALL,"
 job19 = "//             DEFAULT=YES"

 comment = '//*'
 "(top,bot) = display_lines"
 if top = 1 then
   nop
 else
   "line_after .zfirst = (comment)"

 "line_before .zfirst = (job19)"
 "line_before .zfirst = (job18)"
 "line_before .zfirst = (job17)"
 "line_before .zfirst = (job16)"
 "line_before .zfirst = (job15)"
 "line_before .zfirst = (job14)"
 "line_before .zfirst = (job13)"
 "line_before .zfirst = (job12)"
 "line_before .zfirst = (job11)"
 "line_before .zfirst = (job10)"
 if strip(jcproc) ¬= null then
   "line_before .zfirst = (job9)"
 if strip(jcjprt) ¬= null then
   "line_before .zfirst = (job8)"
 if strip(jcjxeq) ¬= null then
   "line_before .zfirst = (job7)"
 "line_before .zfirst = (job6)"
 "line_before .zfirst = (job5)"
 if strip(jcnotify) ¬= null then
   "line_before .zfirst = (job4)"
 if strip(jctime) ¬= null then
   "line_before .zfirst = (job3)"
 "line_before .zfirst = (job2)"
 if strip(jcother3) ¬= null then
   "line_before .zfirst = (jobo3)"
 if strip(jcother2) ¬= null then
   "line_before .zfirst = (jobo2)"
 if strip(jcother1) ¬= null then
   "line_before .zfirst = (jobo1)"
 "line_before .zfirst = (job1)"

done:
 x = dropispf(load_info)
 exit
/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
 DropISPF: Procedure
 arg load_info
 Address ISPEXEC
 do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
       if libd = "ALTLIBC" then lib = "CLIST"
                           else lib = "EXEC"
       Address TSO,
         "Altlib Deact Application("lib")"
       end
    else "libdef" libd
    address tso "free f("dd")"
    end
 return 0
/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
>START
/*
>Panel JCPANEL
)ATTR
  # AREA(SCRL) EXTEND(ON)
)BODY
%------------------------------- z/OS Job Card ---------------------------------
%Command ===>_ZCMD                                                             +
+
+Enter JOB Card Information:
    Job Name Prefix  %===>_JCPRE +
    Job Name Suffix  %===>_Z +
    Job CLASS        %===>_Z+
    Job TIME         %===>_JCTIME  +            (Optional)
    Job MSGCLASS     %===>_Z+
    Programmer Name  %===>_JCNAME              +
    NOTIFY Userid    %===>_JCNOTIFY+            (Optional)
    Accounting Info  %===>_JCACC          +
    ROOM Number      %===>_JCRM+
    Other Parameters %===>_JCOTHER1                                            +
                     %===>_JCOTHER2                                            +
                     %===>_JCOTHER3                                            +

+Enter other JOB related information (optional):
+                                                                  %Up F7 Dn F8
#RELATED ----------------------------------------------------------------------#
)AREA RELATED
    JCLLIB Dsname    %===>_JCPROC                                      +
    JES2 XEQ Node    %===>_JCJXEQ  +
    JES2 PRINT Node  %===>_JCJPRT           +
    Job OUTPUT Title %===>_JCTITLE                                             +
    Job OUTPUT Dept  %===>_JCDEPT                                              +
    Job OUTPUT Bldg  %===>_JCBLDG                                              +
    Job OUTPUT Addr  %===>_JCADDR1                                             +
                     %===>_JCADDR2                                             +
                     %===>_JCADDR3                                             +
                     %===>_JCADDR4                                             +
)INIT
VGET (JCPRE,JCSU,JCACC,JCNAME,JCNOTIFY,JCMC,JCRM,
      JCTIME,JCOTHER1,JCOTHER2,JCOTHER3,JCPROC,JCJXEQ,JCJPRT,
      JCDEPT,JCBLDG,JCADDR1,JCADDR2,JCADDR3,JCADDR4) PROFILE
.ZVARS = '(JCSU JCCLASS JCMC)'
.CURSOR = JCSU
IF (&JCPRE = &Z)
  &JCPRE = &ZUSER
IF (&JCMC = &Z)
  &JCMC = 'R'
IF (&JCCLASS = &Z)
  &JCCLASS = 'B'
&JCRMNO = TRANS(TRUNC(&ZUSER,3)
            TRI,'6.106'
            CFB,'6.106'
            CFC,'6.106'
            *,'')
IF (&JCBLDG = &Z)
  &JCBLDG = 'ROBERT A. YOUNG'
IF (&JCADDR1 = &Z AND
    &JCADDR2 = &Z AND
    &JCADDR3 = &Z AND
    &JCADDR4 = &Z)
  &JCADDR1 = 'COMPUTER SCIENCES CORP'
  &JCADDR2 = 'ROOM &JCRMNO'
  &JCADDR3 = '1222 SPRUCE STREET'
  &JCADDR4 = 'ST. LOUIS, MISSOURI  63103-2834'
)PROC
VER (&JCPRE,NB)
VER (&JCSU,NB)
VER (&JCCLASS,NB)
VER (&JCMC,NB)
VER (&JCNAME,NB)
VER (&JCACC,NB)
VER (&JCRM,NB)
VER (&JCPROC,DSNAME)
VER (&JCJXEQ,NAME)
VER (&JCJPRT,NAME)
VPUT (JCPRE,JCSU,JCACC,JCNAME,JCNOTIFY,JCMC,JCRM,
      JCTIME,JCOTHER1,JCOTHER2,JCOTHER3,JCPROC,JCJXEQ,JCJPRT,
      JCDEPT,JCBLDG,JCADDR1,JCADDR2,JCADDR3,JCADDR4) PROFILE
)END */
