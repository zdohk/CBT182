/* --------------------  rexx procedure  --------------------------- */
/* Name:      DSK3390                                                |
 |                                                                   |
 | Function:  3390 space calculation.  Compute number of trks/cyls   |
 |            required based on block size, key length, and blocks.  |
 |                                                                   |
 |            Can also enter number of tracks to determine the       |
 |            number of blocks (physical records) that will fit on   |
 |            each track.                                            |
 |                                                                   |
 | Syntax:    %DSK3390                                               |
 |                                                                   |
 | Author:    Janko Kalinic (inspired by Fred Rogers)                |
 |            The ISPF Cabal - Vive la revolution                    |
 |                                                                   |
 | History:                                                          |
 |            11/19/18 - Creation                                    |
 | ----------------------------------------------------------------- |
 | Copyleft (c) All Wrongs Reserved                                  |
 * ----------------------------------------------------------------- */

   numeric digits 10
   dsk = '3390'
   Address ISPExec
   load_info = loadispf()
panel:
   'display panel(dskcalc)'
   if rc = 8 then do
      x = dropispf(load_info)
      exit
      end
   if klen = 0 | length(klen) = 0 then do
      c = 19
      k = 0
   end
   else
   do
      c = 28
      kn = (klen + 6) // 232
      if kn = 0 then
      kn = (klen + 6) % 232
      else
      kn = ((klen + 6) % 232) + 1
      k = (klen + (kn * 6) + 6) // 34
      if k = 0 then
      k = (klen + (kn * 6) + 6) % 34
      else
      k = ((klen + (kn * 6) + 6) % 34) + 1
   end
   dn = (dlen + 6) // 232
   if dn = 0 then
   dn = (dlen + 6) % 232
   else
   dn = ((dlen + 6) % 232) + 1
   d = (dlen + (dn * 6) + 6) // 34
   if d = 0 then
   d = (dlen + (dn * 6) + 6) % 34
   else
   d = ((dlen + (dn * 6) + 6) % 34) + 1
   btrk = 1729 % (c + k + d)
   if numrec = '' then
   numrec = ttrk * btrk
   if numrec < btrk then
   utrk = dlen * numrec
   else
   utrk = dlen * btrk
   wtrk = 56664 - utrk
   bcyl = 15 * btrk
   ttrk = numrec // btrk
   if ttrk = 0 then
   ttrk = numrec % btrk
   else
   ttrk = (numrec % btrk) + 1
   tcyl = ttrk // 15
   if tcyl = 0 then
   tcyl = ttrk % 15
   else
   tcyl = (ttrk % 15) + 1
   utrkpct  = format(((utrk * 100) / 56664),3,2)
   v3390#1  = format((tcyl /    1113),6,2)
   v3390#2  = format((tcyl /    2226),6,2)
   v3390#3  = format((tcyl /    3339),6,2)
   v3390#9  = format((tcyl /   10017),6,2)
   v3390#27 = format((tcyl /   32760),6,2)
   v3390#54 = format((tcyl /   65520),6,2)
   v3390#A  = format((tcyl /  262668),6,2)
   v3390#A4 = format((tcyl / 1182006),6,2)
   signal panel
/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
 DropISPF: Procedure
 arg load_info
 Address ISPEXEC
 do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
       if libd = "ALTLIBC" then lib = "CLIST"
                           else lib = "EXEC"
       Address TSO,
         "Altlib Deact Application("lib")"
       end
    else "libdef" libd
    address tso "free f("dd")"
    end
 return 0
/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
>START
>Panel DSKCALC
)ATTR
  ¬   TYPE(OUTPUT)  INTENS(HIGH)
  $   TYPE(OUTPUT)  INTENS(HIGH) JUST(RIGHT)
)BODY
%--------------------------- &DSK Space Calculation ----------------------------
%Command ===>_ZCMD                                                             +
+
%Enter Space Information:+
    Blocksize . . . . . ._DLEN +
    Number of blocks. . ._NUMREC    +  (blank if "Total tracks" specified below)
    Key length. . . . . ._Z  +         (blank if no key)

%Calculation Results:+
    Used bytes per track. . . . :¬UTRK +     Percent. . :¬UTRKPCT+
    Wasted bytes per track. . . :¬WTRK +
    Blocks per track. . . . . . :¬BTRK+
    Blocks per cylinder . . . . :¬BCYL+
    Total tracks required . . . ._TTRK        +
    Total cylinders required. . :¬TCYL        +

    Volumes required:  -1$v3390#1  + -2$v3390#2  + -3$v3390#3  + -9$v3390#9  +
                      -27$v3390#27 +-54$v3390#54 + -A$v3390#A  +-A4$v3390#A4 +
)INIT
.help = dskcalch
.ZVARS = '(KLEN)'
)PROC
IF (&DSK = 3390)
  VER (&DLEN,NB,RANGE,0,56664)
IF (&TTRK = &Z)
  VER (&NUMREC,NB,RANGE,1,2147483647)
IF (&NUMREC = &Z)
  VER (&TTRK,NB,RANGE,1,2147483647)
VER (&KLEN,RANGE,0,255)
)END
>Panel DSKCALCH
)ATTR DEFAULT(%@¬)
  ! TYPE(TEXT) COLOR(TURQ) HILITE(USCORE)
  % TYPE(TEXT) INTENS(HIGH)
  @ TYPE(TEXT) INTENS(LOW)
  ¬ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
  # AREA(SCRL) EXTEND(ON)
)BODY CMD( ) WINDOW(67,20)
%
%                        CKD DEVICES
%
%               DATA  ALT  TRACKS/  BYTES/   BYTES/       BYTES/
%DISK TYPE      CYLS  CYLS   CYL    TRACK     CYL         MODULE
#DASDAREA --------------------------------------------------------#
)AREA DASDAREA
 3390-1        1113    1     15    56,664   849,960     946,005,480
 3390-2        2226    1     15    56,664   849,960   1,892,010,960
 3390-3        3339    1     15    56,664   849,960   2,838,016,440
 3390-9       10017    3     15    56,664   849,960   8,514,049,320
 3390-9*3     32760    0     15    56,664   849,960  27,844,689,600
 3390-9*6     65520    0     15    56,664   849,960  55,689,379,200
 3390-A      262668    0     15    56,664   849,960 223,257,293,280
 3390-A*4   1182006    0     15    56,664   849,960             1TB
 3390-A*n 268434453    0     15    56,664   849,960           225TB
 9345-1        1440    0     15    46,456   696,840   1,003,449,600
 9345-2        2156    0     15    46,456   696,840   1,502,387,040
 3380 A/B/D/J   885    1     15    47,476   712,140     630,243,900
 3380 E        1770    2     15    47,476   712,140   1,260,487,800
 3380 K        2655    3     15    47,476   712,140   1,890,731,700
 EMC3380K+     3339    3     15    47,476   712,140   2,377,835,460
 EMC3380K++    3993    3     15    47,476   712,140   2,843,575,020
 3375           959    1     12    35,616   427,392     409,868,928
 3350           555    5     30    19,069   572,070     317,498,850
 3340-35        348    1     12     8,368   100,416      34,944,768
 3340-70        696    2     12     8,368   100,416      68,889,536
 3330-1         404    7     19    13,030   247,570     100,018,280
 3330-11        808    7     19    13,030   247,570     200,036,560
 2314           200    3     20     7,294   145,880      29,176,000
 2311           200    3     10     3,625    36,250       7,250,000
 2305-1          48    6      8    14,136   113,088       5,428,224
 2305-2          96   12      8    14,660   117,280      11,258,880

               Compiled by John Broughton, SDI (www.sdisw.com)
                Updated by John Kalinich, CSC
)INIT
  &ZUP = DASDGEOM
  &ZWINTTL = 'DASD Geometry Chart'
  &ZCMD = ' '
  &CMD = ' '
)PROC
)END
>END
