/* --------------------  rexx procedure  --------------------------- */
csctvers = 'CSECTSÂ®   2021-08-02'
/* Name:      CSECTS                                                 |
 |                                                                   |
 | Function:  Present the user with a table of available             |
 |            CSECTs from which the user may select to LIST,         |
 |            DISAssemble, or DLInk with the PDS command.            |
 |                                                                   |
 | Use:       User extended line command in P86LLUX to display a     |
 |            list of CSECTs for a load module.                      |
 |                                                                   |
 |            CS,'CMD(%CSECTS ''&PDSDSN'' &PDSMEM &PDSVOLAL)'        |
 |                                                                   |
 | Syntax:    %CSECTS dsname loadmod                                 |
 |                                                                   |
 | Author:    Janko Kalinic (inspired by Lionel B. Dyck)             |
 |            The ISPF Cabal - Vive la revolution                    |
 |                                                                   |
 | Notes:     Program Objects (format 1 and 2) can be DeLINKed       |
 |            if they are copied into a non-PDSE load library.       |
 |                                                                   |
 | History:  (most recent on top)                                    |
 |            08/02/21 - Translator PAS field for IDRL command       |
 |            07/05/21 - Edit Find string for equal delimiters       |
 |            05/26/21 - Add Volume to PDS command                   |
 |            02/28/21 - Add *Action column to table display         |
 |            02/21/21 - Add INFO primary command                    |
 |            02/16/21 - Add X line command. Invoke SPZAP DUMP       |
 |                     - Add IDRL primary command                    |
 |            02/09/21 - Add REASM edit macro for DISASM output      |
 |            02/08/21 - Add HISTORY command                         |
 |            02/07/21 - Add RELINK edit macro for DLINK output      |
 |            02/03/21 - Use MAP/HIST to create table                |
 |            01/28/21 - Add FIND primary command                    |
 |                     - Add point-and-shoot column headers (SORT)   |
 |                     - Add SORT primary command                    |
 |                     - Add O line command. Invoke DLINK            |
 |            12/09/18 - Add D line command. Invoke SPZAP DUMPT      |
 |                       for program objects in a PDSE               |
 |            04/04/18 - Creation                                    |
 * ----------------------------------------------------------------- */

/* --------------- *
 | define defaults |
 * --------------- */
  parse value '' with null load_info
  unique_dd = '$'right(time("s"),7,"0")
/* ----------------------- *
 * Get the passed module  *
 * ----------------------- */
  parse upper arg pdsdsn module pdsvol
/* ---------------------------------------- *
 | Build and Display the table of CSECTs    |
 * ---------------------------------------- */
  Address ISPExec
  load_info = loadispf()
  x = outtrap("stdout.","*")
  Address TSO
  'newstack'
  queue "history "module
  queue "end"
  "pds "pdsdsn" xispmode vol("pdsvol")"
  'delstack'
  x= outtrap("off")
  x = outtrap("mapout.","*")
  Address TSO
  'newstack'
  queue "map "module "short"
  queue "end"
  "pds "pdsdsn" xispmode vol("pdsvol")"
  'delstack'
  x= outtrap("off")

  csdsn = pdsdsn
  csmodule = module
  csvol = pdsvol

  Address ISPexec
  call build_list
  ztdsels = 0
  src = 0
  rowcrp = 0
  crp = 1
  table_panel = CSECTS
  do forever
    zcmd = null
    zsel = null
    if ztdsels > 0 then src = 4
    if src = 4 then "TBDispl" csctable
    else do
      "TBTOP" csctable
      "TBSKIP" csctable "NUMBER("crp")"
      if rowcrp = 0 then
         "TBDISPL" csctable "PANEL("table_panel")"
      else
         "TBDISPL" csctable "PANEL("table_panel")",
                  "CSRROW("rowcrp") AUTOSEL(NO)"
    end
    src = rc
    crp = ztdtop
    if rc > 4 then do
      'tbend' csctable
      leave
    end
    if datatype(row) /= 'NUM' then row = 0
    if row /= 0 then do
      ssel = zsel
      "TBTOP" csctable
      "TBSKIP" csctable "NUMBER("row")"
      zsel = ssel
    end
    if zcmd /= null then do
      zcmd_asis = zcmd
      zcmd = translate(zcmd)
      Select
        When zcmd = 'RL' then do
             if srchcsct = null then do
                smsg = 'Invalid'
                lmsg = 'Repeat Locate (RL) must follow' ,
                       'a Locate command.'
                'setmsg msg(csct001)'
                end
             else call do_locate srchcsct 'Next'
             end
        When abbrev('IDRL',translate(word(zcmd,1)),4) = 1 then do
             'Select pgm(isptutor) parm(csectsh2)'
             end
        When abbrev('HEL',translate(word(zcmd,1)),3) = 1 then do
             'Select pgm(isptutor) parm(csectsh)'
             end
        When abbrev("HISTORY",word(zcmd,1),1) = 1 then do
             zcmd = ''
             call do_change_history
             end
        When abbrev("INFO",word(zcmd,1),4) = 1 then do
             zcmd = ''
             x = outtrap("attrout.","*")
             Address TSO
             'newstack'
             queue "attrib "module "short"
             queue "end"
             "pds "pdsdsn" xispmode vol("pdsvol")"
             'delstack'
             x= outtrap("off")
             Address ISPExec
             "dsinfo dataset("pdsdsn")"
             attr_line = 7                 /* PDS  */
             if zdsdsnt = 'LIBRARY' then   /* PDSE */
               attr_line = 9
             if left(attrout.attr_line,7) = 'PDS232I' then
               csctattr = substr(attrout.attr_line,51,70)
             else
               csctattr = substr(attrout.attr_line,43,70)
             drop attrout.
             zerrsm = ''
             zerrlm = left('Load module attributes:',73),
                      left(csctattr,73)
             zerralrm = 'NO'
             zerrhm = 'csectsh'
             Address ISPExec
             'setmsg msg(isrz002)'
             end
        When abbrev("VERSION",word(zcmd,1),1) = 1 |,
             abbrev("ABOUT",word(zcmd,1),4)   = 1 then do
             zcmd = ''
             zerrsm = ''
             zerrlm = left(csctvers,73),
                      left('Janko Kalinic',73),
                      left('The ISPF Cabal - Vive la revolution',73),
                      left('Copyleft - GNU GPL v3',73),
                      left('the.pds.command@gmail.com',73)
             zerralrm = 'NO'
             zerrhm = 'csectsh'
             Address ISPExec
             'setmsg msg(isrz002)'
             end
        When abbrev('SORT',translate(word(zcmd,1)),4) = 1 then do
             sortcol = word(zcmd,2)
             Select
               When abbrev('NAME',sortcol,1) = 1 then
                 fields = 'fields(csctname,c,a)'
               When abbrev('DATE',sortcol,1) = 1 then
                 fields = 'fields(csctdate,c,d,csctname,c,a)'
               When abbrev('ADDRESS',sortcol,1) = 1 then
                 fields = 'fields(csctxloc,c,a)'
               When abbrev('LENGTH',sortcol,1) = 1 then
                 fields = 'fields(csctxlen,c,d)'
               Otherwise
                 fields = 'fields(csctname,c,a)'
               end
             'tbsort' csctable fields
             end
        When abbrev('SEL',translate(word(zcmd,1)),1) = 1 then do
             parse value zcmd with x csctname
             if csctname = null then do
                smsg = 'Unknown'
                lmsg = 'Select requires a CSECT name.'
                'Setmsg msg(csct001)'
                end
             else do
                  call do_it
                  end
             end
        When abbrev('LOCATE',translate(word(zcmd,1)),1) = 1 then
          call do_locate subword(zcmd,2)
        When abbrev('FIND',translate(word(zcmd,1)),1) = 1 then do
          parse value zcmd_asis with findcmd findargs
          call do_find
          end
        Otherwise do
          smsg = 'Unknown'
          lmsg = word(zcmd,1) 'is an unknown command.'
          'Setmsg msg(csct001)'
          end
        end
      end
    if zsel /= null then do
      call do_it
      end
  end
/* -------------------------- *
 | Done so clean up and leave |
 * -------------------------- */
  x = dropispf(load_info)
  exit
/* ---------------------------------------- *
 | Build the list of available CSECTs by    |
 | executing the PDS HISTORY command.       |
 * ---------------------------------------- */
build_list:
  csctable = 'csc'random(999)
  csctact = ''
  'tbcreate' csctable 'keys(csctname) ,
    names(csctact csctdesc csctloc csctlen csctdate csctxloc csctxlen)',
    'replace share nowrite'
  do j = 1 to mapout.0
    if datatype(substr(mapout.j,11,6),'X') /= 1 then iterate
    Parse Var mapout.j csctname +10 csctloc +8 csctlen +6
    csctxloc = right(x2d(strip(csctloc)),8,'0')
    csctxlen = right(x2d(strip(csctlen)),8,'0')
    do i = 1 to stdout.0
      Parse Value '' with csctdesc csctdate
      if substr(stdout.i,12,1) /= '/' then Iterate
      Parse Var stdout.i histname +9 csctdesc +30
      if csctname = histname then do
        yy = substr(csctdesc,7,2)
        mm = bitor(left(csctdesc,2),'f0f0'x)
        dd = substr(csctdesc,4,2)
        cc = 20;if yy > 65 then cc = 19
        csctdate = cc||yy||mm||dd
        leave
        end
      end
    'tbadd' csctable 'order'
  end
  drop stdout.
  drop mapout.
  'tbtop' csctable
  'tbsort' csctable 'fields(csctname,c,a)'
  return
/* --------------------- *
 | Locate CSECT in table |
 * --------------------- */
do_Locate:
  arg srchcsct next
  if srchcsct = null then do
    smsg = 'Invalid'
    lmsg = 'No CSECT name provided'
    'Setmsg msg(csct001)'
  end
  else do
    if next = null
       then 'tbtop' csctable
    else do
      'tbtop' csctable
      'tbskip' csctable 'Number('crp')'
       end
    rlhit = 0
    'tbvclear' csctable
    csctname = srchcsct'*'
    if next /= null then next = 'NEXT'
    'tbsarg' csctable 'namecond(csctname,EQ)' next
    newcrp = 0
    'tbscan' csctable 'position(newcrp)'
    if rc > 0 then do
       if rlhit = 0 then do
          rlhit = 1
          'tbtop' csctable
          'tbvclear' csctable
          csctname = srchcsct'*'
         'tbsarg' csctable 'namecond(csctname,EQ)'
          newcrp = 0
          'tbscan' csctable 'position(newcrp)'
          if rc = 0 then do
             crp = newcrp
             smsg = 'Wrapped'
             lmsg = srchcsct 'found after wrapping the table.'
             'setmsg msg(csct001)'
             end
          else do
               smsg = 'Not found'
               lmsg = srchcsct 'not found.'
               'setmsg msg(csct001)'
               end
          end
       else do
             smsg = 'Not found'
             lmsg = srchcsct 'not found.'
             'setmsg msg(csct001)'
             end
       end
    else do
         crp = newcrp
         smsg = 'Found'
         lmsg = srchcsct 'found in row' crp
         'setmsg msg(csct001)'
         end
    end
  return
do_it:
/* ------------------------------------------------- *
 * Issue the PDS command and trap the output         *
 * ------------------------------------------------- */
  x = Outtrap("stdout.","*")
  Address ISPExec
  Select
    When zsel = 'A' then do
      csctact = '*Disasm'
      'tbmod' csctable
      pdscmd = "asmd   "module csctname
      end
    When zsel = 'O' then do
      csctact = '*Delink'
      'tbmod' csctable
      pdscmd = "dlink "module
      end
    When zsel = 'D' then do
      csctact = '*Dumpt'
      'tbmod' csctable
      call dumpt
      signal skipcmd
      end
    When zsel = 'X' then do
      csctact = '*Dumpx'
      'tbmod' csctable
      call dumpt
      signal skipcmd
      end
    Otherwise do
      csctact = '*List'
      'tbmod' csctable
      pdscmd = "list "module "module("csctname")"
      end
  end
  Address TSO
  'newstack'
  queue pdscmd
  queue "end"
  "pds "pdsdsn" xispmode vol("pdsvol")"
  'delstack'
  x= Outtrap("off")
skipcmd:
  Address ISPexec
  if zsel = 'V' | zsel = 'O' | zsel = 'A'
     then cscvopt = 'View'
     else cscvopt = 'Browse'
/* --------------------- *
 | Find the lrecl to use |
 * --------------------- */
  lrecl = 80
  do lx = 1 to stdout.0
    l = length(stdout.lx)
    if l > lrecl then lrecl = l
  end
/* ------------------------------ *
 | Extract CSECT from DELINK deck |
 * ------------------------------ */
  if zsel = 'O' then do
    Address TSO
    'newstack'
    do x = 1 to stdout.0
      if substr(stdout.x,2,3) = 'ESD' &,
         substr(stdout.x,17,8) = csctname &,
         substr(stdout.x,25,1) = '00'x then do
         queue stdout.x
         do x = x+1 to stdout.0
           if substr(stdout.x,2,3) = 'END' then do
             queue stdout.x
             queue
             lrecl = 80
             leave
             end
           else
             queue stdout.x
           end
        end
      end
    end
/* ------------------------ *
 | Now display the CSECTs   |
 * ------------------------ */
  Address TSO
  cscdd = 'zsyn'random(9999)
  'alloc f('cscdd') unit(sysda) space(15,50) tr' ,
    'recfm(v b) lrecl('lrecl+4') blksize(0)'
  if zsel = 'O' & queued() /= 0 then do
    'execio * diskw' cscdd '(finis'
    'delstack'
    end
  else
    'execio * diskw' cscdd '(finis stem stdout.'
  drop stdout.
  Address ISPexec
  'vput (csdsn csmodule csvol)'
  "LMINIT DATAID(lmb) DDNAME("cscdd")"
  'Control Display Save'
  select
    when zsel = 'O' then
      cscvopt 'dataid('lmb') macro(rlinkmsg)'
    when zsel = 'A' then
      cscvopt 'dataid('lmb') macro(rasmmsg)'
    otherwise
      cscvopt 'dataid('lmb')'
    end
  'Control Display Restore'
  "LMFree  Dataid("lmb")"
  Address TSO 'Free f('cscdd')'
  Address ISPExec
  return
dumpt:
/* ------------------------------------------------- *
 * Execute Superzap DUMPT and display the output     *
 * ------------------------------------------------- */
  Address TSO
  "newstack"
  if zsel = 'D' then
    queue 'DUMPT 'module csctname
  else
    queue 'DUMP  'module csctname
  queue
  "alloc f(sysin) unit(vio) new reuse space(1,1) tracks",
    "lrecl(80) recfm(f)"
  "execio * diskw sysin (finis"
  "delstack"
  "alloc f(sysprint) unit(vio) new reuse space(15,15) tracks",
    "lrecl(121) recfm(f b a) blksize(27951)"
  "alloc f(syslib) dsn("pdsdsn") vol("pdsvol") shr reuse"
  Address LINKMVS "IGWSPZAP"
  "execio * diskr sysprint (stem stdout. finis"
  Address TSO
  "alloc f(sysprint) da(*) shr reuse"
  "alloc f(sysin)    da(*) shr reuse"
  "free  f(syslib)"
  return
do_find:
/* ------------------------------------------------- *
 * FIND string in load module                        *
 * ------------------------------------------------- */
  cscvopt = 'Browse'
  findargs = strip(findargs)
  if left(findargs,1) <> right(findargs,1) then do
    zedsmsg = 'Invalid'
    zedlmsg = 'Find string is not a valid delimited string'
    'setmsg msg(isrz001)'
    return
    end
  x = outtrap("fndout.","*")
  Address TSO
  'newstack'
  queue "find "module findargs
  queue "end"
  "pds "pdsdsn" xispmode vol("pdsvol")"
  'delstack'
  x= outtrap("off")
  cscdd = 'zfnd'random(9999)
  'alloc f('cscdd') unit(sysda) space(15,15) tr' ,
    'recfm(f b) lrecl(80) blksize(0)'
  'execio * diskw' cscdd '(finis stem fndout.'
  drop fndout.
  Address ISPExec
  "LMINIT DATAID(lmb) DDNAME("cscdd")"
  if load_info /= null then
     'Control Display Save'
  cscvopt 'dataid('lmb')'
  if load_info /= null then
     'Control Display Restore'
  "LMFree  Dataid("lmb")"
  Address TSO 'Free f('cscdd')'
  Address ISPExec
  return
do_change_history:
/* --------------------------------- *
| Change history routine            |
* --------------------------------- */
  hist. = ''
  hist.1 = ' CSECTS Change History'
  hist.2 = ' '
  line = 1
  x = sourceline(line)
  do until pos(' | History:',x) > 0
    line = line + 1
    x = sourceline(line)
    iterate
  end
  tail = 3
  do until pos(' * ----',x) > 0
    parse value x with '|' hist.tail '|'
    line = line + 1
    tail = tail + 1
    x = sourceline(line)
  end
  hist.0 = tail - 1
  call do_view_stem hist
  drop hist.
  return
  /* --------------------------------- *
  | ISPF View Stem routine            |
  * --------------------------------- */
do_view_stem:
  parse arg stem
  Address TSO
  'alloc f('unique_dd') unit(vio) new reuse space(1,1) tracks',
    'lrecl(80) recfm(f b) blksize(0) dsorg(ps)'
  'execio * diskw' unique_dd '(finis stem' stem'.'

  Address ISPExec
  'lminit dataid(id) ddname('unique_dd') enq(exclu)'
  if rc /= 0 then do
    zedsmsg = 'Error'
    zedlmsg = 'Error.  LMINIT failed for VIO output file'
    'setmsg msg(isrz001)'
    exit
  end
  'view   dataid('id')'
  'lmfree dataid('id')'
  Address TSO 'free f('unique_dd')'
  return
/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
 DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
     parse value load_info with dd libd load_info
     if left(libd,6) = "ALTLIB" then do
        if libd = "ALTLIBC" then lib = "CLIST"
                            else lib = "EXEC"
        Address TSO,
          "Altlib Deact Application("lib")"
        end
     else "libdef" libd
     address tso "free f("dd")"
     end
  return 0
/*
>START
>Panel CSECTS
)Attr Default(%+_)
   _ type(input) intens(high) caps(off) just(left)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   Â¬ type(output) intens(low ) caps(off) just(asis ) pad(' ') color(green)
   @ type(output) intens(low ) caps(off) just(left ) pad(' ') color(blue)
   ~ type(output) intens(low ) caps(off) just(left ) pad(' ') color(red)
   $ type(text) intens(high) hilite(reverse)
   # type(text) intens(high) color(turq)
   ? type(output) pas(on) color(yellow) caps(off) hilite(uscore)
)Body  Expand(\\) Width(&zscreenw)
#CSECTSÂ®%-\-\$CSECT Display%\-\-
%Command ===>_zcmd                                 \ \%Scroll ===>_amt +
%
+Primary Commands:%L csect+- Locate  %SORT col+- Sort  %F 'string'+- Find
+Line Commands:   %S+- List  %A+- Disasm  %D+- Dumpt  %X+- Dumpx  %O+- Delink
+
%Module:# &module    %Dsname:# &dsname                            %Vol:# &pdsvol
%    ?name    +           ?date    + ?trans     + Version  ?address+ ?length+
)Model
!z+  @z        ~z         Â¬z                               Â¬z        Â¬z
)Init
  .ZVARS = '(zsel csctname csctact csctdesc csctloc csctlen)'
  if (&amt = &z)
      &amt = csr
  .cursor = zcmd
  .help = csectsh
  &name    = 'Name'
  &date    = 'Date'
  &trans   = 'Translator'
  &address = 'Address'
  &length  = 'Length'
  *Rexx(pdsdsn dsname)
   dsname = strip(pdsdsn,,"'")
  *EndRexx
)Proc
if (&zsel = _)
    &zsel = &z
ver (&zsel,list,S,V,A,D,X,O,'=')
if (&ztdsels = 0000)
   &row = .csrrow
   if (&row Â¬= 0)
       if (&zsel = &z)
           &zsel = 'S'
if (&ztdsels Â¬= 0000)
    &row = 0
if (&zsel Â¬= &z)
   if (&zsel = '=')
       &zsel = &osel
&osel = &zsel
)PNTS
FIELD(name)     VAR(ZCMD) VAL('SORT NAME')
FIELD(date)     VAR(ZCMD) VAL('SORT DATE')
FIELD(trans)    VAR(ZCMD) VAL('IDRL')
FIELD(address)  VAR(ZCMD) VAL('SORT ADDRESS')
FIELD(length)   VAR(ZCMD) VAL('SORT LENGTH')
)End
>Panel csectsh
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(TURQ)
   !   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(RED)
   @   TYPE(TEXT)  INTENS(HIGH) SKIP(ON) HILITE(USCORE) COLOR(BLUE)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+\-\(%CSECT Display+)\-\%Tutorial
%Command ===>_ZCMD
+
+This table displays the CSECT structure of a load module.
+
+Primary Commands:
%  Locate csect next+Locate CSECT in table       %  History+CSECTSÂ® changes
%  RL               +Repeat Locate               %  Version+CSECTSÂ® version
%  Find 'string' .. +Find 'string' in load module%  IDRL   +Compiler signatures
%  SORT column      +Sort column (N, D, A, or L) %  INFO   +Module attributes
+
+Line Commands:
%  S+  +Display CSECT with PDS LIST
%  A+  +Disassemble CSECT with PDS DISASM
%  D+  +Dump CSECT with SPZAP DUMPT
%  X+  +Dump CSECT with SPZAP DUMP
%  O+  +Delink CSECT with PDS DLINK
+
+Note:  The LIST output can be disassembled with the Arthur Fichtl
+       REXX Interactive Short DisAssembler, ISDA on CBT File 773.
+       1.  Assign a PF key as follows:  PF13  . . tso isda
+       2.  Setup:  Enter start column and number of lines:  16 5 %<PF13>+
+       3.  Disassemble:  Position cursor on instruction and press%<PF13>+
)PROC
 &zcont = csectsh2
)End
>Panel csectsh2
)ATTR DEFAULT(%~`)
   !   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(TURQ)
)BODY WINDOW(74,21)
 ~S/360 OS Assembler (F)    %360SAS037   ~C/370 Compiler V1    %5688040
 ~OS Assembler H            %5734AS100   ~C/370 Compiler V2    %5688187
 ~OS/VS Assembler (XF)      %5741SC103   ~SAA AD/Cycle C/370   %5688216
 ~Assembler H V2            %566896201   ~C/C++ for MVS/ESA    %5688216
 !High Level Assembler z/OS %569623400   ~C/C++ OS/390 R2      %5645001
 ~OS/VS COBOL R2M2   (VSR2) %40CB1       ~C/C++ OS/390 R4      %5647A01
 ~OS/VS COBOL R2M3/4 (VSR1) %5740CB103   !XL C/C++ z/OS        %5694A01
 ~VS COBOL II               %566895801   ~APL2 Version 1       %5688-899
 ~COBOL/370 for MVS/VM      %566895807   ~APL2 Version 2       %5688-228
 ~COBOL for OS/390 V2       %5648A2500   ~VS PASCAL            %566876701
 ~Enterprise COBOL z/OS V3  %5655G5300   !REXX/370             %569501301
 ~Enterprise COBOL z/OS V4  %5655S7100   ~Assembler G          %ASMG21FEB
 ~Enterprise COBOL z/OS V5  %5655W3200   ~CA PL/S Clone        %CA-PLNK 0
 !Enterprise COBOL z/OS V6  %5655EC6     ~Goal Systems REXX    %GREXX-00
 ~VS FORTRAN V2             %5668-806    ~Lattice C            %LATTICE_C
 ~OS PL/I Opt Compiler V1   %5734-PL1    ~REXXTOOLS            %RXTCOMP
 ~OS PL/I V2                %5668-910    ~SAS/C                %SAS/C
 ~PL/I for MVS and VM V1    %5688-235    ~XPEDITER             %TMCOMPIL
 ~Enterprise PL/I z/OS V3   %5655-H31    ~Fujitsu Assembler    %F4JLA
 ~Enterprise PL/I z/OS V4   %5655-W67    ~Russian Assembler    %52ASM32B88
 !Enterprise PL/I z/OS V5   %5655-PL5    ~Intermetrics MVS/Ada %MVSCONVERT
)Init
 &ZWINTTL = 'Compiler Translator Signatures'
)Proc
 &ZWINTTL = ''
 &zcont = csectsh2
)END
>exec relink
/* Rexx */
Address ISREdit
'Macro'
Address ISPExec
"vget (csdsn csmodule csvol)"
x = outtrap("mapjcl.","*")
Address TSO
'newstack'
queue "map "csmodule "jcl"
queue "end"
"pds "csdsn" xispmode vol("csvol")"
'delstack'
x= outtrap("off")
Address ISREdit
do x = 14 to 8 by -1
  jcl = strip(mapjcl.x,'T')
  "line_before .zfirst = (jcl)"
  end
do x = 15 to mapjcl.0
  lnk = strip(mapjcl.x,'T')
  "line_after .zlast = (lnk)"
  end
jclnull = "//"
"line_after  .zlast  = (jclnull)"
"hilite jcl"
"reset"
exit
>exec rlinkmsg
Address ISREdit
'Macro'
linkmsg = 'Use RELINK macro to generate JCL and linkage editor control',
          'statements'
"reset"
"line_before .zfirst = msgline (linkmsg)"
exit
>exec reasm
/* Rexx */
Address ISREdit
'Macro'
Address ISPExec
"vget (csdsn csmodule csvol)"
x = outtrap("mapjcl.","*")
Address TSO
'newstack'
queue "map "csmodule "jcl"
queue "end"
"pds "csdsn" xispmode vol("csvol")"
'delstack'
x= outtrap("off")
Address ISREdit
"find 'TITLE' 10"
if rc = 4 then return
"(lnum) = cursor"
lnum = lnum - 1         /* Before TITLE */
"label (lnum) = .end"
"delete .zfirst .end"
"delete .zlast  .zlast"

jcl. = ''
jcl.1  = "//ASM    EXEC  PGM=ASMA90,REGION=32M,                     "
jcl.2  = "//             PARM=(NORLD,TERM,OBJ,                      "
jcl.3  = "//             'XREF(SHORT,UNREFS),SIZE(MAX,ABOVE)')      "
jcl.4  = "//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR                   "
jcl.5  = "//         DD  DSN=SYS1.MACLIB,DISP=SHR                   "
jcl.6  = "//         DD  DSN=ASM.SASMMAC2,DISP=SHR                  "
jcl.7  = "//SYSUT1   DD  UNIT=VIO,SPACE=(4096,(120,120),,,ROUND),   "
jcl.8  = "//             DCB=BUFNO=1                                "
jcl.9  = "//SYSLIN   DD  UNIT=VIO,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),"
jcl.10 = "//             DSN=&&X,DCB=BLKSIZE=3120                   "
jcl.11 = "//SYSPRINT DD  SYSOUT=*                                   "
jcl.12 = "//SYSTERM  DD  SYSOUT=*                                   "

syslin1= "//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)                  "
syslin2= "//         DD  *                                          "

do x = 12 to 1 by -1
  jcl = strip(jcl.x,'T')
  "line_before .zfirst = (jcl)"
  end
do x = 8 to 13
  lnk = strip(mapjcl.x,'T')
  "line_after .zlast = (lnk)"
  end
"line_after .zlast = (syslin1)"
"line_after .zlast = (syslin2)"
do x = 15 to mapjcl.0
  lnk = strip(mapjcl.x,'T')
  "line_after .zlast = (lnk)"
  end
jclnull = "//"
"line_after  .zlast  = (jclnull)"
"hilite jcl"
"reset"
exit
>exec rasmmsg
Address ISREdit
'Macro'
asmmsg = 'Use REASM macro to generate JCL and linkage editor control',
          'statements'
"reset"
"line_before .zfirst = msgline (asmmsg)"
exit
>exec rlinkmsg
Address ISREdit
'Macro'
linkmsg = 'Use RELINK macro to generate JCL and linkage editor control',
          'statements'
"reset"
"line_before .zfirst = msgline (linkmsg)"
exit
>msg csct00
CSCT001 '&SMSG'
'&LMSG'
>END */
