1**********************************************************************
 *                                                                    *
 *                         PDSEDIT User Guide                         *
 *                                                                    *
 **********************************************************************


 PPPPPPP   DDDDDDD    SSSSSSS   EEEEEEE   DDDDDDD    IIIIIIII  TTTTTTTT
 PP    PP  DD    DD   SS        EE        DD    DD      II        TT
 PPPPPP    DD    DD   SSSSSSS   EEEEEEE   DD    DD      II        TT
 PP        DD    DD        SS   EE        DD    DD      II        TT
 PP        DDDDDDD    SSSSSSS   EEEEEEE   DDDDDDD    IIIIIIII     TT

 (PDS Editor)







 **********************************************************************
 *             (c) Copyright 1983, 1988, Amdahl Corporation           *
 *                       Licensed Program Product                     *
 *                    Property of Amdahl Corporation                  *
 *                   Disclosure to others prohibited                  *
 *              For terms and conditions of use, refer to             *
 *            license agreement for Amdahl Program Products           *
 **********************************************************************

 16:16:50 December 8, 1988


























1                            PDSEDIT User Guide

 Contents



 1.0  General Description . . . . . . . . . . . . . . . . . . . . . . 1

 2.0  Special Considerations and Options  . . . . . . . . . . . . . . 2
   2.1  In-Place Update . . . . . . . . . . . . . . . . . . . . . . . 2
   2.2  Copying of Members. . . . . . . . . . . . . . . . . . . . . . 2
   2.3  'Browse Mode' . . . . . . . . . . . . . . . . . . . . . . . . 2
   2.4  Handling of Aliases and Directory Information . . . . . . . . 2

 3.0  Input and Output  . . . . . . . . . . . . . . . . . . . . . . . 3

 4.0  JCL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

 5.0  Control Statements - Formats and Actions  . . . . . . . . . . . 6
   5.1  PDS Statement . . . . . . . . . . . . . . . . . . . . . . . . 6
   5.2  FIND and CHANGE Statements  . . . . . . . . . . . . . . . . . 8
     5.2.1  Program Action When string1 and string2 Have
            Different Lengths . . . . . . . . . . . . . . . . . . . . 9
   5.3  INSERT and DELETE Statements  . . . . . . . . . . . . . . .  10

 6.0  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   6.1  Change 1 String in all Members of a PDS . . . . . . . . . .  12
   6.2  Insert Lines After Every Occurrence of a Specified
        String  . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   6.3  Replace Lines Containing a Specified String in 2 PDS's  . .  13

 7.0  Example of Output . . . . . . . . . . . . . . . . . . . . . .  14
   7.1  SYSPRINT Output (Summary Report)  . . . . . . . . . . . . .  14
   7.2  SYSOUT Output (Detail Report) . . . . . . . . . . . . . . .  15

 8.0  Messages  . . . . . . . . . . . . . . . . . . . . . . . . . .  18
   8.1  Messages Issued During Scan of Control Statements . . . . .  18
   8.2  Messages Issued During Editing  . . . . . . . . . . . . . .  19


















                           Contents                                -I-
1                            PDSEDIT User Guide

 1.0  General Description



 PDSEDIT is an editor designed to operate in a batch environment on
 partitioned data sets.  Individual members may be selected or excluded
 from the edit process.  The edited members may replace their original
 versions or be written into a different partitioned data set.  Four
 edit functions are provided:


   - Find all occurrences of a specified string.  The search may be
     limited to specified columns.

   - Change all occurrences of a specified string.  The search may be
     limited to specified columns.

   - Insert lines before or after each line containing a specified
     string (used in conjunction with a find or change).

   - Delete lines including and following each line containing a
     specified string (used in conjunction with a find or change).

 Data sets to be edited may have fixed or variable-length records,
 blocks or unblocked, with record length up to 255 bytes.  Spanned
 records are not allowed.




























                      General Description                          -1-
1                            PDSEDIT User Guide

 2.0  Special Considerations and Options



 2.1  In-Place Update

 If edited members are to be written back into the input PDS, and the
 input PDS has fixed-length records, a member which has changed
 but has had no insertions or deletions will be updated in place.


 2.2  Copying of Members

 If edited members are to be written into a different PDS, normally all
 members which are processed (i.e., all members which are either
 explicitly selected or not explicitly excluded) will be written into
 the output PDS.  There are two exceptions, however.  First, if the
 control statements specify only strings to find (no changes,
 insertions, or deletions), no members will be written out.  Second,
 the user may specify via a keyword on the PDS control statement (see
 description below) that only those members which were changed are to
 be written to the output PDS.


 2.3  'Browse Mode'

 If no changes, insertions, or deletions are specified in the control
 statements, PDSEDIT will run 'in Browse Mode' - i.e., will produce
 summary and optional detail reports but will not attempt to write out
 any members.  The user may also force PDSEDIT to run in Browse Mode
 for a specified PDS via a keyword on the PDS control statement (see
 description below).  In this case, control statements specifying
 changes will be treated as if they had specified 'FIND' only, and
 control statements specifying insertions and deletions will be
 ignored.  Specification of this keyword ensures that no inadvertent
 changes will be made to the specified PDS.


 2.4  Handling of Aliases and Directory Information

 Aliases will not be edited (even if specifically selected), nor will
 their directory entries reflect changes made to the main member.  User
 directory information (e.g., SSI or SPF statistics) will not be
 preserved except in the case of In-Place updates.










               Special Considerations and Options                  -2-
1                            PDSEDIT User Guide

 3.0  Input and Output



 PDSEDIT requires the following input:

     1.  One or more partitioned data sets to be edited (or to receive
         edited members)  Note:  Data sets to be edited must be PDS's;
         Attempting to edit a sequential or dummy data set will result
         in a program ABEND.

     2.  Control statements describing the functions to be performed

 PDSEDIT produces the following output:

     1.  Updated versions of the partitioned data sets

     2.  A summary report containing:

         - A listing of the control statements supplied, with
           informational and error messages generated during scanning
           of the control statements
         - For each partitioned data set, a summary of the number of
           members processed, number changed, etc.
         - For each member, a line summarizing number of finds,
           changes, etc.
         - Any error messages generated during the edit process

     3.  (Optional)  A detailed report listing every line in which a
         specified string was found or changed (in the case of a
         change, both the original line and the changed version will be
         printed), as well as lines which were inserted or deleted.

     4.  A return code:

         00  Indicates normal completion

         04  Indicates a member error:  An error was encountered in
                 editing one or more members, but processing continued
                 with the next member.  Errors of this type include:
             - Attempt to edit an alias
             - Line overflow while processing a change (member was
               written out)
             - I/O error in reading a member (member was not written
               out)
             - Insufficient storage to contain a member (member was not
               written out)
             - I/O error in writing a member
             - Insufficient directory space to STOW a new member (only
               occurs if members are being written into a different
               PDS)

         08  Indicates a PDS error:  An error was encountered in

                        Input and Output                           -3-
1                            PDSEDIT User Guide





                 processing a PDS, but processing continued with the
                 next PDS (if any).  Errors of this type include:
             - Missing DD statement
             - Invalid record format
             - Record length greater than 255

         12  Indicates a syntax error in the control statements:  No
                 editing was attempted










































                        Input and Output                           -4-
1                            PDSEDIT User Guide

 4.0  JCL



 PDSEDIT requires the following JCL:

 //jobname  JOB   Initiates the JOB

 //stepname EXEC  Specifies PGM=PDSEDIT

 //STEPLIB  DD    Defines the PDS containing the PDSEDIT load module

 //SYSPRINT DD    Defines a sequential data set which will contain
                  the summary output of the program (see general
                  description)

 //SYSOUT   DD    Defines a sequential data set which will contain
                  the detail report (see general description);
                  omitting this DD statement or defining it as DUMMY
                  will effectively suppress printing the detail report

 //SYSIN    DD    Defines a sequential data set containing the control
                  statements

 //anyname1 DD    Defines PDS to edit or to receive edited members
                  (must not be defined as DUMMY)
 //anyname2 DD    Defines PDS to edit or to receive edited members
                  (must not be defined as DUMMY)
   (etc.)

 Notes:
     1.  SYSIN is assumed to be a sequential data set with record
         format FB and record length 80.
     2.  SYSPRINT and SYSOUT are assumed to be sequential data sets
         with record format FBA and record length 121.  Blocksize is
         optional, but if specified must be a multiple of 121.
     3.  PDS's to be edited should not be concatenated (PDSEDIT will
         handle only the first of concatenated data sets properly).
















                                JCL                                -5-
1                            PDSEDIT User Guide

 5.0  Control Statements - Formats and Actions



 PDSEDIT uses the following control statements:

    - PDS statement which defines a partitioned data set to be edited
      and optionally specifies an output partitioned data set, members
      to be selected or excluded, the columns within which editing is
      to be performed, and other options.

    - FIND statement which specifies a string to be scanned for and
      (optionally) the columns to which the search is to be restricted
      (specifying a range of columns on a FIND statement temporarily
      overrides the columns specified by the PDS statement).

    - CHANGE statement which specifies a string to be scanned for, a
      replacement string, and (optionally) the columns to which the
      search is to be restricted (specifying a range of columns on a
      CHANGE statement temporarily overrides the columns specified by
      the PDS statement).

    - INSERT statement which is associated with a FIND or CHANGE
      statement and specifies the number of lines to be inserted and
      where to insert them (before or after the line containing the
      find or change string).

    - DELETE statement which is associated with a FIND or CHANGE
      statement and specifies the number of lines to delete including
      and following a line containing the find or change string.

 In general, words in a control statement are separated by one or more
 blanks or commas.  Comments may be included:  A comment must begin
 with '/*' and end with '*/' and may be inserted anywhere a blank
 would be appropriate.  Control statements may begin in any column;
 columns 72 through 80 are ignored.

 All PDS statements must precede the first FIND, CHANGE, INSERT, or
 DELETE statement; if no PDS statements are supplied, defaults will be
 used (see following discussion of PDS statement).


 5.1  PDS statement

 The PDS statement has the format:

     PDS IN(dd1) OUT(dd2) FIELD(n1 n2) SELECT/EXCLUDE(m1 m2 ...)
         NOCOPY BROWSE






                      Control Statements                           -6-
1                            PDSEDIT User Guide

   Where

     IN(dd1) specifies the DDNAME of the PDS to edit

     OUT(dd2) specifies the DDNAME of the PDS to receive edited
         members.  This keyword is optional;  if omitted, edited members
     will be written back into the PDS referenced by dd1.

     FIELD(n1 n2) specifies the first and last columns to edit.  Data
         outside these bounds is not searched for specified strings.
         (note that these bounds may be overridden for an individual
         FIND or CHANGE statement).  This keyword is optional.  The
         default range is all but the last 8 columns of a fixed-length
         record or all but the first 8 columns of a variable-length
         record (the usual sequence number field).

     SELECT/EXCLUDE(m1 m2 ...) specifies the members to select for a
         exclude from the edit process.  This keyword is optional;  if
         omitted, all members except aliases will be edited.  Multiple
         occurrences of either SELECT or EXCLUDE are allowed, but both
         SELECT and EXCLUDE my not appear on the same PDS statement.
         'SELECT' may be abbreviated 'SEL' or 'S'; 'EXCLUDE' may be
         abbreviated 'EXCL' or 'E'.

     NOCOPY specifies that only members which have been changed are to
         be written out.   This keyword is optional and is only
         meaningful if the input and output PDS's are different.  If it
         is omitted, every member which is "processed" (i.e., scanned)
         will be written into the output PDS.

     BROWSE specifies that PDSEDIT is to process this PDS 'in Browse
         Mode' - i.e., is to treat CHANGE statements as FIND
         statements, is to ignore INSERT and DELETE statements, and is
         not to write edited members out.  This keyword is optional; if
         it is omitted, PDSEDIT will not run in browse mode unless
         control statements are limited to PDS and FIND statements.

 A PDS statement is assumed to continue until the next occurrence of a
 major keyword (PDS, FIND, CHANGE, INSERT, or DELETE).  It may
 therefore span multiple cards, with breaks between cards occurring
 anywhere a blank would be appropriate (see example below).

 Minor keywords (IN, OUT, FIELD, SELECT, and EXCLUDE) may appear in any
 order, and blanks may appear before and after parentheses.

 If there are no PDS statements, the program will behave as if the
 following had appeared as the first control statement:
     PDS IN(SYSUT1) OUT(SYSUT2), if a SYSUT2 DD statement is present
         - or -
     PDS IN(SYSUT1), if no SYSUT2 DD statement is present

 Some examples of valid PDS statements:


                      Control Statements                           -7-
1                            PDSEDIT User Guide

     PDS IN(PDSIN),OUT(PDSOUT),SELECT(M1,M2,M3)

     PDS IN ( PDSIN )              /* Input PDS */
         OUT( PDSOUT)              /* Output PDS */
         SEL( M1                   /* Only members M1, M2, M3 */
              M2
              M3    )



 5.2  FIND and CHANGE Statements

 These statements have the format:

     FIND/F  (n1 n2)  /string1/

     CHANGE/C  (n1 n2)  /string1/string2/

   Where

     (n1 n2) specifies the first and last columns to scan for string1.
         (this is a temporary override for the field keyword on the PDS
         statement).  Note that only occurrences of string1 which are
         completely contained within the specified bounds will be
         found;  e.g., an occurrence of 'ABC' starting in column n2 will
         not be found.  This parameter is optional , but if present must
         precede /string1/.

     string1 is the string to be found (minimum length 1; maximum
         length 255)

     string2 is its replacement (may be null; maximum length 255)

     '/', the string delimiter, may be any character except a blank, a
         comma, or a left parenthesis.  (it may not be a '/' if the
         first character of the string is a '*').

 A FIND or CHANGE statement is assumed to continue until 'enough'
 string delimiters are found (2 for a FIND, 3 for a CHANGE).  If column
 71 is reached before the string delimiter is found, the string is
 assumed to continue in column 1 of the next card.

 Some examples of valid FIND and CHANGE statements:

     FIND /ABCDEFGHIJKLMNOPQRSTUVWXYZ/

     F (1,50) /ABCDEFGHIJKLMNOPQRSTUVWXYZ/   /* Find the alphabet in  */
                                             /* columns 1-50          */

     F (1,71) /ABCDEFGHIJKLMNOPQRSTUVWXYZ/   /* Find the alphabet in  */
                                             /* columns 1-71          */



                      Control Statements                           -8-
1                            PDSEDIT User Guide

     CHANGE (1,3) =A=B=                      /* Change A to B         */
                                             /* columns 1-3           */
                                             /* '=' used as delimiter */

     C ?QWERTYUIOPASDFGHJKL;'ZXCVBNM,.??     /* Delete a long string  */
                                             /* '?' used as delimiter */



 5.2.1 Program Action When string1 and string2 Have Different Lengths

 If string1 and string2 are not the same length, blanks will be
 inserted or deleted to adjust for the difference.  In general, an
 attempt is made to preserve column alignment.  i.e., blanks will be
 added to or deleted from the next pool of 1 or more consecutive
 blanks, subject to the following restrictions:
     1.  Blanks may not be added to or deleted from a quoted string
         except to adjust for a change made with the string.
     2.  A pool of blanks will always retain at least 1 blank (unless
         it is at the end of a quoted string).
     3.  All adjusting is done using blanks to the right of the changed
         string; blanks are not added to or deleted from the beginning
         of the line to adjust for changes at the end of the line.
 The first occurrence of a single quote anywhere in the data line (not
 just in the field to be edited) is considered to begin a quoted
 string; the string is assumed to continue until the next occurrence of
 a single quote, on the same or subsequent line.

 Insofar as possible, blanks will be added to and deleted from within a
 quoted string to adjust for changes made within that string.  If
 necessary, blanks may also be deleted from the next pool of more than
 1 consecutive blank which is not contained within a quoted string.

 Adjusting for blanks continues to the last column specified by the
 field keyword of the PDS statement (the default last-column-to-edit,
 if the field keyword was omitted), or the last column specified by the
 CHANGE statement, whichever is greater.

 If it is impossible to adjust for a change - not enough blanks can be
 deleted from a fixed-length records, or the length of a variable-length
 record cannot be increased sufficiently without exceeding the data
 set's maximum record length - line overflow occurs.  No further FIND
 or CHANGE statements will be processed against the line, and the
 change which caused the overflow will not be applied to the line.

 Some examples:

 1.  Change 'COL' to 'COLUMN':
     Before:  COL1     COL2 COL3    COL4 ' COL5'    'COL6   '
     After:   COLUMN1  COLUMN2 COLUMN3 COLUMN4 ' COLUMN5' 'COLUMN6'

 2.  Change 'COLUMN' to 'COL':


                      Control Statements                           -9-
1                            PDSEDIT User Guide

     Before:  COLUMN1 COLUMN2  'COLUMN3'
     After:   COL1    COL2     'COL3   '



 5.3  INSERT and DELETE Statements

 An INSERT or DELETE statement is associated with the preceding FIND or
 CHANGE statement.  Every time a line is found containing the string
 specified as string1 by the FIND or CHANGE statement, any INSERT or
 DELETE statements associated with the FIND or CHANGE are processed:
 An INSERT statement inserts lines directly before or directly after
 the line containing string1; a DELETE statement deletes the line
 containing string1 and a specified number of subsequent lines.  Each
 FIND or CHANGE may be followed by at most one INSERT before, one
 INSERT after, and one DELETE (in any order - deletes are always
 processed before inserts).

 An INSERT statement is directly followed by the lines to insert, with
 each card assumed to contain one line to insert.  During the edit
 process, these lines will be truncated or padded with blanks to the
 right if necessary to adjust for a record length other than 80.  If
 the data set being edited has variable-length records, lines will be
 given a record length of 80 or the data set LRECL, whichever is
 smaller.

 The user may specify a number of lines to insert, or a 2-character
 delimiter which, when found in columns 1 and 2 of an input card,
 signals the end of the lines to insert (the card containing the
 delimiter will not be inserted).  If neither is specified, 1 line will
 be inserted.

 The INSERT statement has the following format:

     INSERT/INS/I  n  BEFORE/AFTER
         - or -
     INSERT/INS/I  TO(dlm)  BEFORE/AFTER

   Where

     BEFORE/AFTER specifies whether the lines are to be inserted before
         or after the line containing the FIND/CHANGE string.  This
         keyword is optional;  if omitted, the default is AFTER.
         'BEFORE' may be abbreviated 'BEF'; 'AFTER' may be abbreviated
         'AFT'.

     n is the number of lines to insert

     TO(dlm) specified the 2-character delimiter, which may be any
         alphanumeric or special character with the exception of
         blanks, commas, and the string '/*' (which would be regarded
         as the beginning of a comment).


                      Control Statements                          -10-
1                            PDSEDIT User Guide

 The DELETE statement has the following format:

     DELETE  n

   Where

     n is the number of lines to delete including and following the
     line containing the FIND/CHANGE string.  This parameter is
     optional, and if omitted defaults to 1.

 INSERT and DELETE statements may not be continued except by including
 a comment which begins on the first card and ends on a subsequent
 card.









































                      Control Statements                          -11-
1                            PDSEDIT User Guide

 6.0  Examples



 6.1  Change 1 String in all Members of a PDS


 In this example, the object is to change every occurrence of the
 string 'SER=XXXXXX' in the PDS 'PRIV.JOBLIB' to 'SER=123456'.  Members
 of 'PRIV.JOBLIB' are in card-image format.  A detail report showing
 which lines were changed is desired.

 The required JCL and control statements:

 //EDITJOB  JOB (ACCT INFO), etc.
 //STEP1    EXEC  PGM=PDSEDIT
 //SYSPRINT DD  SYSOUT=A
 //SYSOUT   DD  SYSOUT=A
 //SYSUT1   DD  DSN=PRIV.JOBLIB,DISP=SHR
 //SYSIN    DD  *
 C /SER=XXXXXX/SER=123456/
 /*

 Since no PDS statement was supplied, and there is no SYSUT2 DD
 statement, SYSUT1 is assumed to be the PDS to edit, and editing will
 be confined to columns 1 through 71.  Any members containing the
 string 'SER=XXXXXX' will be changed and updated in place.



 6.2  Insert Lines After Every Occurrence of a Specified String


 In this example, the object is to add two JES control cards after
 every JOB card.  The members to edit reside in 'PRIV.PROCLIB', and
 every member except 'DUMMY' is to be edited.

 The required JCL and control statements:

 //EDITJOB  JOB (ACCT INFO), etc.
 //STEP1    EXEC  PGM=PDSEDIT
 //SYSPRINT DD  SYSOUT=A
 //SYSOUT   DD  SYSOUT=A
 //PDSIN    DD  DSN=PRIV.PROCLIB,DISP=SHR
 //SYSIN    DD  DATA,DLM=## <------
 PDS IN(PDSIN) EXCL(DUMMY)
 F (4 21) / JOB /
 INSERT 2
 //*MAIN   LINES=999
 //*FORMAT PR,...... (etc.)
 ## <------



                            Examples                              -12-
1                            PDSEDIT User Guide

 Every line in every member except 'DUMMY' containing the characters
 ' JOB ' in columns 4 through 21 (this should find only JOB cards) will
 have the two JES3 control cards inserted after it.  Edited members
 will be written back into 'PRIV.PROCLIB' (but not updated in place,
 since they have been enlarged).



 6.3  Replace Lines Containing a Specified String in 2 PDS's


 In this example, the object is to replace lines containing the string
 'REPLACE' with a blank line.  Two PDS's are to be edited, and the
 edited members are to be written into a third PDS.  No detail report
 is wanted.


 The required JCL and control statements:

 //EDITJOB  JOB (ACCT INFO), etc.
 //STEP1    EXEC  PGM=PDSEDIT
 //SYSPRINT DD  SYSOUT=A
 //PDS1     DD  DSN=PDS1.PROCLIB,DISP=SHR
 //PDS2     DD  DSN=PDS2.PROCLIB,DISP=SHR
 //PDS3     DD  DSN=PDS3.PROCLIB,DISP=SHR
 //SYSIN    DD  *
 PDS IN(PDS1) OUT(PDS3)
 PDS IN(PDS2) OUT(PDS3)
 F =REPLACE=
 DELETE
 INSERT

 /*

 All members of 'PDS1.PROCLIB' and 'PDS2.PROCLIB' will be edited.
 Every line containing the string 'REPLACE' will be deleted; inserted
 'after' the deleted line (i.e., in its place) will be the blank line.
 Since the keyword 'NOCOPY' does not appear on any of the PDS
 statements, all members of 'PDS1.PROCLIB' and 'PDS2.PROCLIB' will be
 written into 'PDS3.PROCLIB', whether changed or not.  Since no SYSOUT
 DD statement was supplied, no detail report will be produced.













                            Examples                              -13-
1                            PDSEDIT User Guide

 7.0  Example of Output



 7.1  SYSPRINT Output (Summary Report)


 SYSPRINT output begins with an echo print of the control statements.
 Note that lines to be inserted are flagged 'LINE TO INSERT' at the
 right.  A FIND/CHANGE string which is continued on a second card will
 be similarly flagged.  Any syntax or other errors encountered in
 scanning control statements will be noted here.

       SYSIN INPUT TO PDSEDIT

 PDS IN(DD1)
 F /FIND/
 C /OLD/NEWSTRING/
 F /OMIT/
 DEL
 F /INSERT/
 INS BEFORE
 BEFORE 1                                               LINE TO INSERT
 INS AFTER
 AFTER 1                                                LINE TO INSERT
 C /INSERT2/INSERT/
 INS BEFORE
 BEFORE 2                                               LINE TO INSERT
 INS AFTER
 AFTER 2                                                LINE TO INSERT




 This is followed by a summary report on the editing preformed.  Any
 errors encountered in editing will be noted here.



 PDSEDIT SUMMARY REPORT

  INPUT PDS=D856BLM.DD1.DATA              OUTPUT PDS=D856BLM.DD1.DATA
  ON VOLUME AMD15A                         ON VOLUME AMD15A

 PDE0118  LINE OVERFLOW IN 'M1      ' DURING EDIT    *** ERROR ***

 MEMBER M1             3 FINDS  1 CHANGES  0 INSERTS  0 DELS 1 ERR****
 MEMBER M2             9 FINDS  4 CHANGES  8 INSERTS  1 DELS
 MEMBER M3             0 FINDS  0 CHANGES  0 INSERTS  0 DELS

 TOTAL                12 FINDS  5 CHANGES  8 INSERTS  1 DELS 1 ERR****



                        Example of Output                         -14-
1                            PDSEDIT User Guide

 SUMMARY OF RESULTS

        3 MEMBERS PROCESSED
        2 MEMBERS HAD OCCURRENCES OF SPECIFIED STRING
        2 MEMBERS CHANGED
        1 MEMBERS HAD ERRORS



 Notes:

 1.  In processing member M1:
     3 occurrences of FIND/CHANGE strings were found (this count
         includes multiple occurrences on the same line - e.g., if a
         string occurs twice on the same line, this count will record 2
         occurrences of the string for that line)
     1 string was changed by a CHANGE statement (this count also
         includes multiple changes on the same line, but does not
         include changes which produced a line overflow)
     0 lines were inserted
     0 lines were deleted
     1 line-overflow error occurred (this count records the number of
         lines for which a line-overflow condition arose)

 2.  In processing 'D856BLM.DD1.DATA':
     Editing was attempted for 3 members (this count includes members
         with errors)
     FIND/CHANGE strings were found in 2 members
     2 members were changed (this count includes members with errors,
         unless every attempted change to the member produced a line
         overflow)
     1 member had an error (this count includes members with line-
         overflow errors and members with more severe errors - e.g.,
         I/O error)

 3.  Note the error message indicating that line overflow occurred in
     member M1.  This message will appear at most once per member.  The
     lines(s) in which overflow occurred will appear in the SYSOUT
     Detail Report.


 7.2  SYSOUT Output (Detail Report)

 PDSEDIT DETAIL REPORT

  INPUT PDS=D856BLM.DD1.DATA              OUTPUT PDS=D856BLM.DD1.DATA
  ON VOLUME AMD15A                         ON VOLUME AMD15A

 DETAIL REPORT FOR MEMBER M1

 *FOUND****     FIND THIS STRING
 *FOUND****     OLD STRING


                        Example of Output                         -15-
1                            PDSEDIT User Guide

 *CHANGED**     NEWSTRING STRING
 *FOUND****     CAUSE AN ERROR                  OLD STRING
 *ERROR****     CAUSE AN ERROR                  OLD STRING   *ERROR****

 MEMBER M1              3 FINDS    1 CHANGES  0 INSERTS  0 DELS 1 ERRS**

 DETAIL REPORT FOR MEMBER M2

 *FOUND****     DO FIRST INSERT
 *INSERTED*     BEFORE 1
 *INSERTED*     AFTER 1
 *INSERTED*     BEFORE 2
 *INSERTED*     AFTER 2
 *FOUND****     DO BOTH INSERTS (INSERT AND INSERT2)
 *INSERTED*     BEFORE 1
 *INSERTED*     AFTER 1
 *FOUND****     DO BOTH INSERTS (INSERT AND INSERT2)
 *CHANGED**     DO BOTH INSERTS (INSERT AND INSERT)
 *INSERTED*     BEFORE 2
 *INSERTED*     AFTER 2
 *FOUND****     OMIT THIS LINE
 *DELETED**     OMIT THIS LINE

 MEMBER M2              9 FINDS    4 CHANGES  8 INSERTS  1 DELETES


 Notes:

 1.  Every line with an occurrence of a FIND/CHANGE string is printed
     with the identifier '*FOUND****'.

 2.  Every line in which a change was successfully made is printed (in
     its changed form) with the identifier '*CHANGED**'.

 3.  Every line in which a change produced line overflow is printed
     (unchanged) with the identifier '*ERROR****'.

 4.  Every line which was deleted is printed with the identifier
     '*DELETED**'.

 5.  Every line which was inserted is printed with the identifier
     '*INSERTED*'.  Note that inserted lines are printed after the line
     containing the FIND/CHANGE string, regardless of whether they were
     inserted BEFORE or AFTER.  The actual order of lines in the edited
     member M2 is:

     BEFORE 1
     DO FIRST INSERT
     AFTER 1
     BEFORE 1
     BEFORE 2
     DO BOTH INSERTS (INSERT AND INSERT)
     AFTER 2
     AFTER 1
                        Example of Output                         -16-
1                            PDSEDIT User Guide


 6.  Since no changes were made to member M3 and no specified strings
     were found, no detail report is printed for this member.  Note,
     however, that a line indicating this 'NO FINDS, NO CHANGES'
     condition does appear in the SYSPRINT Summary Report.

















































                        Example of Output                         -17-
1                            PDSEDIT User Guide

 8.0  Messages




 8.1  Messages Issued During Scan of Control Statements


 PDE0000  UNABLE TO OPEN SYSIN - PROCESSING TERMINATED
      Self-explanatory; e.g., no SYSIN DD statement supplied.

 PDE0004  UNEXPECTED EOF ENCOUNTERED ON SYSIN
      An End-of-File was encountered before the end of a comment, a
      FIND or CHANGE string, or a 'keyword(value)' combination.

 PDE0006  NO INPUT PDS SUPPLIED
      A previous PDS statement lacked a value for 'IN'.

 PDE0008  INSUFFICIENT STORAGE TO COMPLETE INTERNAL TABLES
      Self-explanatory; run the program again specifying a larger
      region.

 PDE0010  NO PDS STATEMENTS - DEFAULTS WILL BE USED
      A FIND, CHANGE, INSERT, or DELETE was found before any PDS
      statements were found.  This is not an error.

 PDE0012  'SELECT' AND 'EXCLUDE' MUTUALLY EXCLUSIVE
      'SELECT' and 'EXCLUDE' both appear on the same PDS statement.

 PDE0014  'BEFORE' AND 'AFTER' MUTUALLY EXCLUSIVE
      'BEFORE' and 'AFTER' both appear on the same INSERT statement.

 PDE0016  N AND 'TO' MUTUALLY EXCLUSIVE
      n (number of lines to insert) and 'TO(dlm)' both appear on the
      same INSERT statement.

 PDE0018  ONLY 1 INSERT-BEFORE, 1 INSERT-AFTER, AND 1 DELETE PER
           FIND/CHANGE
      A second 'INSERT AFTER', a second 'INSERT BEFORE', or a second
      'DELETE' was found after a FIND or CHANGE statement.  Only one of
      each type is permitted for each FIND or CHANGE.

 PDE0020  KEYWORD   'XXXXXXXX' INVALID OR UNKNOWN
      'XXXXXXXX' is not a recognizable keyword, or is improper in this
      context (e.g., a PDS keyword after the first FIND or CHANGE).

 PDE0022  VALUE FOR 'XXXXXXXX' MISSING
      Keyword 'XXXXXXXX' is not followed by a value in parenthesis; If
      the keyword is 'field', this message also occurs if two values
      were not supplied (beginning and ending columns).

 PDE0024  VALUE FOR 'XXXXXXXX' INVALID
      The value supplied for keyword 'XXXXXXXX' has invalid length

                          Messages                                -18-
1                            PDSEDIT User Guide

      (less than or equal to zero, or greater than 8), or (if the
      keyword is 'field') is not numeric.

 PDE0026  VALUE FOR 'XXXXXXXX' WAS PREVIOUSLY SUPPLIED
      Keyword 'XXXXXXXX' was specified more than once on a PDS
      statement; only 'SELECT' and 'EXCLUDE' may occur more than once.

 PDE0028  VALUE FOR 'XXXXXXXX' IS MISSING ')'
      PDSEDIT did not find a right parenthesis after the expected
      number of values for keyword 'XXXXXXXX'.

 PDE0030  KEYWORD   'XXXXXXXX' PRECEDES FIRST 'PDS'
      Keyword 'XXXXXXXX' must follow the keyword 'PDS'.

 PDE0032  KEYWORD   'XXXXXXXX' HAS INVALID STRING LENGTH
      A FIND or CHANGE string was found with length greater than 255,
      or (for the string to find), length 0.

 PDE0034  FIELD FOR 'XXXXXXXX' INVALID
      The field (columns to edit) specified on a FIND or CHANGE was
      invalid - too long or non-numeric.

 PDE0036  FIELD FOR 'XXXXXXXX' MISSING
      The field (columns to edit) specified on a FIND or CHANGE did not
      specify two values (beginning and ending columns).

 PDE0038  FIELD FOR 'XXXXXXXX' MISSING ')'
      The field (columns to edit) specified on a FIND or CHANGE did not
      end with a right parenthesis.

 PDE0040  KEYWORD   'XXXXXXXX' PRECEDES FIRST FIND/CHANGE
      Keyword 'XXXXXXXX' must follow a 'FIND' or 'CHANGE'.

 PDE0042  KEYWORD   'XXXXXXXX' INCOMPATIBLE WITH 'DELETE'
      'BEFORE' and 'AFTER' MAY NOT BE SPECIFIED WITH 'DELETE'.



 8.2  Messages Issued During Editing:


 PDE0100  PDS WITH DDNAME  'XXXXXXXX' CANNOT BE OPENED
      Self-explanatory; e.g., no DD statement with ddname 'XXXXXXXX'
      was supplied.

 PDE0102  PDS WITH DDNAME  'XXXXXXXX' HAS INVALID RECFM OR DSORG
      The PDS referenced by ddname 'XXXXXXXX' has record format other
      than F/FA/FB/FBA or V/VA/VB/VBA, or data set organization other
      than partitioned.  (This message will appear if a single member
      of a PDS was specified in the DD statement).

 PDE0104  PDS WITH DDNAME  'XXXXXXXX' HAS INVALID LRECL
      The PDS referenced by ddname 'XXXXXXXX' has lrecl greater than

                          Messages                                -19-
1                            PDSEDIT User Guide

      255, or the 'IN' and 'OUT' PDS's have different record lengths
      for fixed-length records, or the 'OUT' PDS has record length
      greater than the 'IN' PDS for variable-length records.

 PDE0106  DIRECTORY FOR    'XXXXXXXX' CANNOT BE OPENED
      PDSEDIT was unable to open the directory for the PDS referenced
      by 'XXXXXXXX'.

 PDE0108  SELECTED MEMBER  'XXXXXXXX' NOT FOUND
      Member 'XXXXXXXX' was specified by the 'SELECT' keyword but was
      not found in the directory.

 PDE0110  SELECTED MEMBER  'XXXXXXXX' IS AN ALIAS - WILL NOT BE
           PROCESSED
      Member 'XXXXXXXX' was specified by the 'SELECT' keyword but is an
      alias.

 PDE0112  MEMBER NAME      'XXXXXXXX' IS AN ALIAS - WILL NOT BE
           PROCESSED
      Member 'XXXXXXXX' was found in the directory but it is an alias.
      This message occurs if 'SELECT' was not specified (and hence all
      non-excluded members are to be processed).  It is not an error.

 PDE0114  MEMBER           'XXXXXXXX' TOO LARGE FOR AVAILABLE STORAGE
      Available virtual storage was not sufficient to contain member
      'XXXXXXXX'; run the program again specifying a larger region.
      Member 'XXXXXXXX' was not updated or written out.

 PDE0116  I/O ERROR IN     'XXXXXXXX' DURING READ
      An I/O error occurred in reading member 'XXXXXXXX'.  The member
      was not written out.

 PDE0118  LINE OVERFLOW IN 'XXXXXXXX' DURING EDIT
      A CHANGE caused a line in member 'XXXXXXXX' to exceed record
      length.  The CHANGE causing the error was not applied, but
      editing continues with the next line.

 PDE0120  I/O ERROR IN     'XXXXXXXX' DURING WRITE
      An I/O error occurred in writing member 'XXXXXXXX' out.

 PDE0122  UNABLE TO STOW   'XXXXXXXX'
      The STOW for member 'XXXXXXXX' failed; if input and output PDS's
      are different, the directory may be full.

 PDE0124  I/O ERROR IN     'XXXXXXXX' DURING UPDATE-IN-PLACE
      An I/O error occurred in updating member 'XXXXXXXX' in place.

 PDE0126  I/O ERROR IN READING DIRECTORY
      Self-explanatory.

 PDE0128  INSUFFICIENT STORAGE FOR INPUT BUFFERS
      Available virtual storage was insufficient for input buffers; run
      program again specifying a larger region.


                          Messages                                -20-
