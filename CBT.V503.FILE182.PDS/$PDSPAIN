December 22, 1988

To:      SHARE Membership via SSD
From:    PDSPAIN committee of the Storage Management Project
Subject: PDSPAIN report

The PDSPAIN committee was formed by the Storage Management Project
of the Operating Systems Support Division of SHARE to study the
problems associated with OS partitioned data sets. The committee
presented its report in Session 0232 at Share 70 in Anaheim.

Presented here are the PDSPAIN paper, the questionnaire that was
used to conduct an opinion survey, the analysis of that survey, and
some of the comments that we received. These comments include some
very good ideas, and we feel this shows the importance of the
survey in completing the analysis of the problem. Thank you for
your support.

Sincerely,
Lee Lewis
MVS Group Manager

SSD #364 Page 153

PDSPAIN

MVS GROUP Position Addressing the need for Functional
Enhancement to OS/MVS Partitioned Data Sets.

Storage Management Project, Operating Systems Support Division

December 22, 1988

Copyright (C) SHARE Inc. 1988. All Rights Reserved.

Published by SHARE Inc., a non-profit Delaware membership
corporation. Permission to reprint in whole or part may be granted
for educational and scientific purposes upon written application to
the Secretary, One Illinois Center, 111 East Wacker Drive, Chicago,
Illinois 60601. Permission is hereby granted to members of SHARE
Inc. to reproduce this publication in whole or in part solely for
internal distribution within the member's organization and provided
the copyright notice printed above is set forth in full text on the
title page of each i tern reproduced. The ideas and concepts set
forth in this publication are solely those of the respective
authors, and not of SHARE Inc., and SHARE Inc. does not endorse,
guarantee, or otherwise certify any such ideas or concepts in any
application or usage. Printed in the United States of America.

SSD #364 Page 154


                            -ii-

COMMITTEE MEMBERS

Storage Management Task Force One

Dave Crow
Task Force Chairman
TUCC (TUC)
Box 12076
Research Triangle Park, NC 27709
(919) 549-0671

Steve Ryder
Task Force Sponsor (MVSS PM)
Texas Education Agency (TED)

Norm Chase
IBM Project Representative
IBM Corporation (IBM)

Elliott Alterman
Task Force Member
National Institutes of Health (NIH)

John Birkett
Task Force Member
Sterling Software (SOF)

Aron Eisenpress
Task Force Member
City University of New York (CNY)

Dave Hanko
Task Force Member
Technical Applications Center (AFT)

John Laubenheimer
Task Force Member
Brooklyn Union Gas Company (BUG)

Donald Likens
Task Force Member
Combined International (NVI)

Rich Olcott
Task Force Member
Schering-Plough Corporation (SPM)

Gerwald Wohlrab
Task Force Member
R + V Versicherung (RVV)


                            -iii-

TABLE OF CONTENTS

1. EXECUTIVE SUMMARY . . . . . . . . . . . . . . . . . .  1
2. INTRODUCTION  . . . . . . . . . . . . . . . . . . . .  3
3. PDSPAIN  -- What is wrong with the PDS? . . . . . . .  5
4. PDSJOY   -- What is good about the PDS? . . . . . . .  8
5. PDSDREAM -- What is needed in the PDS design? . . . . 10
6. PDS Reality: Blue sky usually has a few dark clouds . 18
7. SUMMARY: Where do we go from here?  . . . . . . . . . 19

APPENDIX A. Analysis of the PDSPAIN Questionnaire  . . . 21
    INTRODUCTION . . . . . . . . . . . . . . . . . . . . 21
    SUMMARY OF RESPONSES . . . . . . . . . . . . . . . . 22
    PDSPAIN (Questions 3.1 to 3.9) . . . . . . . . . . . 23
    PDSJOY (Questions 4.1 to 4.10) . . . . . . . . . . . 24
    PDSDREAM (Questions 5.1 to 5.13) . . . . . . . . . . 24
    NEW ORGANIZATION VERSUS CHANGES TO THE PDS . . . . . 25
    OBSERVATIONS ON DIFFERENCES BETWEEN GROUPS . . . . . 25
    CONCLUSION . . . . . . . . . . . . . . . . . . . . . 27
    SELECTED COMMENTS: . . . . . . . . . . . . . . . . . 27


                            -1-

1. EXECUTIVE SUMMARY

The Partitioned Data Set is a critical part of OS/MVS, but it
does not provide adequate function, performance, or data
integrity. This results in lost productivity for an
installation's programming staff, its end users, and wastes
computer resources as well. Development of enhancements to
solve these problems is long overdue.

Cross system compatibility is becoming a significant requirement
in many installations, but inadequacies in the OS data
structures make it difficult to move applications or data from
VM or PC systems to an MVS system. Many of the new features we
suggest in this paper already exist in other IBM systems and
have proved to be useful and important. The Systems Application
Architecture has recognized the importance of cross-system
compatibility, and the ability to port applications from other
systems to MVS (or from MVS to other systems) is becoming
critical to the existence of MVS in some installations.

This paper requests an enhanced partitioned data set facility
that will include:

* The ability to re-use free space within the data set without
requiring reorganization.

* Elimination of the integrity exposures present in the current
structure that result in damaged or inaccessible data.

* Improved ENQUEUE protection to allow concurrent updating of
different members by different users in all environments, not
just with ISPF.

* Reference and update statistics at the member level.
* High-speed access to the PDS directory and members, including
access from high level languages.

* The ability to collect members of various record formats into
the same data set, including the ability to mix load modules
and source files.

* Qualified member names. As a minimum, this should provide two
eight-character levels.

In spite of the fact that partitioned data sets cause a great
deal of trouble, they also provide essential function. Use of
the partitioned data set is so widespread throughout MVS that
any changes to it will have a major impact on the system, and
could have serious adverse effects unless provision is made to
make the changes smoothly. Improvements in partitioned data set
support must not eliminate existing desirable features. These


                            -2-

include:

* The ability to collect multiple files under a single data set
name that can be managed as a unit.

* The ability to obtain high performance for program libraries,
such as the system link library.

* The ability to create a new partitioned data set from JCL,
without requiring a separate job step or program.

* The ability to treat members as though they are sequential
files, including the ability to concatenate members.

* The ability to concatenate partitioned data sets to provide
libraries consisting of the union of the various data sets.

* The ability to use DASO efficiently by packing multiple short
members onto a single track.

* The ability to create a member without the CPU and I/O
overhead or system-wide serialization involved in creating an
entirely separate OS data set.

A survey of the MVS Group within SHARE found very strong
agreement with our analysis of what is good and bad about the
partitioned data set structure, but reaction to specific
suggestions for changes was mixed. In general, suggestions that
were aimed at fixing problems with existing function were rated
higher than new features, especially if there was a perception
that a new feature would cause problems with existing
applications. Therefore, we have recommended that enhancements
that will have significant impact on existing usage should be
made only as part of a replacement facility.

Solving the problems of today and providing for the requirements
of tomorrow while preserving the current utility of the
partitioned data set facility results in a set of requirements
that overlap each other, and sometimes appear mutually
exclusive. Resolving these conflicts and providing the desired
improvements to the partitioned data set facilities will be
neither easy nor cheap, but a high quality solution to these
problems that provides a proper balance between new function,
performance, and compatibility with the past will pay dividends
on the investment for years to come.


                            -3-

2. INTRODUCTION.

This paper began as an outgrowth of a survey conducted by the
Storage Management Project in which people were asked about
problems and needs in the area of data sharing. Nearly every
response included complaints about partitioned data sets even
though the survey questionnaire did not suggest the PDS as a
possible source of trouble. We took this to mean that even
though the PDS is an old and well understood part of OS, we
should re-examine it not only to identify problems it causes but
also to consider what additional features it should have.

The PDS continues to be an important data management structure
because the short set of sequentially accessed records remains
at the heart of most data processing. JCL PROCs, source code,
and load modules are all examples of data structures that fit
the model of a PDS much better than a data base. Recent
advances in software have added other types of data to the list:
character fonts, page layouts, electronic mail, graph formats,
data specifications, etc. Some ISPF panel libraries now contain
thousands of separate members for just a single application. We
see a continuing need for an efficient method of managing and
using such data.

The PDS and the corresponding access routines in BPAM and QSAM
provide a convenient set of tools for managing small sets of
sequential data. However, these tools do not provide all of the
function users need, and in addition, there are many problems
that arise in normal use that result in lost or damaged data.
We need substantial improvements to the facilities provided by
the PDS, either in the form of enhancements to the current data
set structure and access methods, or as a replacement data
structure.

In the course of gathering information for this paper, we
received many good suggestions about how the existing PDS design
could be improved, yet many other suggestions stated that the
PDS structure is fundamentally flawed and needs to be replaced.
We considered writing a paper discussing the characteristics of
a new PDS structure in which we never used terms such as
"member" or "PDS". However, after considerable thought, we
decided to describe problems and requirements in terms of the
existing structure, but to leave open the possibility that
changes will be implemented in a new data structure rather than
as enhancements to the existing PDS.


                            -4-

In writing this paper, we have concentrated on three areas:

* PDSPAIN  -- What is wrong with the PDS design?
* PDSJOY   -- What is good about the PDS design?
* PDSDREAM -- What is needed in the PDS design?

These form the titles to the major sections of the paper.
Following these sections are two short sections that discuss the
impact of changes in the PDS structure.

A preliminary version of this paper and a questionnaire were
sent to the MVS Group mailing list so that we could include
ideas from as varied a group as possible, and to be sure that we
were not simply representing the opinions of the PDSPAIN
committee. The results of the survey showed widespread
agreement with our analysis of what is good and bad about the
PDS, but there was less agreement about what should be done to
solve the problems. While most responses showed a strong desire
to have changes in the PDS facilities to fix problems they are
having, many responses showed significant concern that
"improvements" to the PDS would in fact be detrimental to their
installation. Comments about the survey results have been
included in the paper in many places, particularly in the
PDSDREAM section, and Appendix A gives a detailed analysis of
the survey results.

Finally, we would like to thank all the people who contributed
their time and effort to the production of this paper. In
addition to those who have been officially associated with the
committee, many other people have offered their ideas and their
time to help us, and while we cannot list them all, we greatly
appreciate their contributions to this project.


                            -5-

3. PDSPAIN -- WHAT IS WRONG WITH THE PDS.

Over the years, many of us have grown numb to the pain of
dealing with the PDS. Therefore, we must re-sensitize ourselves
to the problems. The rest of this section is devoted to what we
believe is a reasonably complete list of serious problems that
users encounter when using PDS. We consider a problem serious
if it is likely to result in loss of data or a significant loss
of productivity.

1. Partitioned data sets require periodic reorganization.

   When a member of a PDS is deleted or replaced, the space it
   occupied is not made available for reuse. Reclaiming this
   space is done by reorganizing the data set, which wastes CPU
   time and I/O capacity. Failure to reclaim the space wastes
   DASO storage and may cause tasks to fail due to "out of
   space" conditions. Such failures not only waste computer
   resources, they waste the time of the people who must correct
   the error, the time of people who must wait while the error
   is being corrected, and they may severely disrupt an
   installation's work. (One shop estimated that they spend
   over $20,000 per year in IEBCOPY runs just to avoid such
   problems.) One easily overlooked cost is simply the cost of
   knowing about this problem. End users and programmers should
   not need to know this kind of detail when dealing with the
   system.

2. A PDS must be recreated to expand the directory.

   The directory is a fixed part of the PDS that is formatted
   when the data set is created. If the directory size is
   underestimated, the data set must be deleted and recreated
   even though there may be no need to increase the size of the
   data set. As in the previous item, this may cause severe
   problems, and requires an awareness of the internal workings
   of the system where none is justified.

3. Ensuring data integrity among separate address spaces is
   impractical.

   In order to safely update a PDS, a task must have an
   exclusive ENQUEUE for the data set. If this is done, data
   integrity is assured, but obtaining exclusive control is not
   always practical. For example, JES must be stopped in order
   to get exclusive control of a PROCLIB data set. The
   complexity of accomplishing this feat leads most
   installations to ignore the requirement and PROCLIB
   reorganizations are simply done during a period of low
   activity. Thus we have the ironic situation that


                            -6-

   installations are forced to give up data integrity because
   the data set is critical to the system! ISPF has minimized
   this problem for ISPF libraries by saving a member in virtual
   storage and writing the entire member at once, but this works
   properly only when the data set is used only with ISPF.
   Other methods of accessing partitioned data sets should
   provide the same facility. Note that when the ENQUEUE
   restrictions are violated, it is possible for a PDS to
   acquire a secondary extent, and cause the failure of critical
   tasks that are using the data set. Unfortunately, LINKLIST
   data sets are not protected by ENQUEUE, so this problem is
   particularly likely with these critical data sets if they
   have been defined to allow secondary allocations.

4. Data integrity is not guaranteed for a single task.

   If a program attempts to write two members of a PDS at the
   same time, the two members will overlay each other. No error
   message is produced, and the two different directory entries
   simply point to the same data. The error is difficult to
   detect, and is impossible to explain to anyone not familiar
   with the details of the PDS structure.

5. The DCB attributes for the data set can be easily and
   inadvertently changed.

   The members of a PDS have no separate record of their DCB
   characteristics, so normally all members use the DCB in the
   data set label. Thus all members of a PDS can be rendered
   unusable if a member is added that has different DCB
   characteristics.

6. The PDS directory is easily overlaid.

   The access methods do nothing to prevent opening a PDS for
   sequential output. This overlays the directory and destroys
   the PDS.

7. The organization of the directory makes achieving good
   performance difficult, and in some cases, impossible.

   The PDS directory is organized as a sequential data set that
   may need to be completely rewritten just to update a single
   member. In a small PDS this causes no trouble, but in a
   large PDS with thousands of members, the I/O to update the
   directory can be a serious performance problem. If
   performance is important in a read only environment, a
   program can load the directory into memory and access a PDS
   very efficiently, but there is no simple way for a programmer
   to request this mode of operation, and it is not as useful
   when members are being added or replaced. Normal access to


                            -7-

   members of a PDS requires a sequential search of the
   directory which can have a substantial impact on the
   performance of an application.

8. A user can inadvertently delete a data set with JCL.

   The TSO command DELETE DATASET(member) means that only the
   specified member should be deleted, while the corresponding
   statement in JCL means that the entire data set should be
   deleted. This inconsistency has caused the loss of many
   partitioned data sets, and will undoubtedly cause the loss of
   many more.

9. All PDS members must have the same data and security
   characteristics.

   The basic objective of the PDS is to gather related members
   together. However, current restrictions on what members may
   be grouped together can prevent a logical organization of
   members into data sets. For example, a programmer might wish
   to have all programs for a given application in the same
   library, but security considerations may dictate that each be
   placed in a separate data set.

There are, of course, many other important problems with the PDS
such as the lack of access from high level languages, and
difficulties in using the alias facility, but this list
certainly demonstrates that there are serious, costly problems
that MVS installations must deal with on a daily basis. It is
instructive to note that many problems with the PDS occur when
adding or replacing members. This is part of why the PDS can
cause so many problems, and yet be so useful: It works great
until something has to change, and then once the changes have
been made, it works great again.


                            -8-

4. PDSJOY -- WHAT IS GOOD ABOUT THE PDS?

In spite of the pain, we like the PDS! The PDS in its present
form wastes the time of the people who use them and limits the
applications that can be developed. But if the PDS causes so
much pain, why is it used so heavily? First of all, the system
requires the use of the PDS. Most system data sets (PROCLIB,
LINKLIB, etc.) must be partitioned, and every program library
must be a PDS. But that does not account for the widespread use
of the POS. Many users choose to use partitioned data sets
because of the features the PDS provides. We want to call
attention to these features in order to ensure that changes
needed to fix problems identified in this paper do not break
what is already good today. The following lists some of the
most important capabilities provided by the current PDS
structure:

1. The ability to collect related data files under a single name
   (i.e. LISTCAT shows only the single name, not all the
   members.)

2. The ability to have multiple members in a single DASO track
   in order to use less disk space than would be required for
   separate sequential data sets.

3. High Performance for read access. Once the PDS directory has
   been loaded into memory, switching between members or
   scanning the list of members is very efficient, and requires
   no system resources except for the actual I/O to read the
   member. The system LINKLIST is an excellent example of this.

4. The ability to read or write a member as a purely sequential
   data set.

5. The ability to perform updates in place by rewriting data
   blocks. Some utilities, such as SUPERZAP, depend on this.

6. The ability to use TSO commands to manipulate members. TSO
   provides support for using PDS members throughout its command
   language and in ISPF. For example, a user does not have to
   invoke a special utility to scratch or rename a member.

7. The ability to concatenate members as sequential data sets,
   and the ability to concatenate libraries to act as larger
   libraries.

8. The ability to create or delete members without the overhead
   of OS DASO space management.

9. The ability to use JCL to create a partitioned data set
   without having to run a separate job step.


                            -9-

10. The availability of utilities for Partitioned Data Sets.
   There already exists a reasonably complete set of utilities
   for managing partitioned data sets. This includes IBM
   utilities such as IEBCOPY for moving and reorganizing a PDS,
   as well as a large number of programs from other sources for
   providing functions that IBM utilities do not. The
   availability of these utilities materially improves the
   usability of the PDS.

In short, the PDS provides an efficient way of organizing a set of
related sequential files and it works extremely well in a read-only
environment. The PDS is fully integrated into the system, and a
user need not learn different ways to deal with program source,
cataloged procedures, TSO CLISTs, ISPF panels, or any of the many
other uses of the PDS. In many ways, the PDS provides the
foundation on which the entire operating system is built.

Many of the problems with the PDS are a direct result of the
simplicity of the underlying data structure, but we recognize that
this simplicity is directly responsible for many of the advantages
of the PDS. Changing the PDS is thus an undertaking that must be
done with extreme care as it has the potential for great harm, as
well as great reward.


                            -10-

5. PDSDREAM -- WHAT IS NEEDED IN THE PDS DESIGN?

We need significant function beyond the facilities provided by
the PDS. This could either be done by making improvements to
the existing PDS structure, or by developing a complete
replacement facility. In order to avoid inventing a complete
set of terms, the needed function is here described in terms of
the existing PDS.

As described earlier, our survey showed substantial agreement
with the PDSPAIN and PDSJOY sections of this report, but
differences began to appear in discussions of what, if anything,
should be done to correct the problems. Each of the following
items describes a specific change or feature that is needed, and
includes a short description of what the survey showed. The
items have been ordered according to the overall ranking from
our survey. These items were voted on a +3 to -3 scale, and the
overall average has been included here with a short explanation
of the result. See Appendix A for more detail on the results of
the survey. All of the suggestions that were in the survey have
been included here even if they received a low ranking. Some of
these ranked low because very few responses ranked them as
important. We feel this shows areas that should not receive
significant development effort. Others ranked low in spite of a
large number of high votes because of the large number of
negative votes. We feel these items should not be addressed
within the current PDS structure, but that some could be very
attractive features of a replacement facility.

1. Provide a capability to reuse space within the data set
   without manual reorganization.

   The current inability to reuse free space results from two
   fundamental design decisions in the PDS structure. First,
   each PDS member must occupy contiguous records, and second,
   the system does not keep track of free space within the data
   set. Once a member is located, the current structure allows
   reading the complete member without another seek, but in
   almost every instance, the performance advantage provided by
   this feature is far outweighed by the cost of the extra disk
   space and the cost of periodically reorganizing the data set.
   A PDS structure that provides reuse of space would eliminate
   the need to reorganize data sets except where performance is
   important. DFHSM provides automatic reorganization of data
   sets when they are fragmented into too many extents, but this
   cannot be considered a solution to this problem as it does
   not apply to data sets that remain allocated all the time,
   and DFHSM does not prevent the abends and wasted space
   associated with this problem.

   Survey results: (2.65) This item was by far the highest rated
   requirement for improvements in the PDS.


                            -11-

2. Ensure the Integrity of the Directory.

   Currently, the directory can be overwritten and the PDS
   destroyed simply by omitting a member name specification for
   an output data set. An attempt to open the directory of a
   PDS for sequential output is almost always an error and
   should not be as easy to do as it is today. At the very
   least, a higher level of authority to the data set should be
   required; RACF will currently allow a user with UPDATE
   authority to destroy the directory. If preserving the
   ability to open the directory sequentially is judged
   important, the system should require a special indication
   (such as a special OPTCD) to indicate that the program
   intends to write the directory.

   Survey Results: (2.32) This is the first of 3 highly rated
   items that received nearly equal votes.

3. Provide a directory that can be expanded without recreating
   the data set.

   The current restriction that a data set must be recreated in
   order to expand the directory must be removed. An
   application system can be severely impacted when a directory
   fills up, and there is no way to be sure the directory size
   is chosen properly. Even when the number of members has been
   properly estimated, unanticipated increases in the size of a
   directory entry can wreak havoc. For example, many source
   libraries have had to be recreated in recent years as a
   result of using ISPF statistics.

   This problem can be solved with the current design. In fact,
   a public domain utility exists that can expand a directory by
   relocating the first member (or members) and adding new
   directory blocks. However, it requires exclusive control of
   the data set, and that is still a major impact.

   Survey results: (2.29)

4. Ensure the integrity of PDS members.

   The PDS structure must allow tasks to add, delete or replace
   members without requiring all other tasks to release the data
   set. The method currently provided by ISPF is adequate, but
   it must be made an inherent part of the PDS. We must be able
   to update members without having to stop application systems
   and without having to worry about the validity of the change.

   In addition, if a single task attempts to open two or more
   members of the same PDS for output at the same time, the
   attempt should either fail with an appropriate error code, or
   should work as expected. The current design that allows the
   members to overlay each other is unacceptable.


                            -12-

   A third problem in this area arises when the system must
   allocate a secondary extent to provide space for a new
   member. In the current system, errors result when the data
   set is in use by more than one user. The PDS support should
   be able to detect the expansion of the data set and recover
   properly.

   Problems in this area have plagued users since the days of
   OS/MFT, and the total cost can scarcely be underestimated.

   Survey results: (2.25) The survey showed substantial
   agreement with the first and third items described here, but
   the second was not viewed as a significant problem.

5. Provide reference and update statistics at the member level.

   We need reference and update statistics on members for the
   same reason that they are needed for any sequential data set.
   For instance, PROCLIB data sets frequently contain many
   unused procedures. A great deal of work would be saved in
   reviewing a PROCLIB if only inactive procedures had to be
   examined. In many cases, member level reference statistics
   are not needed, so this feature should be provided as an
   option by data set that can be turned on when needed.

   Survey results: (1.95) This was the highest ranked item that
   would provide new function.

6. Provide improved directory performance.

   While the PDS can already be used to provide high speed
   access to different members, the PDS access routines do not
   make this easy, and the sequential organization of the
   directory makes efficient updating impossible if members must
   be replaced or added. An indexed structure (like the VTOC
   and VTOC index) would allow updates to be made without the
   current performance impact, and yet would allow rapid access
   both to individual members as well as to all members in
   member order. This should be provided as a basic part of the
   PDS access method, and should work in a shared DASO
   environment.

   Systems with facilities analogous to the PDS, such as the CMS
   minidisk, have demonstrated a significant functional benefit
   from having a high performance directory access capability as
   part of the basic system. This high performance allows
   applications to be developed in a much simpler and costeffective way.

   Survey results: (1.96)

                            -13-

7. Provide improved storage utilization and device independence.

  The current PDS structure requires the user to be aware of
  the device characteristics in order to make effective use of
  the DASD storage. Historically, most programmers have done a
  poor job of selecting a blocksize (one survey of a large
  service bureau found 80 bytes to be the most common size),
  and even for those that did a good job, the next generation
  of DASD thwarted their efforts (the same survey found that of
  those that used a blocksize bigger than 80, most were optimal
  for DASD that had been in use at some time in the past, but
  were no longer installed). Programs and jobs have
  information about the physical characteristics of DASD, so
  that an installation's management cannot change a data set's
  blocksize without risk. Even with the announcement of
  MVS/ESA System Managed Storage, there are still significant
  problems in this area.

  Providing these improvements would allow an installation to
  make full use of DASD storage without impacting the user, and
  would greatly simplify migration to new DASO devices.

  Survey results: (1.79) This item received strong support
  with little dissent. The high ranking (2.0 means important)
  indicates that improvements in this area are needed.

8. Provide access security at the member level.

   The requirement to allow a user to access every member of a
   data set or none at all is too restrictive. Allowing a user
   access to just one member of a PDS requires creation of a
   separate data set. This conflicts directly with the need to
   collect related files together.

   The current implementation of the PDS prevents a total
   solution to this problem since access to all records in the
   data set is granted once the data set has been opened. A
   partial solution could be achieved with the current structure
   by checking authorization at BLDL and POINT. While this
   would not stop a determined effort to break the security, it
   would provide significant protection against inadvertent
   violation. However, if a PDS structure were implemented
   using the concepts of a named space in an attached virtual
   memory (as described in the LSRAD report, SHARE Inc.,
   December 1979), perhaps using LINEAR data sets, then some
   very exciting possibilities become apparent. When the data
   set is opened, the mapping of virtual memory to the data set
   could simply exclude those pages this particular user is not
   authorized to reference, and could include protection bits
   for those pages the user is not allowed to update. Such a
   PDS implementation would provide security as good as is
   currently possible for separate data sets, yet would have
   essentially no overhead (due to security) once the data set
   was opened.


                            -14-

   Performance of the security system is a concern when
   extending validity checking to the member level. If access
   rules need to be checked only when the data set is opened
   then there should not be a significant performance impact.

   Survey results: (1.72) This was the second highest ranking
   for items that request new function.

9. Provide exits.

   Installation exits and user exits need to be provided at
   critical points of access: data set open/close, directory
   search, member open/close, and record read/write. No access
   method will ever provide all the facilities needed, but with
   appropriate exits and adequate provision for communication
   amongst the exits and the application programs, access can be
   tailored as needed. This can be a cost-effective way to
   provide special purpose access methods to high level
   languages. Some possibilities that could be provided by such
   exits:

      * Migration/recall of individual members

      * Compressed data

      * Encryption/decryption of all or selected fields

      * "Virtual" members (members in which some or all of the
      data is provided by the exits)

      * Co-routine implementation: output from one program can
      be fed directly to the input of another program

      * Enforce installation standards for member names

   Survey results: (1.19) This item received a consistently low
   vote, and thus does not seem to be important. As it does not
   provide any immediate function, it could be omitted from any
   improvements, but we still believe that if robust exits were
   provided that some very powerful uses would be made of them.

10. Provide for qualified member names that can exceed eight
   characters.

   The eight-character member name is overly restrictive, and
   prevents a natural naming convention. As a minimum, there
   needs to be a second eight character member qualifier.
   Qualified member names would provide a great deal of
   flexibility in application development, and would greatly
   simplify the training required for PC users who are
   accustomed to two level file names.

   Survey results: (1.18) Like the previous item, the average
   vote on this item was very low, but this does not adequately
   describe the strong opinions that were expressed. Many
   responses rated this item very highly, but it also received
   many negative votes. Providing qualified member names in


                            -15-

   either the existing PDS structure or in a replacement
   facility could have a major adverse impact on existing
   applications. Many installations have developed procedures
   and utilities that depend on the eight character limit. An
   installation option to limit the length of member names would
   avoid many of these problems, but some would remain. Many
   IBM utilities, including ISPF, would require significant
   modification to accommodate such a change, and users would be
   affected even if their installation could prohibit the use of
   the longer names.

   While we still feel that removing this restriction is
   important to the long-term future of MVS, we also agree with
   the reservations expressed in our survey results. Therefore,
   we believe a way must be found to provide this feature
   without significant negative impact.

11. Provide additional descriptive data at the member level.

   The user needs to be able to associate short descriptive data
   with each member. This should be separate from the fields
   used by the update programs to provide reference history and
   statistics.

   Survey results: (1.11) Our survey found very little support
   for this feature, but some individual responses included
   comments that were very favorable. We recommend that this
   feature be included only if a more comprehensive survey
   indicates a significant need. For instance, it may be that a
   segment of the user community, such as Data Base
   Administrators, would find this to be a useful tool but were
   not fairly represented in our survey.

12. Provide logical format (DCB) information for each member.

   As explained earlier, an inadvertent change to the PDS DCB
   will render most members unusable. Providing this
   information for each member would eliminate that problem, and
   it would also allow members with unlike attributes to be
   collected into the same data set. A user might wish to keep
   the source, load module and listing for a program in a single
   data set, but currently three separate data sets must be
   maintained. Another user may wish to mix fixed and variable
   length CLISTs under TSO.

   The current restriction that all members of a PDS must have
   the same DCB characteristics crops up as a serious problem in
   many areas that range from application development to storage
   administration. Users must be able to group related members
   into the same PDS even though some members have different
   logical format.


                            -16-

   Survey results: (1.00) This item was next to last in the
   overall average, but again this does not adequately reflect
   the opinions on this item. While many responses rated this
   item very high, it received many negative votes because of
   concern that providing a solution to this problem would cause
   other problems that would be much more severe. For instance,
   the PDS DCB currently provides a "default" DCB for the data
   set. Thus users are now spared the trouble of specifying
   logical record length, block size, and record format when
   creating a new member. This greatly simplifies the design
   and use of some applications, and this usability must not be
   abandoned. However, as systems such as VM/CMS and PC-DOS
   have demonstrated, there is no reason why providing file
   attributes at the member level should necessarily detract
   from usability. Nevertheless, this ranking clearly indicates
   this feature should be considered for implementation only in
   a new data structure, and not an enhancement to the existing
   PDS.

13. Provide a subdirectory capability.

   Many systems have begun including the concept of a
   subdirectory, and have found the concept to be a powerful way
   to categorize related files in a hierarchical fashion. If a
   PDS member could itself be a PDS, then OS would have such a
   facility.

   A subdirectory capability is becoming more and more important
   as installations look for ways to port software from other
   systems to MVS.

   Survey results: (0.80) As with the previous item, this
   received many negative votes due to the impact on the
   existing system, but unlike the previous item, it received
   very few strong positive votes. Based on this result, it
   should not be a serious candidate for implementation as part
   of the PDS structure. Yet we do not see how a user on a PC
   can easily transport a set of files from the PC to MVS
   without such a facility, and this is now a significant
   requirement. Therefore, while we believe this facility is
   important to the long term future of MVS, we recommend that
   this feature be provided in MVS only if it is done as part of
   a new data storage facility.

14. Improved alias facility.

   The current alias facility is used very little, and is rather
   crude. We need the ability to add an alias to a member at
   any time. This alias should be defined so that only a single
   copy of the member exists (as is true today), and so that
   updates to one will automatically be reflected in the other
   (not true today). Warning or error messages should be
   generated as appropriate whenever the base member or one of


                            -17-

   its aliases is renamed or deleted. For example, when
   deleting a member that has an alias, the action to be taken
   is not obvious: the system could delete both the member and
   the alias, or it could delete only the base member, and
   change the alias so it now appears to be the base member.
   Messages or options must be added to eliminate confusion in
   this area.

   Survey results: This item was added to the report as a
   result of comments in the survey.

15. Access from high level languages.

   The purpose of high level languages is to facilitate
   productivity, yet the PDS provides significant function in
   file management that is denied to the users of high level
   languages. An interface should be provided that allows these
   users access to the names of the existing members (the
   directory) and provides the ability to read, update, create
   and delete members.

   The full data management power of the system must be
   available in the environment where the user works. High
   level languages should simplify access to function, not
   prevent it.

   Survey results: Through an oversight, this item was left out
   of the original paper, and we did not get survey results on
   this. We believe it would have ranked fairly high, probably
   just below the data integrity items.


                            -18-

6. PDS REALITY: BLUE SKY USUALLY HAS A FEW DARK CLOUDS.

Providing all of the features suggested in the PDSDREAM section
will undoubtedly require a totally new data set structure. That
means there are two likely paths, each of which raises its own
set of concerns:

   * Expand the existing structure and only implement some of
   the needed features.

   * Develop a complete replacement data structure.

On the surface, the first would appear better, but this is true
only if the new features do not introduce serious
incompatibilities. It also raises the concern that many
important features would be omitted either due to limitations in
the basic structure, or due to incompatibilities that the
changes would cause. Thus this option may require users to
adjust to changes in the way partitioned data sets work, yet at
the same time still not get all the features they need. This
option is appropriate only if all the important features can be
implemented in an evolutionary fashion.

The second option instead raises the concerns of migration to a
new data set format. Any replacement facility must be able to
take over all existing PDS function, and must be capable of
performing as well (or better, with perhaps additional memory or
CPU requirements). In particular, system libraries such as
SYSl.NUCLEUS must not require use of the old facility, and the
new facility needs to provide the same kinds of utility
functions that are currently available. There must also be a
way to allow programs that use existing PDS to use the new
facility. Several years ago, when VSAM was new, the ISAM
compatibility interface allowed ISAM users to bridge the gap to
VSAM, and clearly accelerated the acceptance of VSAM as an
alternative to ISAM. This type of conversion aid must be a part
of a new data structure.

Our survey clearly indicates a great deal of concern about
whether this approach would be successful. Many responses
included the comment that if a new facility were built using the
current VSAM as a base, then they did not want it. This is
understandable considering the difficulties in using VSAM at
this time. Perhaps this indicates a need for significant
improvement in VSAM.

Developing a replacement facility allows the most flexibility in
the design of improvements, but it requires a substantial effort
on the part of users who want to use these features. This
option is appropriate only if the features to be provided are of
great value and cannot be made available within the existing
structure.


                            -19-

7. SUMMARY: WHERE DO WE GO FROM HERE?

In suggesting changes to the PDS structure there is certainly
fear that goes with it: Fear that nothing will be done. Fear
that what is done will not solve the problems. Fear that the
changes will cause more problems than they solve. But the fear
should not make us blind to the fact that problems with the PDS
structure have been evident since it first became available more
than 20 years ago. As IBM has developed new and exotic data
management systems, the problems with the PDS have grown more
and more obvious, and we can only hope that the importance of
the PDS has not been forgotten. The problems are serious, and
clearly limit the flexibility and usability of MVS.

Many responses to our survey included comments expressing fear
that IBM might very well attempt some of the changes we have
suggested, and stated flatly that we would be better off if
nothing were changed. We understand the concern, but we are
convinced that only chance for the future is not a Luddite
refusal to change, but to be participants in the change that is
certainly coming.

Since significant change to the facilities provided by the PDS
(and related access methods) will necessarily have a significant
impact on existing MVS installations, we recommend that IBM
include customers and groups such as SHARE at all stages of a
project to provide these improvements. In particular, at all
stages of design and implementation, special consideration must
be given to how an individual installation will implement the
final product.

Clearly significant improvements can be made within the existing
PDS structure. In fact, most of the highly ranked items in the
PDSDREAM section can be done without a new structure, and our
survey results show a strong preference for this approach. But
would such a facility provide the function that will be needed
in the next 20 years? We do not think so, and the responses on
some of the more controversial items in the PDSDREAM section
demonstrate this. Many of those proposals whose average vote
was low received a significant number of very favorable
responses, and many of the other responses included explanations
that their low vote was a result of concern about impact on
existing applications.

With these thoughts in mind, we would like to see the following
actions:

1. Implementation of fixes to the most severe data integrity
   problems in the existing PDS structure.

2. Development of a data structure to replace the PDS. It must
   be a true replacement, and not simply a functional
   alternative that can be used when performance or space


                            -20-

   utilization is not an issue. At a minimum, this new facility
   should include the characteristics that are listed in the
   PDSJOY section, and should fix the problems described in the
   PDSPAIN section. As mentioned earlier, a plan for migrating
   to the new structure must be part of the design of the new
   facility from its inception so that we do not end up with a
   flashy new data structure whose utility is severely limited
   because it does not mesh with existing applications.















































                            -21-

APPENDIX A ANALYSIS OF THE PDSPAIN QUESTIONNAIRE
INTRODUCTION

A preliminary version of the main body of this report was mailed to
individuals on the MVS GROUP mailing list accompanied by the
questionnaire in APPENDIX B. This appendix gives our analysis of
the questionnaire.

The PDSPAIN survey received 287 responses from 206 installations.
For the purpose of analyzing the responses to the survey, the
responses were divided into four categories roughly reflecting the
relative size of installations in terms of Direct Access Storage
Device (DASO) capacity. The groupings are: Small, from 0 to 49
Gigabytes (GB); Medium, from 50 to 299 GB; Large, from 300 to 1000
GB: and Giant over 1000 GB. There were 6 installations in the
Giant category, 39 in the Large category, 99 in the Medium category
and 143 in the Small category. The overall average DASO size was
284.31 GB and the entire sample represented over 58.5 trillion
bytes of DASO.

In addition to overall statistics, a number of questions are
summarized in terms of these group assignments to facilitate
determining differences in significance of various issues as a
function of DASO size.

Question 6, "How well does this paper represent your opinions about
the need for expanded function in partitioned data sets", was
designed to learn how close to the target the paper actually came.

Nearly every response was either "Very well", or "Well". Only a
few indicated that the paper did not reflect their opinion. We
feel the very strong response to this question indicates that the
paper is a meaningful representation of the Pain, Joy and Dreams of
the PDS as seen by responding SHARE members, and that if the paper
and questionnaire are taken together that a very clear picture
emerges of what features are needed.

The total and group mean responses to all scoreable questions are
presented in three tables:

   Table 1: PDSPAIN, RANK ORDERING OF RESPONSES
   Table 2: PDSJOY, RANK ORDERING OF RESPONSES
   Table 3: PDSDREAM, RANK ORDERING OF RESPONSES

As you look at a ranking, you will usually find gaps in the average
votes. These gaps identify levels or tiers in the vote, and we
suspect that the ordering of items within a tier is probably not
significant. With this in mind, there are surprisingly few
differences in the rankings of these votes by installation size.
Some of the differences that do show up will be discussed later on.


                            -22-

SUMMARY OF RESPONSES


TABLE 1: PDSPAIN, RANK ORDERING OF RESPONSES

        OVERALL     GIANT      LARGE        MEDIUM       SMALL
      ITEM SCORE  ITEM SCORE ITEM SCORE   ITEM SCORE   ITEM SCORE
      ----------  ---------- ----------   ----------   ----------
      Q31 2.23    Q31 2.33   Q31 2.30     Q31 2.22     Q31 2.21
      Q33 1.96    Q33 2.00   Q33 2.15     Q35 1.97     Q33 1.93
      Q35 1.93    Q35 1.66   Q35 2.01     Q33 1.92     Q35 1.88
      Q36 1.89    Q32 1.66   Q36 1.97     Q36 1.90     Q36 1.88
      Q32 1.88    Q37 1.66   Q37 1.94     032 1.89     Q32 1.86
      Q37 1.60    Q38 1.66   Q32 1.92     Q37 I.59     Q37 1.52
      Q34 1.33    Q39 1.66   Q34 1.51     Q34 1.33     Q34 1.30
      Q38 1.21    Q36 1.50   Q38 1.30     Q38 1.07     Q38 1.26
      Q39 1.03    Q34 1.00   Q39 1.17     Q39 O.97     Q39 1.00


TABLE 2: PDSJOY, RANK ORDERING OF RESPONSES

        OVERALL     GIANT      LARGE        MEDIUM       SMALL
      ITEM SCORE  ITEM SCORE ITEM SCORE   ITEM SCORE   ITEM SCORE
      ----------  ---------- ----------   ----------   ----------
      044  2.42   Q47  2.66  Q41  2.46    Q44  2.46    Q44  2.45
      Q41  2.37   Q41  2.50  Q43  2.31    Q41  2.36    Q47  2.42
      Q47  2.35   Q44  2.16  Q44  2.25    Q42  2.35    Q41  2.35
      Q43  2.32   Q48  2.16  Q47  2.20    Q43  2.35    Q43  2.31
      Q410 2.27   Q43  2.00  Q410 2.17    Q410 2.30    Q410 2.28
      Q42  2.21   Q45  2.00  Q42  2.05    Q47  2.29    Q42  2.19
      Q46  2.12   Q410 2.00  Q46  2.00    Q46  2.20    Q46  2.12
      Q48  1.84   Q46  1.83  Q48  1.97    Q45  1.94    Q49  1.81
      Q45  1.83   Q42  1.66  Q45  1.71    Q48  1.82    Q48  1.81
      Q49  1.78   Q49  1.66  Q49  1.69    Q49  1.77    Q45  1.78


TABLE 3: PDSDREAM, RANK ORDERING OF RESPONSES

        OVERALL     GIANT      LARGE        MEDIUM       SMALL
      ITEM SCORE  ITEM SCORE ITEM SCORE   ITEM SCORE   ITEM SCORE
      ----------  ---------- ----------   ----------   ----------
      Q51  2.65   Q51  2.83  Q51  2.56    Q51  2.65    Q51  2.67
      Q55  2.32   Q58  2.66  Q52  2.41    Q5S  2.31    Q55  2.31
      Q52  2.29   Q52  2.50  Q55  2.41    Q54  2.26    Q52  2.31
      Q54  2.25   Q54  2.16  Q54  2.33    Q52  2.20    Q54  2.22
      Q58  1.95   0511 2.00  Q53  2.23    Q58  2.08    Q58  1.90
      Q53  1.93   Q55  1.83  Q59  1.94    Q53  1.90    Q53  1.88
      0511 1.79   Q53  1.66  Q511 1.82    Q511 1.77    Q511 1.78
      Q59  1.12   Q56  1.50  Q58  1.74    Q59  1.72    Q59  1.69
      0513 1.19   Q59  1.16  Q513 1.56    Q513 1.18    Q57  1.27
      Q57  1.18   Q513 1.00  Q510 1.20    Q57  1.15    Q513 1.11
      Q510 1.11   Q510 0.83  Q56  1.13    Q510 1.10    Q510 1.11
      Q56  1.00   Q57  0.66  Q57  1.02    Q56  0.93    Q56  0.99
      Q512 0.80   Q512 0.50  Q512 0.74    Q512 0.75    Q512 0.87


                            -23-

PDSPAIN (QUESTIONS 3.1 TO 3.9)

This section of the survey addresses the problems and difficulties
inherent in use of the PDS as a data storage mechanism.

The first observation to be made in the PDSPAIN question group is
that, without exception, every category of installation responded
with Q3.l (requirement for periodic compression of the PDS) as the
first and foremost problem. Very significant and consistent with
this result is that the far and away highest rated dream is Q5.l
(re-use of space without reorganization). In addition, Q4.2
(multiple members on a single track) scores as quite important and
reflects the fact that efficient use of DASD storage is very
important. The significance here is that this problem is massive
and pervasive in the use of the PDS and its best features - it must
not be underestimated.

The second observation is that Q3.3 (data sharing problems), Q3.5
(overlaid DCB), and Q3.6 {overlaid directory) comprise the second
ranked group of problems. These problems all reflect issues of
data integrity. The concern is that the PDS does not represent a
stable, reliable mechanism for storage of data in a shared
environment. This relates well to the high ranking for Q5.5
(directory integrity) and Q5.4 (member integrity), both of which
indicate serious concern and need for improved data integrity.
(Incidentally, the magnitude of these concerns had shown up
unexpectedly in an earlier survey and is what prompted the
formation of the PDSPAIN committee.)

Q3.2 {need to recreate the PDS in order to expand the directory)
and Q3.7 (directory causes performance problems) show
dissatisfaction with the nature of the directory - not dynamically
expandable, constraining to good performance, and inconvenient.

These relate very well with the responses to Q5.2 (allow directory
expansion), Q5.3 (improved directory performance), and Q5.5
(directory integrity).

Q3.4 {integrity problems for a single task) and Q3.8 {JCL deletion)
are ranked as somewhat lower in severity, and are not viewed as
significant problems by most respondents. Q3.9 (similarity of
member attributes) was not considered a problem at all, and many
people felt that this was a desirable characteristic of the PDS.

In summary, the major PAINs of the PDS are (1) the requirements for
periodic compression, and (2) concerns about data integrity.


                            -24-

PDSJOY {QUESTIONS 4. 1 TO 4. 10)

This section of the survey addresses the features of the PDS which
are useful, useable and convenient.

The top ranked JOYS are Q4.4 (use members as sequential data sets),
Q4.l (collecting related files under a single name), and Q4.7
(member and data set concatenation facilities), but even the lowest
ranking item scored very high in this group indicating that these
features are all viewed as critical to the viability of the PDS,
and indicates the importance of maintaining these features through
any enhancements, or into any new data structures.

PDSDREAM {QUESTIONS 5.1 TO 5.13)

These questions address the concepts, features and facilities that
an enhanced PDS, or a replacement for the PDS might have.

The first observation to be made about this group of questions is
that Q5.l (reuse space without reorganization) received the highest
overall score of any question both overall and for each
installation category. Clearly, efficient use of space (without
risking abends when more space is required) is the primary DREAM of
the responding installations. This rather succinctly tells of the
great PAINs involved in monitoring and controlling PDS space and
the 24 hours per day, 7 days per week DREAM of eliminating the need
for reorganization. The better solution is to avoid space waste in
the first place, by recognition of available, unused space within
the data set. Thus the data set would expand only when available,
pre-allocated space is exhausted.

The second tier of DREAM responses is for QS.5 (directory
integrity), Q5.2 (expansion of directory) and Q5.3 (member
integrity). The issue of integrity is clear from these scores and
relates well to Q3.3 (sharing data), Q3.5 (overlaid DCB) and Q3.6
(overlaid directory). Data set and member integrity are major
concerns and of major importance. Of corresponding concern, as
reflected in Q3.2 (must recreate PDS to expand directory), is the
DREAM of eliminating the static nature of the directory. The fixed
directory must be replaced by a dynamic mechanism capable of
adjusting (automatically) to the needs of the moment.

The third tier, Q5.8 (statistics by member), Q5.3 (improved
directory performance), Q5.ll (improved space utilization) and Q5.9
(security at the member level) consists of items that are close to
the important level, but were not generally of critical value.
This should not be taken to mean that no installation ranked these
as critical. In fact, both Q5.8 and Q5.9 had supporters who were
desperate for the function.

The remaining items formed a fourth tier of responses that were


                            -25-

frequently described in the comments as either being undesirable,
or as impacting the desire for performance, space utilization, data
integrity and manageability of the PDS.

It must be noted that QS.6, QS.7, Q5.9, Q5.10 and QS.12 received
several negative responses (almost all from the MEDIUM and SMALL
installations) with comments that indicated a concern about
implementation of the features as a change to the existing PDS
structure. Several responses noted that some of these features
would be desirable if implemented in a new data structure.

NEW ORGANIZATION VERSUS CHANGES TO THE PDS

Questions 7 and 8 were intended to learn whether or not the
responding installations would be willing to convert to a new data
set structure to get the various facilities, or if they felt an
evolutionary enhancement to the existing PDS structure would be
better.

Unfortunately, because of the overwhelming desire to solve the
compression and data integrity problems, both questions got the
same responses, so we did not get the distinction we were looking
for. Instead, the responses to these questions simply underscored
an almost desperate need for solutions to these problems. The
comments that accompanied these responses made it clear that while
these problems were so great that users would go to a new data
structure if they had to, the preferred vehicle is evolutionary
enhancement.

OBSERVATIONS ON DIFFERENCES BETWEEN GROUPS

In this section we make some general observations about how the
several groups (GIANT, LARGE, MEDIUM and SMALL) responded to the
various questions. Because of the small number (6) of Giant
installations, we will not consider their responses in this
section.

We establish several general categories of questions for reference
purposes. The categories are: Integrity (Questions 3.3-3.6, 3.8,
5.4,5.5, 5.9); Space (Questions 5.1 and 5.11); New Features
(Questions 3.1-3.2, 3.9, 5.2, 5.6-5.8, 5.10, 5.12-5.13); Utilities
(Questions 4.6, 4.10); and Performance (Questions 3.7, 4.3, 4.8,
5.3).

INTEGRITY

The Large installations responded more strongly to this issue than
the Medium and Small installations. In every case, the mean score


                            -26-

for Large installations was the highest of all installation sizes.
With the exception of Questions 3.4 (integrity problems for a
single task) and 3.8 (JCL deletion of a PDS), all items in this
category scored near or above IMPORTANT (2.0). Questions 5.4
(improved member integrity) and 5.5 (improved directory integrity)
were well above the average with mean scores of 2.25 and 2.32
respectively.

SPACE

There was no noticeable pattern of differences in this area between
the various installation sizes. Question 5.1 (Reuse space without
compression) received the highest overall score of any question
overall and in each subgroup as well. Even though the PDS is
viewed as a good way to use DASO space, the score of 1.79 for

Question 5.11 (improved DASO storage utilization and device
independence) indicates that this area should be enhanced still
further.

NEW FEATURES

The response from the Large installations was consistently higher
for those elements of this category found in the PDSPAIN question
group (Questions 3.1, 3.2, and 3.9) and for Questions 5.2, 5.6-5.8,
5.10, 5.12, and 5.13 in the PDSDREAM question group. This seems to
indicate that the smaller installations have found ways of dealing
with situations that the larger installations need new features to
handle. Another possible interpretation is that the productivity
gains to be realized from these changes are not significant until
the installation reaches a certain size.

UTILITIES

No particular pattern of responses is observed here other than the
overall rating is very high for both questions in this category -
utilities and tools to manage data set structures are quite
important. Many comments observed that third party software, and
programs, such as the PDS command (available on the CBT mods tape)
were critical to the usability of the PDS. At least two bemoaned
the fact that their management would not allow them to use any
programs not provided by IBM.

PERFORMANCE

Generally, the Large installations responded more strongly than the
other installations. The consistently highest scored item in this
category was fast access to members.


                            -27-

CONCLUSION

While the analysis of the questionnaire showed widespread agreement
with the committee's analysis of the problem, there was significant
concern with the impact that the solutions to these problems might
cause. Even so, while it is clear from the survey that an
evolutionary solution to these problems is preferable, over 60% of
those responding said their installation would convert to a
completely new data structure to solve problems they are currently
facing. We feel that we have demonstrated a widespread
dissatisfaction with the facilities provided by the PDS and related
access methods, and that there is a clear requirement that IBM act
to correct these inadequacies in the system. The effects of these
problems are widespread and are a significant cost to installations
that use MVS.

SELECTED COMMENTS:

We were surprised and pleased by the amount of thought that had
obviously gone into the comments that were returned with the
questionnaires. We felt it important to include some to give an
idea of the range of opinion that was expressed. Several of the
ideas expressed in these comments have been incorporated into the
main body of this report.

   * "Despite the overall excellent job you've done on this
   paper .... I believe this effort to be counter-productive to the
   future of storage management if any emphasis is placed on the
   access method. The data structure is what is significant and
   important."

   * (That all members must have the same attributes) "is probably a
   more substantial impact than is commonly realized since it
   prevents whole classes of solutions to problems in organizing
   data so that it is easily accessible .... "

   * "Personally, I don't think we need another VSAM."

   * "If IBM does it, they'll use VSAM and there go all the ease of
   use considerations."

   * "I don't want members to have different DCB characteristics if
   it means complicating the addition of a member to a PDS by
   having to specify DCB attributes."


                            -28-

   * "We once had a programmer linkedit a program into a COPYLIB.
   It took three days at a critical time in the schedule to
   recover."

   * "We need member wild-card facilities"

   * "Thank God for the PDS command!"

   * "The directory must itself be accessible as a file."

   * "High level languages must be able to select, create, and
   process files within a PDS."

   * "If a PDS is open, or a member of LINKLIST, expanding the data
   set into a secondary extent is disastrous."

   * "Limiting the scope of this paper to the PDS is a mistake.
   What you are addressing should apply to all file types."

   * "I'm afraid that if PDS's get enhanced we'll lose what good
   features currently exist ...    SHARE must take a very firm
   position on what it wants and be adamant about not accepting
   less."

   * "IBM should simply port PC-DOS structure to MVS and VM."

   * "It sounds like you want a VM minidisk."

   * "When IEBCOPY compress fails, the data set is destroyed, but
   the system continues to allow any access to the data set.
   Access should be denied except for repair utilities."

   * "The items in PDSDREAM would make my staff much more
   productive."

   * "I want to be able to extend a member (DISP=MOD)"

   * "I had forgotten how bad the PDS is!"

