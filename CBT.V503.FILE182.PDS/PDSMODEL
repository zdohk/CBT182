/* --------------------  rexx procedure  -------------------- */
/* Name:      pdsmodel                                        *
 *                                                            *
 * Use:       User extended command in P86OPUX to allocate    *
 *            a new dataset based on the active dataset.      *
 *                                                            *
 *            MODEL,'CMD(%PDSMODEL ''&PDSDSN'' &PDSVOL)'      *
 *                                                            *
 * Author:    Lionel B. Dyck       Janko Kalinic              *
 *            lbdyck@gmail.com     the.pds.command@gmail.com  *
 *                                                            *
 * Modified:   4/13/21 - Add STORCLAS                         *
 *                                                            *
 *             8/30/18 - Free new dataset allocation          *
 *                                                            *
 *             4/02/18 - Allow for DSORG=PS                   *
 *                                                            *
 *            12/08/17 - Convert PDSEGEN MODEL code for       *
 *                       PDS use (Janko K)                    *
 *                                                            *
 * ---------------------------------------------------------- *
 * Copyright (c) 2017 by Lionel B. Dyck                       *
 * ---------------------------------------------------------- */
    Arg pdsdsn pdsvol
    parse value '' with null
/* ------------------------- *
 | Process the Model command |
 * ------------------------- */
    Address ISPExec
    zerrhm   = 'p86opmod'
    zerralrm = 'no'
    if pdsvol <> '' then 'dsinfo dataset('pdsdsn') volume('pdsvol')'
                    else 'dsinfo dataset('pdsdsn')'
    mdsn   = pdsdsn
    newgen = zdsngen
    munit  = left(zdsspc,1)
    dsnt   = left(zdsdsnt,1)
    'Control Display Save'
    'Addpop'
    do forever
       zcmd   = ''
       'Display Panel(p86model)'
       xrc = rc
       if xrc > 0 then leave
       if sysdsn(mdsn) /= 'OK' then leave
       zerrsm = 'Error...'
       zerrlm = mdsn 'already exists - try a different dsn.'
       'setmsg msg(isrz002)'
       end
    'RemPop'
    'Control Display Restore'
    if xrc > 0 then do
       zerrsm = 'Cancelled'
       zerrlm = 'Model request has been cancelled.'
       'setmsg msg(isrz002)'
       exit
       end
    zdsrf = strip(left(zdsrf,1)' 'substr(zdsrf,2,1)' 'substr(zdsrf,3,1))
    library = null

    if dsnt = ' ' then
      library = 'Dsorg(ps)'
    if dsnt = 'P' then
      library = 'Dsntype(PDS) dsorg(po) dir('zdsdira')'
    if (dsnt = 'L' & newgen = 0) then
      library = 'Dsntype(Library,1) dsorg(po) dir(1)'
    if (dsnt = 'L' & newgen > 0) then
      library = 'Dsntype(Library,2) dsorg(po) dir(1) maxgens('newgen')'

    if zdsvol = null then vol = null
                     else vol = 'Vol('zdsvol')'

    if msclass = null then scls = null
                      else scls = 'Storclas('msclass')'
    space = null
    if munit = 'B' then space = 'Block('zdsblk')'
    if munit = 'T' then space = 'Tracks'
    if munit = 'C' then space = 'Cylinders'
    Address TSO ,
    'Alloc ds('mdsn') new spa('zds1ex','zds2ex')' vol ,
    'Recfm('zdsrf') Lrecl('zdslrec') Blksize('zdsblk')' ,
    library space scls
    if rc = 0 then do
       zerrsm = 'Allocated'
       zerrlm = mdsn 'allocated with Space('zds1ex','zds2ex')' ,
                'Recfm('zdsrf') Lrecl('zdslrec') Blksize('zdsblk')' ,
                vol library space scls
       Address TSO ,
       'Free ds('mdsn')'
       end
    else do
         zerrsm = 'Error'
         zerrlm = 'Allocation failure for' mdsn
         end
    'setmsg msg(isrz002)'
    exit
