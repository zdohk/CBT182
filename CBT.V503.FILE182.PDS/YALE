/* --------------------  rexx procedure  --------------------------- */
/* Name:      YALE                                                   |
 |                                                                   |
 | Function:  Yale COMPARE dialog to compare two PDS or sequential   |
 |            files.                                                 |
 |                                                                   |
 | Syntax:    %YALE                                                  |
 |                                                                   |
 | Author:    Various, CBT file 296.  CBTsmithÂ® - Janko Kalinic      |
 |                                                                   |
 | History:                                                          |
 |            01/06/19 - Creation                                    |
 | ----------------------------------------------------------------- |
 | Copyleft (c) All Wrongs Reserved                                  |
 * ----------------------------------------------------------------- */

   Address ISPExec
   load_info = loadispf()
panel:
   'select panel(compr#p)'
    x = dropispf(load_info)
    exit
/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
 DropISPF: Procedure
 arg load_info
 Address ISPEXEC
 do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
       if libd = "ALTLIBC" then lib = "CLIST"
                           else lib = "EXEC"
       Address TSO,
         "Altlib Deact Application("lib")"
       end
    else "libdef" libd
    address tso "free f("dd")"
    end
 return 0
/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
>START
>Panel COMPR#P
)BODY
%---------------------------  File Compare Utility  ----------------------------
%COMMAND ===>_ZCMD                                                             +
+
+    Compare two files using%COMPARE+(either PDS or sequential)
+
+    ENTER file1%===>_DSN1                                                   +
+         VOLSER%===>_VOL1  +  (If not cataloged)
+
+    ENTER file2%===>_DSN2                                                   +
+         VOLSER%===>_VOL2  +  (If not cataloged)
+
+    Options:
+
+       ALC code%===>_ALC+      %YES+- is Assembler Language Code
+                                      (sequence numbers 73-80)
+                               %NO+ - is not Assembler Language Code
+
+   Print after browsing the report %===>_CMSPRT+     (%Y+or%N+)
+
+   Job accounting number           %===>_CMSCHG     +
)INIT
 .HELP = COMPR#H
 .CURSOR = DSN1
 &DSN1   = TRANS (&DSN1 ' ',' ',*,*)
 &DSN2   = TRANS (&DSN2 ' ',' ',*,*)
 &ALC    = TRANS (&ALC ' ',NO,*,*)
 &VOL1   = TRANS (&VOL1 ' ',' ',*,*)
 &VOL2   = TRANS (&VOL2 ' ',' ',*,*)
 &CMSPRT = 'N'
)PROC
 VER (&DSN1,NONBLANK,DSNAME)
 VER (&DSN2,NONBLANK,DSNAME)
 &ALC = TRUNC (&ALC,1)
 VER (&ALC,LIST,N,Y)
 &ALC = TRANS (&ALC Y,YES,N,NO)
 &CMSPRT = TRUNC (&CMSPRT,1)
 VER (&CMSPRT,NB,LIST,Y,N)
 IF (&CMSPRT = 'Y')
    VER (&CMSCHG,NB)
 &ZSEL = 'CMD(%COMPR#C)'
 VPUT (ALC,CMSPRT,DSN1,DSN2,VOL1,VOL2) SHARED
 VPUT (CMSCHG) PROFILE
)END
>Panel COMPR#H
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       ?   TYPE(TEXT) INTENS(LOW) HILITE(REVERSE) COLOR(BLUE)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY
%TUTORIAL ------------------  File Compare Utility  ------------------- TUTORIAL
%COMMAND ===>_ZCMD                                                             +
+
+
+    The features in this dialog are:
+
+     1. Uses the?Yale%COMPARE+program logic for comparing and
+        resynchronization.
+
+     2. Supports compares of full PDS datasets (do not specify a
+        member name to use this feature).
+
+     3. Supports compares of two sequential datasets.
+
+     4. Supports record sizes different from 80 bytes but less than
+        256 bytes.
+
+
+
)END
>Clist COMPR#C
PROC 0
 /*--------------------------------------------------------*/
 /*      ISPF/PDF CLIST FOR TSO COMMAND  'COMPARE'         */
 /*--------------------------------------------------------*/
CONTROL NOMSG PROMPT
SET &CMPRPT = CMPLIST1
SET &EFLAG = 0
SET &RTC = 0
ERROR +
   DO
       DO WHILE &EFLAG = 0
           RETURN
       END
       DO WHILE &EFLAG = 2
           SET &EFLAG = 1
           SET &CMPRPT = CMPLIST2
           ALLOC DA('&SYSUID..&CMPRPT') FI(CMPRPT) +
               SP(5,5) CYLINDERS RELEASE USI(T)
           RETURN
       END
       DO WHILE &EFLAG = 5
           SET &RTC = &LASTCC
           IF &RTC < 9 THEN RETURN
           WRITE &EMSG
           RETURN
       END
       DO WHILE &EFLAG Â¬= 0
           WRITE &EMSG
           EXIT
       END
   END
ISPEXEC VGET (CMSPRT DSN1 DSN2 ALC VOL1 VOL2)
FREE FI(CMPRPT,OLD,NEW) ATTR(T)
ATTR T RECFM(F B A) BLKSI(19019) LRE(133) BUFN(2)
DELETE ('&SYSUID..CMPLIST1')
DELETE ('&SYSUID..CMPLIST2')
SET &EFLAG = 1
SET &EMSG=&STR(ERROR IN ALLOCATION OF CMPRPT FILE)
CONTROL NOFLUSH
SET &EFLAG = 2
SET &LASTCC = 0
ALLOC FI(CMPRPT) DA('&SYSUID..&CMPRPT') +
     SP(5,5) CYLINDERS RELEASE USI(T)
CONTROL MSG
SET &EFLAG = 5
SET &EMSG=&STR(COMPARE PROGRAM RETURN CODE NON ZERO)
IF &ALC = YES THEN SET &TX = ASM
IF &ALC = NO  THEN SET &TX = NOASM
IF &VOL1 =   THEN SET &V1 =
   ELSE SET &V1 = &STR(OVOLUME(&VOL1))
IF &VOL2 =   THEN SET &V2 =
   ELSE SET &V2 = &STR(NVOLUME(&VOL2))

COMPARE &DSN1 &DSN2 &V1 &V2 &TX OUTFILE(CMPRPT)

CONTROL NOMSG
SET &EFLAG = 0
FREE FI(CMPRPT,NEW,OLD) ATTR(T)
IF &RTC > 4 THEN GOTO DONE
ISPEXEC VIEW   DATASET('&SYSUID..&CMPRPT')
IF &CMSPRT = N THEN GOTO DONE
ISPEXEC VPUT (CMPRPT) SHARED
ISPEXEC FTOPEN TEMP
ISPEXEC FTINCL COMPR#S
ISPEXEC FTCLOSE
ISPEXEC VGET (ZTEMPF)
CONTROL MSG
SUBMIT '&ZTEMPF'
EXIT
DONE:  DELETE ('&SYSUID..&CMPRPT')
EXIT
>Skel COMPR#S
//&ZUSER.C  JOB (&CMSCHG),&ZUSER,CLASS=B,MSGCLASS=R
//TMSRPT   EXEC PGM=IEBGENER
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=R
//SYSUT1   DD  DSN=&ZUSER..&CMPRPT,DISP=(OLD,DELETE)
//SYSUT2   DD  SYSOUT=R
>END
