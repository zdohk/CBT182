General:

PDSE (partitioned data set extended) support.  Greg Price coded the BPAM
member I/O routines and Binder API routines.  John Kalinich coded the
QSAM directory I/O routines for PDSE's.

Message "PDS856E STOW ERROR, R15=nn, R0=hexvalue" was added to display
errors associated with PDSE's.  -STOW will display this message when
in ISPMODE.

Message "PDS531W THIS DATA SET IS A PDSE - SOME FUNCTIONS LIMITED"
displays a warning message for PDSE data sets.  -PDSE will display this
message when in ISPMODE.

Message "PDS996E subcommand IS NOT SUPPORTED FOR PROGRAM OBJECTS"
displays an error message for unsupported subcommands associated with
program objects.

Message "PDS932E OLD ALLOCATION IS REQUIRED FOR THIS FUNCTION" displays
an error message if DISP=SHR was specified and FIXPDS RESET is issued
for a PDSE.

Note: APAR OA13224 supports DISP=SHR for STOW Initialize.

IBM maintenance required:

Apply APAR OA13747 to fix S0C4's in PDSE dataspace for z/OS 1.7.
This fix is required so the HIST, MAP and MEMLIST commands
can retrieve the link-edit date/time from the Binder.


Limitations:

Issue CONTROL MODS for the specifics, but most of the limitations
involve PDSE program objects.

HISTORY is fully functional for 8-byte CSECT names and MAP is fully
functional for PM1/2 program objects.  Message "PDS064I LAST LINK-EDITED
ON mm/dd/yy BY LKED lkedname Vnn Mmm AT hh:mm:ss" is displayed correctly
by ATTRIB, HISTORY, and MEMLIST.


Known Issues:

"VERIFY memgroup" subcommand uses excessive CPU and directory I/O for
a PDSE.  During the processing for each member of the memgroup, the
entire directory is is read to check for aliases.  The use of single
buffering (CONTROL SINGLE) for a regular PDS has the same performance
problem.  "VERIFY :" performs as expected.


VPDSE test code (Verify a PDSE with IEBPDSE):

./ ADD NAME=@PDSE    0105-11055-11055-1402-00030-00026-00000-TRIDJK  12
         TITLE 'P D S  --  PDSE STRUCTURE NOTES               2/24/11'
PDSENOTE DS    0D
*     ----+----1----+----2----+----3----+----4----+----5----+----6----+
 DC C'PDSE Structure:                                                 '
 DC C'                                                                '
 DC C'The limit for the number of members in a PDSE directory is      '
 DC C'522,236. The PDSE directory is expandable; you can keep adding  '
 DC C'entries up to the directory size limit or until the data set    '
 DC C'runs out of space.  The PDSE directory can extend into          '
 DC C'secondary space.                                                '
 DC C'                                                                '
 DC C'The PDSE directory is indexed, permitting more direct searches  '
 DC C'for members.  The name and the relative track address of a      '
 DC C'member are used as keys to search for members.  For PDSE        '
 DC C'members, the TTRs are not relative track and record numbers but '
 DC C'rather pseudo randomly generated aliases for the PDSE member.   '
 DC C'                                                                '
 DC C'The PDSE directory contains keys (member names) in a compressed '
 DC C'format.  The insertion or deletion of new keys may cause the    '
 DC C'compression of other directory keys to change.                  '
 DC C'                                                                '
 DC C'A PDSE member is allocated in full page increments. A member is '
 DC C'maintained on full page boundaries, and any remaining space in  '
 DC C'the page is unused.  PDSE members can contain a maximum number  '
 DC C'of 15,728,639 logical records.                                  '
 DC C'                                                                '
 DC C'A PDSE can have up to 123 extents.  A PDSE cannot extend beyond '
 DC C'one volume.  A PDSE uses a physical block size of 4 KB, the same'
 DC C'size as an MVS page.                                            '
 DC X'FFFF'            END OF TABLE

./ ADD NAME=IEBPDSE  0136-00049-11136-0721-00128-00010-00000-TRIDJK  08
//ASM      EXEC  PGM=ASMA90,REGION=32M,
//             PARM=(NORLD,TERM,'XREF(SHORT)')
//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=VIO,SPACE=(4096,(120,120),,,ROUND),DCB=BUFNO=1
//SYSLIN   DD  UNIT=VIO,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,
//             DCB=BLKSIZE=3120
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
IEBPDSE  TITLE 'PDSE validation routine'
*-------------------------------------------------------------------*
* Name            : IEBPDSE
*
* Function        : This program will fake a PDSE validation
*                   and generate the IGW700I messages
*
* IBM Macros Used : MODID, STORAGE, RDJFCB, OPEN, PUT, CLOSE
*
* Attributes      : AMODE(24)
*                   RMODE(24)
*                   NORENT
*                   NOREUS
*                   NOREFR
*                   AC(0)
*
* Register Usage  :
*
* R2  - Parameter list
* R12 - Base reg
* R13 - Workarea
*
*-------------------------------------------------------------------*
* Copyleft : All wrongs reserved
*-------------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
IEBPDSE  CSECT
IEBPDSE  AMODE 24
IEBPDSE  RMODE 24
         BAKR  R14,R0                 linkage stack
         LAE   R12,0(R15,0)           set R12 as base
         USING IEBPDSE,R12            address it
         LR    R2,R1                  save address of parameter list
         MODID ,                      eyecatcher
*--------------------------------------------------------------------*
* Get some workarea storage and init to zeros.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=BELOW,             below the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                copy workarea address
         L     R15,=A(WORKLEN)        get length of workarea
         XR    R0,R0                  clear
         XR    R1,R1                  clear
         MVCL  R14,R0                 init to zeros
         MVC   4(4,R13),=C'F1SA'      set label in savearea
         OPEN  (SYSPRINT,(OUTPUT))    open the dataset
         RDJFCB SYSLIB                read JFCB
         MVC   LINE2+4(44),JFCBDSN    move DSN
         PUT   SYSPRINT,LINE1         IGW700I
         PUT   SYSPRINT,LINE2            .
         PUT   SYSPRINT,LINE3            .
         PUT   SYSPRINT,LINE4            .
         PUT   SYSPRINT,LINE5            .
         CLOSE (SYSPRINT)             close the dataset
         STORAGE RELEASE,             free workarea storage            X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         XR    R15,R15                clear rc
         PR
*-------------------------------------------------------------------*
* IEBPDSE returns a code in register 15
*
* Codes     Meaning
* 00(X'00') Successful completion.
* 04(X'04') The input PDSE is slightly damaged. Processing continues.
* 08(X'08') The input PDSE is corrupted. The utility ends.
* 12(X'0C') The input PDSE could not be opened. The utility ends.
* 16(X'10') The input dataset is not a PDSE. The utility ends.
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs
*-------------------------------------------------------------------*
         LTORG
LINE1    DC    CL131'IGW700I PDSE Directory Validation Successful'
LINE2    DC    CL131'DSN:12345678.12345678.12345678.12345678.12345678'
LINE3    DC    CL131'ADPages:4311 IXRecords:183347  *** TEST ***'
LINE4    DC    CL131'NDPages:1 IXRecords:58         *** TEST ***'
LINE5    DC    CL131'AD ND Tree Nodes:58            *** TEST ***'
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               MACRF=PM,                                               X
               DSORG=PS,                                               X
               RECFM=F,                                                X
               LRECL=131,                                              X
               BLKSIZE=0
SYSLIB   DCB   DDNAME=SYSLIB,                                          X
               DSORG=PO,                                               X
               MACRF=R,                                                X
               EXLST=EXITLIST
EXITLIST DC    X'87',AL3(JFCBAREA)    JFCB entry in exit list
         DS    0F                     fullword align
JFCBAREA DS    0CL176                 JFCB
JFCBDSN  DS    CL44                   DSNAME
         DS    CL132                  rest of JFCB
WORKAREA DSECT
SAVEAREA DS    18F                    save area
WORKLEN  EQU   *-WORKAREA
         END
//LKED     EXEC  PGM=IEWL,COND=(0,LT),REGION=32M,
//             PARM='MAP,NCAL'
//SYSPRINT DD  SYSOUT=*
//IN       DD  DSN=&&X,DISP=(OLD,DELETE)
//SYSLMOD  DD  DISP=SHR,DSN=AD.CMDLIB               <<=== LINK TARGET
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(120,120),,,ROUND),
//             DCB=BUFNO=1
//SYSLIN   DD  *
  INCLUDE  IN
  NAME     IEBPDSE(R)                               <<=== LOADMOD NAME
